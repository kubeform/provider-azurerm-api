/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/redis/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EnterpriseClusterLister helps list EnterpriseClusters.
// All objects returned here must be treated as read-only.
type EnterpriseClusterLister interface {
	// List lists all EnterpriseClusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EnterpriseCluster, err error)
	// EnterpriseClusters returns an object that can list and get EnterpriseClusters.
	EnterpriseClusters(namespace string) EnterpriseClusterNamespaceLister
	EnterpriseClusterListerExpansion
}

// enterpriseClusterLister implements the EnterpriseClusterLister interface.
type enterpriseClusterLister struct {
	indexer cache.Indexer
}

// NewEnterpriseClusterLister returns a new EnterpriseClusterLister.
func NewEnterpriseClusterLister(indexer cache.Indexer) EnterpriseClusterLister {
	return &enterpriseClusterLister{indexer: indexer}
}

// List lists all EnterpriseClusters in the indexer.
func (s *enterpriseClusterLister) List(selector labels.Selector) (ret []*v1alpha1.EnterpriseCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EnterpriseCluster))
	})
	return ret, err
}

// EnterpriseClusters returns an object that can list and get EnterpriseClusters.
func (s *enterpriseClusterLister) EnterpriseClusters(namespace string) EnterpriseClusterNamespaceLister {
	return enterpriseClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EnterpriseClusterNamespaceLister helps list and get EnterpriseClusters.
// All objects returned here must be treated as read-only.
type EnterpriseClusterNamespaceLister interface {
	// List lists all EnterpriseClusters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EnterpriseCluster, err error)
	// Get retrieves the EnterpriseCluster from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EnterpriseCluster, error)
	EnterpriseClusterNamespaceListerExpansion
}

// enterpriseClusterNamespaceLister implements the EnterpriseClusterNamespaceLister
// interface.
type enterpriseClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EnterpriseClusters in the indexer for a given namespace.
func (s enterpriseClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EnterpriseCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EnterpriseCluster))
	})
	return ret, err
}

// Get retrieves the EnterpriseCluster from the indexer for a given namespace and name.
func (s enterpriseClusterNamespaceLister) Get(name string) (*v1alpha1.EnterpriseCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("enterprisecluster"), name)
	}
	return obj.(*v1alpha1.EnterpriseCluster), nil
}
