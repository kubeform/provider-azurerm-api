/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/redis/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LinkedServerLister helps list LinkedServers.
// All objects returned here must be treated as read-only.
type LinkedServerLister interface {
	// List lists all LinkedServers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LinkedServer, err error)
	// LinkedServers returns an object that can list and get LinkedServers.
	LinkedServers(namespace string) LinkedServerNamespaceLister
	LinkedServerListerExpansion
}

// linkedServerLister implements the LinkedServerLister interface.
type linkedServerLister struct {
	indexer cache.Indexer
}

// NewLinkedServerLister returns a new LinkedServerLister.
func NewLinkedServerLister(indexer cache.Indexer) LinkedServerLister {
	return &linkedServerLister{indexer: indexer}
}

// List lists all LinkedServers in the indexer.
func (s *linkedServerLister) List(selector labels.Selector) (ret []*v1alpha1.LinkedServer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LinkedServer))
	})
	return ret, err
}

// LinkedServers returns an object that can list and get LinkedServers.
func (s *linkedServerLister) LinkedServers(namespace string) LinkedServerNamespaceLister {
	return linkedServerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LinkedServerNamespaceLister helps list and get LinkedServers.
// All objects returned here must be treated as read-only.
type LinkedServerNamespaceLister interface {
	// List lists all LinkedServers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LinkedServer, err error)
	// Get retrieves the LinkedServer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LinkedServer, error)
	LinkedServerNamespaceListerExpansion
}

// linkedServerNamespaceLister implements the LinkedServerNamespaceLister
// interface.
type linkedServerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LinkedServers in the indexer for a given namespace.
func (s linkedServerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LinkedServer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LinkedServer))
	})
	return ret, err
}

// Get retrieves the LinkedServer from the indexer for a given namespace and name.
func (s linkedServerNamespaceLister) Get(name string) (*v1alpha1.LinkedServer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("linkedserver"), name)
	}
	return obj.(*v1alpha1.LinkedServer), nil
}
