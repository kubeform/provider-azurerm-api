/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/redis/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EnterpriseDatabaseLister helps list EnterpriseDatabases.
// All objects returned here must be treated as read-only.
type EnterpriseDatabaseLister interface {
	// List lists all EnterpriseDatabases in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EnterpriseDatabase, err error)
	// EnterpriseDatabases returns an object that can list and get EnterpriseDatabases.
	EnterpriseDatabases(namespace string) EnterpriseDatabaseNamespaceLister
	EnterpriseDatabaseListerExpansion
}

// enterpriseDatabaseLister implements the EnterpriseDatabaseLister interface.
type enterpriseDatabaseLister struct {
	indexer cache.Indexer
}

// NewEnterpriseDatabaseLister returns a new EnterpriseDatabaseLister.
func NewEnterpriseDatabaseLister(indexer cache.Indexer) EnterpriseDatabaseLister {
	return &enterpriseDatabaseLister{indexer: indexer}
}

// List lists all EnterpriseDatabases in the indexer.
func (s *enterpriseDatabaseLister) List(selector labels.Selector) (ret []*v1alpha1.EnterpriseDatabase, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EnterpriseDatabase))
	})
	return ret, err
}

// EnterpriseDatabases returns an object that can list and get EnterpriseDatabases.
func (s *enterpriseDatabaseLister) EnterpriseDatabases(namespace string) EnterpriseDatabaseNamespaceLister {
	return enterpriseDatabaseNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EnterpriseDatabaseNamespaceLister helps list and get EnterpriseDatabases.
// All objects returned here must be treated as read-only.
type EnterpriseDatabaseNamespaceLister interface {
	// List lists all EnterpriseDatabases in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EnterpriseDatabase, err error)
	// Get retrieves the EnterpriseDatabase from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EnterpriseDatabase, error)
	EnterpriseDatabaseNamespaceListerExpansion
}

// enterpriseDatabaseNamespaceLister implements the EnterpriseDatabaseNamespaceLister
// interface.
type enterpriseDatabaseNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EnterpriseDatabases in the indexer for a given namespace.
func (s enterpriseDatabaseNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EnterpriseDatabase, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EnterpriseDatabase))
	})
	return ret, err
}

// Get retrieves the EnterpriseDatabase from the indexer for a given namespace and name.
func (s enterpriseDatabaseNamespaceLister) Get(name string) (*v1alpha1.EnterpriseDatabase, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("enterprisedatabase"), name)
	}
	return obj.(*v1alpha1.EnterpriseDatabase), nil
}
