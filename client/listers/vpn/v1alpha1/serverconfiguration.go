/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/vpn/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServerConfigurationLister helps list ServerConfigurations.
// All objects returned here must be treated as read-only.
type ServerConfigurationLister interface {
	// List lists all ServerConfigurations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServerConfiguration, err error)
	// ServerConfigurations returns an object that can list and get ServerConfigurations.
	ServerConfigurations(namespace string) ServerConfigurationNamespaceLister
	ServerConfigurationListerExpansion
}

// serverConfigurationLister implements the ServerConfigurationLister interface.
type serverConfigurationLister struct {
	indexer cache.Indexer
}

// NewServerConfigurationLister returns a new ServerConfigurationLister.
func NewServerConfigurationLister(indexer cache.Indexer) ServerConfigurationLister {
	return &serverConfigurationLister{indexer: indexer}
}

// List lists all ServerConfigurations in the indexer.
func (s *serverConfigurationLister) List(selector labels.Selector) (ret []*v1alpha1.ServerConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServerConfiguration))
	})
	return ret, err
}

// ServerConfigurations returns an object that can list and get ServerConfigurations.
func (s *serverConfigurationLister) ServerConfigurations(namespace string) ServerConfigurationNamespaceLister {
	return serverConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServerConfigurationNamespaceLister helps list and get ServerConfigurations.
// All objects returned here must be treated as read-only.
type ServerConfigurationNamespaceLister interface {
	// List lists all ServerConfigurations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServerConfiguration, err error)
	// Get retrieves the ServerConfiguration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServerConfiguration, error)
	ServerConfigurationNamespaceListerExpansion
}

// serverConfigurationNamespaceLister implements the ServerConfigurationNamespaceLister
// interface.
type serverConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServerConfigurations in the indexer for a given namespace.
func (s serverConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServerConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServerConfiguration))
	})
	return ret, err
}

// Get retrieves the ServerConfiguration from the indexer for a given namespace and name.
func (s serverConfigurationNamespaceLister) Get(name string) (*v1alpha1.ServerConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("serverconfiguration"), name)
	}
	return obj.(*v1alpha1.ServerConfiguration), nil
}
