/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/vpn/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GatewayNATRuleLister helps list GatewayNATRules.
// All objects returned here must be treated as read-only.
type GatewayNATRuleLister interface {
	// List lists all GatewayNATRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GatewayNATRule, err error)
	// GatewayNATRules returns an object that can list and get GatewayNATRules.
	GatewayNATRules(namespace string) GatewayNATRuleNamespaceLister
	GatewayNATRuleListerExpansion
}

// gatewayNATRuleLister implements the GatewayNATRuleLister interface.
type gatewayNATRuleLister struct {
	indexer cache.Indexer
}

// NewGatewayNATRuleLister returns a new GatewayNATRuleLister.
func NewGatewayNATRuleLister(indexer cache.Indexer) GatewayNATRuleLister {
	return &gatewayNATRuleLister{indexer: indexer}
}

// List lists all GatewayNATRules in the indexer.
func (s *gatewayNATRuleLister) List(selector labels.Selector) (ret []*v1alpha1.GatewayNATRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GatewayNATRule))
	})
	return ret, err
}

// GatewayNATRules returns an object that can list and get GatewayNATRules.
func (s *gatewayNATRuleLister) GatewayNATRules(namespace string) GatewayNATRuleNamespaceLister {
	return gatewayNATRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GatewayNATRuleNamespaceLister helps list and get GatewayNATRules.
// All objects returned here must be treated as read-only.
type GatewayNATRuleNamespaceLister interface {
	// List lists all GatewayNATRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GatewayNATRule, err error)
	// Get retrieves the GatewayNATRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GatewayNATRule, error)
	GatewayNATRuleNamespaceListerExpansion
}

// gatewayNATRuleNamespaceLister implements the GatewayNATRuleNamespaceLister
// interface.
type gatewayNATRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GatewayNATRules in the indexer for a given namespace.
func (s gatewayNATRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GatewayNATRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GatewayNATRule))
	})
	return ret, err
}

// Get retrieves the GatewayNATRule from the indexer for a given namespace and name.
func (s gatewayNATRuleNamespaceLister) Get(name string) (*v1alpha1.GatewayNATRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("gatewaynatrule"), name)
	}
	return obj.(*v1alpha1.GatewayNATRule), nil
}
