/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/advanced/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ThreatProtectionLister helps list ThreatProtections.
// All objects returned here must be treated as read-only.
type ThreatProtectionLister interface {
	// List lists all ThreatProtections in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ThreatProtection, err error)
	// ThreatProtections returns an object that can list and get ThreatProtections.
	ThreatProtections(namespace string) ThreatProtectionNamespaceLister
	ThreatProtectionListerExpansion
}

// threatProtectionLister implements the ThreatProtectionLister interface.
type threatProtectionLister struct {
	indexer cache.Indexer
}

// NewThreatProtectionLister returns a new ThreatProtectionLister.
func NewThreatProtectionLister(indexer cache.Indexer) ThreatProtectionLister {
	return &threatProtectionLister{indexer: indexer}
}

// List lists all ThreatProtections in the indexer.
func (s *threatProtectionLister) List(selector labels.Selector) (ret []*v1alpha1.ThreatProtection, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ThreatProtection))
	})
	return ret, err
}

// ThreatProtections returns an object that can list and get ThreatProtections.
func (s *threatProtectionLister) ThreatProtections(namespace string) ThreatProtectionNamespaceLister {
	return threatProtectionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ThreatProtectionNamespaceLister helps list and get ThreatProtections.
// All objects returned here must be treated as read-only.
type ThreatProtectionNamespaceLister interface {
	// List lists all ThreatProtections in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ThreatProtection, err error)
	// Get retrieves the ThreatProtection from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ThreatProtection, error)
	ThreatProtectionNamespaceListerExpansion
}

// threatProtectionNamespaceLister implements the ThreatProtectionNamespaceLister
// interface.
type threatProtectionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ThreatProtections in the indexer for a given namespace.
func (s threatProtectionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ThreatProtection, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ThreatProtection))
	})
	return ret, err
}

// Get retrieves the ThreatProtection from the indexer for a given namespace and name.
func (s threatProtectionNamespaceLister) Get(name string) (*v1alpha1.ThreatProtection, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("threatprotection"), name)
	}
	return obj.(*v1alpha1.ThreatProtection), nil
}
