/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/eventgrid/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SystemTopicEventSubscriptionLister helps list SystemTopicEventSubscriptions.
// All objects returned here must be treated as read-only.
type SystemTopicEventSubscriptionLister interface {
	// List lists all SystemTopicEventSubscriptions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SystemTopicEventSubscription, err error)
	// SystemTopicEventSubscriptions returns an object that can list and get SystemTopicEventSubscriptions.
	SystemTopicEventSubscriptions(namespace string) SystemTopicEventSubscriptionNamespaceLister
	SystemTopicEventSubscriptionListerExpansion
}

// systemTopicEventSubscriptionLister implements the SystemTopicEventSubscriptionLister interface.
type systemTopicEventSubscriptionLister struct {
	indexer cache.Indexer
}

// NewSystemTopicEventSubscriptionLister returns a new SystemTopicEventSubscriptionLister.
func NewSystemTopicEventSubscriptionLister(indexer cache.Indexer) SystemTopicEventSubscriptionLister {
	return &systemTopicEventSubscriptionLister{indexer: indexer}
}

// List lists all SystemTopicEventSubscriptions in the indexer.
func (s *systemTopicEventSubscriptionLister) List(selector labels.Selector) (ret []*v1alpha1.SystemTopicEventSubscription, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SystemTopicEventSubscription))
	})
	return ret, err
}

// SystemTopicEventSubscriptions returns an object that can list and get SystemTopicEventSubscriptions.
func (s *systemTopicEventSubscriptionLister) SystemTopicEventSubscriptions(namespace string) SystemTopicEventSubscriptionNamespaceLister {
	return systemTopicEventSubscriptionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SystemTopicEventSubscriptionNamespaceLister helps list and get SystemTopicEventSubscriptions.
// All objects returned here must be treated as read-only.
type SystemTopicEventSubscriptionNamespaceLister interface {
	// List lists all SystemTopicEventSubscriptions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SystemTopicEventSubscription, err error)
	// Get retrieves the SystemTopicEventSubscription from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SystemTopicEventSubscription, error)
	SystemTopicEventSubscriptionNamespaceListerExpansion
}

// systemTopicEventSubscriptionNamespaceLister implements the SystemTopicEventSubscriptionNamespaceLister
// interface.
type systemTopicEventSubscriptionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SystemTopicEventSubscriptions in the indexer for a given namespace.
func (s systemTopicEventSubscriptionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SystemTopicEventSubscription, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SystemTopicEventSubscription))
	})
	return ret, err
}

// Get retrieves the SystemTopicEventSubscription from the indexer for a given namespace and name.
func (s systemTopicEventSubscriptionNamespaceLister) Get(name string) (*v1alpha1.SystemTopicEventSubscription, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("systemtopiceventsubscription"), name)
	}
	return obj.(*v1alpha1.SystemTopicEventSubscription), nil
}
