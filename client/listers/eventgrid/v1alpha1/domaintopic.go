/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/eventgrid/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DomainTopicLister helps list DomainTopics.
// All objects returned here must be treated as read-only.
type DomainTopicLister interface {
	// List lists all DomainTopics in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DomainTopic, err error)
	// DomainTopics returns an object that can list and get DomainTopics.
	DomainTopics(namespace string) DomainTopicNamespaceLister
	DomainTopicListerExpansion
}

// domainTopicLister implements the DomainTopicLister interface.
type domainTopicLister struct {
	indexer cache.Indexer
}

// NewDomainTopicLister returns a new DomainTopicLister.
func NewDomainTopicLister(indexer cache.Indexer) DomainTopicLister {
	return &domainTopicLister{indexer: indexer}
}

// List lists all DomainTopics in the indexer.
func (s *domainTopicLister) List(selector labels.Selector) (ret []*v1alpha1.DomainTopic, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DomainTopic))
	})
	return ret, err
}

// DomainTopics returns an object that can list and get DomainTopics.
func (s *domainTopicLister) DomainTopics(namespace string) DomainTopicNamespaceLister {
	return domainTopicNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DomainTopicNamespaceLister helps list and get DomainTopics.
// All objects returned here must be treated as read-only.
type DomainTopicNamespaceLister interface {
	// List lists all DomainTopics in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DomainTopic, err error)
	// Get retrieves the DomainTopic from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DomainTopic, error)
	DomainTopicNamespaceListerExpansion
}

// domainTopicNamespaceLister implements the DomainTopicNamespaceLister
// interface.
type domainTopicNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DomainTopics in the indexer for a given namespace.
func (s domainTopicNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DomainTopic, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DomainTopic))
	})
	return ret, err
}

// Get retrieves the DomainTopic from the indexer for a given namespace and name.
func (s domainTopicNamespaceLister) Get(name string) (*v1alpha1.DomainTopic, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("domaintopic"), name)
	}
	return obj.(*v1alpha1.DomainTopic), nil
}
