/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/iothub/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DpsCertificateLister helps list DpsCertificates.
// All objects returned here must be treated as read-only.
type DpsCertificateLister interface {
	// List lists all DpsCertificates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DpsCertificate, err error)
	// DpsCertificates returns an object that can list and get DpsCertificates.
	DpsCertificates(namespace string) DpsCertificateNamespaceLister
	DpsCertificateListerExpansion
}

// dpsCertificateLister implements the DpsCertificateLister interface.
type dpsCertificateLister struct {
	indexer cache.Indexer
}

// NewDpsCertificateLister returns a new DpsCertificateLister.
func NewDpsCertificateLister(indexer cache.Indexer) DpsCertificateLister {
	return &dpsCertificateLister{indexer: indexer}
}

// List lists all DpsCertificates in the indexer.
func (s *dpsCertificateLister) List(selector labels.Selector) (ret []*v1alpha1.DpsCertificate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DpsCertificate))
	})
	return ret, err
}

// DpsCertificates returns an object that can list and get DpsCertificates.
func (s *dpsCertificateLister) DpsCertificates(namespace string) DpsCertificateNamespaceLister {
	return dpsCertificateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DpsCertificateNamespaceLister helps list and get DpsCertificates.
// All objects returned here must be treated as read-only.
type DpsCertificateNamespaceLister interface {
	// List lists all DpsCertificates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DpsCertificate, err error)
	// Get retrieves the DpsCertificate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DpsCertificate, error)
	DpsCertificateNamespaceListerExpansion
}

// dpsCertificateNamespaceLister implements the DpsCertificateNamespaceLister
// interface.
type dpsCertificateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DpsCertificates in the indexer for a given namespace.
func (s dpsCertificateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DpsCertificate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DpsCertificate))
	})
	return ret, err
}

// Get retrieves the DpsCertificate from the indexer for a given namespace and name.
func (s dpsCertificateNamespaceLister) Get(name string) (*v1alpha1.DpsCertificate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dpscertificate"), name)
	}
	return obj.(*v1alpha1.DpsCertificate), nil
}
