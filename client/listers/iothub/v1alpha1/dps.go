/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/iothub/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DpsLister helps list Dpses.
// All objects returned here must be treated as read-only.
type DpsLister interface {
	// List lists all Dpses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Dps, err error)
	// Dpses returns an object that can list and get Dpses.
	Dpses(namespace string) DpsNamespaceLister
	DpsListerExpansion
}

// dpsLister implements the DpsLister interface.
type dpsLister struct {
	indexer cache.Indexer
}

// NewDpsLister returns a new DpsLister.
func NewDpsLister(indexer cache.Indexer) DpsLister {
	return &dpsLister{indexer: indexer}
}

// List lists all Dpses in the indexer.
func (s *dpsLister) List(selector labels.Selector) (ret []*v1alpha1.Dps, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Dps))
	})
	return ret, err
}

// Dpses returns an object that can list and get Dpses.
func (s *dpsLister) Dpses(namespace string) DpsNamespaceLister {
	return dpsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DpsNamespaceLister helps list and get Dpses.
// All objects returned here must be treated as read-only.
type DpsNamespaceLister interface {
	// List lists all Dpses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Dps, err error)
	// Get retrieves the Dps from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Dps, error)
	DpsNamespaceListerExpansion
}

// dpsNamespaceLister implements the DpsNamespaceLister
// interface.
type dpsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Dpses in the indexer for a given namespace.
func (s dpsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Dps, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Dps))
	})
	return ret, err
}

// Get retrieves the Dps from the indexer for a given namespace and name.
func (s dpsNamespaceLister) Get(name string) (*v1alpha1.Dps, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dps"), name)
	}
	return obj.(*v1alpha1.Dps), nil
}
