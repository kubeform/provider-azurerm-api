/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/iothub/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EndpointEventhubLister helps list EndpointEventhubs.
// All objects returned here must be treated as read-only.
type EndpointEventhubLister interface {
	// List lists all EndpointEventhubs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EndpointEventhub, err error)
	// EndpointEventhubs returns an object that can list and get EndpointEventhubs.
	EndpointEventhubs(namespace string) EndpointEventhubNamespaceLister
	EndpointEventhubListerExpansion
}

// endpointEventhubLister implements the EndpointEventhubLister interface.
type endpointEventhubLister struct {
	indexer cache.Indexer
}

// NewEndpointEventhubLister returns a new EndpointEventhubLister.
func NewEndpointEventhubLister(indexer cache.Indexer) EndpointEventhubLister {
	return &endpointEventhubLister{indexer: indexer}
}

// List lists all EndpointEventhubs in the indexer.
func (s *endpointEventhubLister) List(selector labels.Selector) (ret []*v1alpha1.EndpointEventhub, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EndpointEventhub))
	})
	return ret, err
}

// EndpointEventhubs returns an object that can list and get EndpointEventhubs.
func (s *endpointEventhubLister) EndpointEventhubs(namespace string) EndpointEventhubNamespaceLister {
	return endpointEventhubNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EndpointEventhubNamespaceLister helps list and get EndpointEventhubs.
// All objects returned here must be treated as read-only.
type EndpointEventhubNamespaceLister interface {
	// List lists all EndpointEventhubs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EndpointEventhub, err error)
	// Get retrieves the EndpointEventhub from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EndpointEventhub, error)
	EndpointEventhubNamespaceListerExpansion
}

// endpointEventhubNamespaceLister implements the EndpointEventhubNamespaceLister
// interface.
type endpointEventhubNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EndpointEventhubs in the indexer for a given namespace.
func (s endpointEventhubNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EndpointEventhub, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EndpointEventhub))
	})
	return ret, err
}

// Get retrieves the EndpointEventhub from the indexer for a given namespace and name.
func (s endpointEventhubNamespaceLister) Get(name string) (*v1alpha1.EndpointEventhub, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("endpointeventhub"), name)
	}
	return obj.(*v1alpha1.EndpointEventhub), nil
}
