/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/iothub/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SharedAccessPolicyLister helps list SharedAccessPolicies.
// All objects returned here must be treated as read-only.
type SharedAccessPolicyLister interface {
	// List lists all SharedAccessPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SharedAccessPolicy, err error)
	// SharedAccessPolicies returns an object that can list and get SharedAccessPolicies.
	SharedAccessPolicies(namespace string) SharedAccessPolicyNamespaceLister
	SharedAccessPolicyListerExpansion
}

// sharedAccessPolicyLister implements the SharedAccessPolicyLister interface.
type sharedAccessPolicyLister struct {
	indexer cache.Indexer
}

// NewSharedAccessPolicyLister returns a new SharedAccessPolicyLister.
func NewSharedAccessPolicyLister(indexer cache.Indexer) SharedAccessPolicyLister {
	return &sharedAccessPolicyLister{indexer: indexer}
}

// List lists all SharedAccessPolicies in the indexer.
func (s *sharedAccessPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.SharedAccessPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SharedAccessPolicy))
	})
	return ret, err
}

// SharedAccessPolicies returns an object that can list and get SharedAccessPolicies.
func (s *sharedAccessPolicyLister) SharedAccessPolicies(namespace string) SharedAccessPolicyNamespaceLister {
	return sharedAccessPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SharedAccessPolicyNamespaceLister helps list and get SharedAccessPolicies.
// All objects returned here must be treated as read-only.
type SharedAccessPolicyNamespaceLister interface {
	// List lists all SharedAccessPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SharedAccessPolicy, err error)
	// Get retrieves the SharedAccessPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SharedAccessPolicy, error)
	SharedAccessPolicyNamespaceListerExpansion
}

// sharedAccessPolicyNamespaceLister implements the SharedAccessPolicyNamespaceLister
// interface.
type sharedAccessPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SharedAccessPolicies in the indexer for a given namespace.
func (s sharedAccessPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SharedAccessPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SharedAccessPolicy))
	})
	return ret, err
}

// Get retrieves the SharedAccessPolicy from the indexer for a given namespace and name.
func (s sharedAccessPolicyNamespaceLister) Get(name string) (*v1alpha1.SharedAccessPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sharedaccesspolicy"), name)
	}
	return obj.(*v1alpha1.SharedAccessPolicy), nil
}
