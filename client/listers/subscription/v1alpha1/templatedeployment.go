/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/subscription/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TemplateDeploymentLister helps list TemplateDeployments.
// All objects returned here must be treated as read-only.
type TemplateDeploymentLister interface {
	// List lists all TemplateDeployments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TemplateDeployment, err error)
	// TemplateDeployments returns an object that can list and get TemplateDeployments.
	TemplateDeployments(namespace string) TemplateDeploymentNamespaceLister
	TemplateDeploymentListerExpansion
}

// templateDeploymentLister implements the TemplateDeploymentLister interface.
type templateDeploymentLister struct {
	indexer cache.Indexer
}

// NewTemplateDeploymentLister returns a new TemplateDeploymentLister.
func NewTemplateDeploymentLister(indexer cache.Indexer) TemplateDeploymentLister {
	return &templateDeploymentLister{indexer: indexer}
}

// List lists all TemplateDeployments in the indexer.
func (s *templateDeploymentLister) List(selector labels.Selector) (ret []*v1alpha1.TemplateDeployment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TemplateDeployment))
	})
	return ret, err
}

// TemplateDeployments returns an object that can list and get TemplateDeployments.
func (s *templateDeploymentLister) TemplateDeployments(namespace string) TemplateDeploymentNamespaceLister {
	return templateDeploymentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TemplateDeploymentNamespaceLister helps list and get TemplateDeployments.
// All objects returned here must be treated as read-only.
type TemplateDeploymentNamespaceLister interface {
	// List lists all TemplateDeployments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TemplateDeployment, err error)
	// Get retrieves the TemplateDeployment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TemplateDeployment, error)
	TemplateDeploymentNamespaceListerExpansion
}

// templateDeploymentNamespaceLister implements the TemplateDeploymentNamespaceLister
// interface.
type templateDeploymentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TemplateDeployments in the indexer for a given namespace.
func (s templateDeploymentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TemplateDeployment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TemplateDeployment))
	})
	return ret, err
}

// Get retrieves the TemplateDeployment from the indexer for a given namespace and name.
func (s templateDeploymentNamespaceLister) Get(name string) (*v1alpha1.TemplateDeployment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("templatedeployment"), name)
	}
	return obj.(*v1alpha1.TemplateDeployment), nil
}
