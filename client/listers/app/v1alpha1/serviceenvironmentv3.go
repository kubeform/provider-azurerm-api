/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/app/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceEnvironmentV3Lister helps list ServiceEnvironmentV3s.
// All objects returned here must be treated as read-only.
type ServiceEnvironmentV3Lister interface {
	// List lists all ServiceEnvironmentV3s in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceEnvironmentV3, err error)
	// ServiceEnvironmentV3s returns an object that can list and get ServiceEnvironmentV3s.
	ServiceEnvironmentV3s(namespace string) ServiceEnvironmentV3NamespaceLister
	ServiceEnvironmentV3ListerExpansion
}

// serviceEnvironmentV3Lister implements the ServiceEnvironmentV3Lister interface.
type serviceEnvironmentV3Lister struct {
	indexer cache.Indexer
}

// NewServiceEnvironmentV3Lister returns a new ServiceEnvironmentV3Lister.
func NewServiceEnvironmentV3Lister(indexer cache.Indexer) ServiceEnvironmentV3Lister {
	return &serviceEnvironmentV3Lister{indexer: indexer}
}

// List lists all ServiceEnvironmentV3s in the indexer.
func (s *serviceEnvironmentV3Lister) List(selector labels.Selector) (ret []*v1alpha1.ServiceEnvironmentV3, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceEnvironmentV3))
	})
	return ret, err
}

// ServiceEnvironmentV3s returns an object that can list and get ServiceEnvironmentV3s.
func (s *serviceEnvironmentV3Lister) ServiceEnvironmentV3s(namespace string) ServiceEnvironmentV3NamespaceLister {
	return serviceEnvironmentV3NamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceEnvironmentV3NamespaceLister helps list and get ServiceEnvironmentV3s.
// All objects returned here must be treated as read-only.
type ServiceEnvironmentV3NamespaceLister interface {
	// List lists all ServiceEnvironmentV3s in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceEnvironmentV3, err error)
	// Get retrieves the ServiceEnvironmentV3 from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServiceEnvironmentV3, error)
	ServiceEnvironmentV3NamespaceListerExpansion
}

// serviceEnvironmentV3NamespaceLister implements the ServiceEnvironmentV3NamespaceLister
// interface.
type serviceEnvironmentV3NamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceEnvironmentV3s in the indexer for a given namespace.
func (s serviceEnvironmentV3NamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceEnvironmentV3, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceEnvironmentV3))
	})
	return ret, err
}

// Get retrieves the ServiceEnvironmentV3 from the indexer for a given namespace and name.
func (s serviceEnvironmentV3NamespaceLister) Get(name string) (*v1alpha1.ServiceEnvironmentV3, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("serviceenvironmentv3"), name)
	}
	return obj.(*v1alpha1.ServiceEnvironmentV3), nil
}
