/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/app/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceHybridConnectionLister helps list ServiceHybridConnections.
// All objects returned here must be treated as read-only.
type ServiceHybridConnectionLister interface {
	// List lists all ServiceHybridConnections in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceHybridConnection, err error)
	// ServiceHybridConnections returns an object that can list and get ServiceHybridConnections.
	ServiceHybridConnections(namespace string) ServiceHybridConnectionNamespaceLister
	ServiceHybridConnectionListerExpansion
}

// serviceHybridConnectionLister implements the ServiceHybridConnectionLister interface.
type serviceHybridConnectionLister struct {
	indexer cache.Indexer
}

// NewServiceHybridConnectionLister returns a new ServiceHybridConnectionLister.
func NewServiceHybridConnectionLister(indexer cache.Indexer) ServiceHybridConnectionLister {
	return &serviceHybridConnectionLister{indexer: indexer}
}

// List lists all ServiceHybridConnections in the indexer.
func (s *serviceHybridConnectionLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceHybridConnection, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceHybridConnection))
	})
	return ret, err
}

// ServiceHybridConnections returns an object that can list and get ServiceHybridConnections.
func (s *serviceHybridConnectionLister) ServiceHybridConnections(namespace string) ServiceHybridConnectionNamespaceLister {
	return serviceHybridConnectionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceHybridConnectionNamespaceLister helps list and get ServiceHybridConnections.
// All objects returned here must be treated as read-only.
type ServiceHybridConnectionNamespaceLister interface {
	// List lists all ServiceHybridConnections in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceHybridConnection, err error)
	// Get retrieves the ServiceHybridConnection from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServiceHybridConnection, error)
	ServiceHybridConnectionNamespaceListerExpansion
}

// serviceHybridConnectionNamespaceLister implements the ServiceHybridConnectionNamespaceLister
// interface.
type serviceHybridConnectionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceHybridConnections in the indexer for a given namespace.
func (s serviceHybridConnectionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceHybridConnection, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceHybridConnection))
	})
	return ret, err
}

// Get retrieves the ServiceHybridConnection from the indexer for a given namespace and name.
func (s serviceHybridConnectionNamespaceLister) Get(name string) (*v1alpha1.ServiceHybridConnection, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servicehybridconnection"), name)
	}
	return obj.(*v1alpha1.ServiceHybridConnection), nil
}
