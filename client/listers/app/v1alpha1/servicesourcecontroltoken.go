/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/app/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceSourceControlTokenLister helps list ServiceSourceControlTokens.
// All objects returned here must be treated as read-only.
type ServiceSourceControlTokenLister interface {
	// List lists all ServiceSourceControlTokens in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceSourceControlToken, err error)
	// ServiceSourceControlTokens returns an object that can list and get ServiceSourceControlTokens.
	ServiceSourceControlTokens(namespace string) ServiceSourceControlTokenNamespaceLister
	ServiceSourceControlTokenListerExpansion
}

// serviceSourceControlTokenLister implements the ServiceSourceControlTokenLister interface.
type serviceSourceControlTokenLister struct {
	indexer cache.Indexer
}

// NewServiceSourceControlTokenLister returns a new ServiceSourceControlTokenLister.
func NewServiceSourceControlTokenLister(indexer cache.Indexer) ServiceSourceControlTokenLister {
	return &serviceSourceControlTokenLister{indexer: indexer}
}

// List lists all ServiceSourceControlTokens in the indexer.
func (s *serviceSourceControlTokenLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceSourceControlToken, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceSourceControlToken))
	})
	return ret, err
}

// ServiceSourceControlTokens returns an object that can list and get ServiceSourceControlTokens.
func (s *serviceSourceControlTokenLister) ServiceSourceControlTokens(namespace string) ServiceSourceControlTokenNamespaceLister {
	return serviceSourceControlTokenNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceSourceControlTokenNamespaceLister helps list and get ServiceSourceControlTokens.
// All objects returned here must be treated as read-only.
type ServiceSourceControlTokenNamespaceLister interface {
	// List lists all ServiceSourceControlTokens in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceSourceControlToken, err error)
	// Get retrieves the ServiceSourceControlToken from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServiceSourceControlToken, error)
	ServiceSourceControlTokenNamespaceListerExpansion
}

// serviceSourceControlTokenNamespaceLister implements the ServiceSourceControlTokenNamespaceLister
// interface.
type serviceSourceControlTokenNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceSourceControlTokens in the indexer for a given namespace.
func (s serviceSourceControlTokenNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceSourceControlToken, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceSourceControlToken))
	})
	return ret, err
}

// Get retrieves the ServiceSourceControlToken from the indexer for a given namespace and name.
func (s serviceSourceControlTokenNamespaceLister) Get(name string) (*v1alpha1.ServiceSourceControlToken, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servicesourcecontroltoken"), name)
	}
	return obj.(*v1alpha1.ServiceSourceControlToken), nil
}
