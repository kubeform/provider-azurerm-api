/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/app/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConfigurationFeatureLister helps list ConfigurationFeatures.
// All objects returned here must be treated as read-only.
type ConfigurationFeatureLister interface {
	// List lists all ConfigurationFeatures in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigurationFeature, err error)
	// ConfigurationFeatures returns an object that can list and get ConfigurationFeatures.
	ConfigurationFeatures(namespace string) ConfigurationFeatureNamespaceLister
	ConfigurationFeatureListerExpansion
}

// configurationFeatureLister implements the ConfigurationFeatureLister interface.
type configurationFeatureLister struct {
	indexer cache.Indexer
}

// NewConfigurationFeatureLister returns a new ConfigurationFeatureLister.
func NewConfigurationFeatureLister(indexer cache.Indexer) ConfigurationFeatureLister {
	return &configurationFeatureLister{indexer: indexer}
}

// List lists all ConfigurationFeatures in the indexer.
func (s *configurationFeatureLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigurationFeature, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigurationFeature))
	})
	return ret, err
}

// ConfigurationFeatures returns an object that can list and get ConfigurationFeatures.
func (s *configurationFeatureLister) ConfigurationFeatures(namespace string) ConfigurationFeatureNamespaceLister {
	return configurationFeatureNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConfigurationFeatureNamespaceLister helps list and get ConfigurationFeatures.
// All objects returned here must be treated as read-only.
type ConfigurationFeatureNamespaceLister interface {
	// List lists all ConfigurationFeatures in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigurationFeature, err error)
	// Get retrieves the ConfigurationFeature from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ConfigurationFeature, error)
	ConfigurationFeatureNamespaceListerExpansion
}

// configurationFeatureNamespaceLister implements the ConfigurationFeatureNamespaceLister
// interface.
type configurationFeatureNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConfigurationFeatures in the indexer for a given namespace.
func (s configurationFeatureNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigurationFeature, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigurationFeature))
	})
	return ret, err
}

// Get retrieves the ConfigurationFeature from the indexer for a given namespace and name.
func (s configurationFeatureNamespaceLister) Get(name string) (*v1alpha1.ConfigurationFeature, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("configurationfeature"), name)
	}
	return obj.(*v1alpha1.ConfigurationFeature), nil
}
