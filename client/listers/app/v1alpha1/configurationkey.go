/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/app/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConfigurationKeyLister helps list ConfigurationKeys.
// All objects returned here must be treated as read-only.
type ConfigurationKeyLister interface {
	// List lists all ConfigurationKeys in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigurationKey, err error)
	// ConfigurationKeys returns an object that can list and get ConfigurationKeys.
	ConfigurationKeys(namespace string) ConfigurationKeyNamespaceLister
	ConfigurationKeyListerExpansion
}

// configurationKeyLister implements the ConfigurationKeyLister interface.
type configurationKeyLister struct {
	indexer cache.Indexer
}

// NewConfigurationKeyLister returns a new ConfigurationKeyLister.
func NewConfigurationKeyLister(indexer cache.Indexer) ConfigurationKeyLister {
	return &configurationKeyLister{indexer: indexer}
}

// List lists all ConfigurationKeys in the indexer.
func (s *configurationKeyLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigurationKey, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigurationKey))
	})
	return ret, err
}

// ConfigurationKeys returns an object that can list and get ConfigurationKeys.
func (s *configurationKeyLister) ConfigurationKeys(namespace string) ConfigurationKeyNamespaceLister {
	return configurationKeyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConfigurationKeyNamespaceLister helps list and get ConfigurationKeys.
// All objects returned here must be treated as read-only.
type ConfigurationKeyNamespaceLister interface {
	// List lists all ConfigurationKeys in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigurationKey, err error)
	// Get retrieves the ConfigurationKey from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ConfigurationKey, error)
	ConfigurationKeyNamespaceListerExpansion
}

// configurationKeyNamespaceLister implements the ConfigurationKeyNamespaceLister
// interface.
type configurationKeyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConfigurationKeys in the indexer for a given namespace.
func (s configurationKeyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigurationKey, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigurationKey))
	})
	return ret, err
}

// Get retrieves the ConfigurationKey from the indexer for a given namespace and name.
func (s configurationKeyNamespaceLister) Get(name string) (*v1alpha1.ConfigurationKey, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("configurationkey"), name)
	}
	return obj.(*v1alpha1.ConfigurationKey), nil
}
