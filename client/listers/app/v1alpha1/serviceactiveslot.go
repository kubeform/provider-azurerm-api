/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/app/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceActiveSlotLister helps list ServiceActiveSlots.
// All objects returned here must be treated as read-only.
type ServiceActiveSlotLister interface {
	// List lists all ServiceActiveSlots in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceActiveSlot, err error)
	// ServiceActiveSlots returns an object that can list and get ServiceActiveSlots.
	ServiceActiveSlots(namespace string) ServiceActiveSlotNamespaceLister
	ServiceActiveSlotListerExpansion
}

// serviceActiveSlotLister implements the ServiceActiveSlotLister interface.
type serviceActiveSlotLister struct {
	indexer cache.Indexer
}

// NewServiceActiveSlotLister returns a new ServiceActiveSlotLister.
func NewServiceActiveSlotLister(indexer cache.Indexer) ServiceActiveSlotLister {
	return &serviceActiveSlotLister{indexer: indexer}
}

// List lists all ServiceActiveSlots in the indexer.
func (s *serviceActiveSlotLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceActiveSlot, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceActiveSlot))
	})
	return ret, err
}

// ServiceActiveSlots returns an object that can list and get ServiceActiveSlots.
func (s *serviceActiveSlotLister) ServiceActiveSlots(namespace string) ServiceActiveSlotNamespaceLister {
	return serviceActiveSlotNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceActiveSlotNamespaceLister helps list and get ServiceActiveSlots.
// All objects returned here must be treated as read-only.
type ServiceActiveSlotNamespaceLister interface {
	// List lists all ServiceActiveSlots in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceActiveSlot, err error)
	// Get retrieves the ServiceActiveSlot from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServiceActiveSlot, error)
	ServiceActiveSlotNamespaceListerExpansion
}

// serviceActiveSlotNamespaceLister implements the ServiceActiveSlotNamespaceLister
// interface.
type serviceActiveSlotNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceActiveSlots in the indexer for a given namespace.
func (s serviceActiveSlotNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceActiveSlot, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceActiveSlot))
	})
	return ret, err
}

// Get retrieves the ServiceActiveSlot from the indexer for a given namespace and name.
func (s serviceActiveSlotNamespaceLister) Get(name string) (*v1alpha1.ServiceActiveSlot, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("serviceactiveslot"), name)
	}
	return obj.(*v1alpha1.ServiceActiveSlot), nil
}
