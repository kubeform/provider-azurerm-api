/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/app/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServicePublicCertificateLister helps list ServicePublicCertificates.
// All objects returned here must be treated as read-only.
type ServicePublicCertificateLister interface {
	// List lists all ServicePublicCertificates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServicePublicCertificate, err error)
	// ServicePublicCertificates returns an object that can list and get ServicePublicCertificates.
	ServicePublicCertificates(namespace string) ServicePublicCertificateNamespaceLister
	ServicePublicCertificateListerExpansion
}

// servicePublicCertificateLister implements the ServicePublicCertificateLister interface.
type servicePublicCertificateLister struct {
	indexer cache.Indexer
}

// NewServicePublicCertificateLister returns a new ServicePublicCertificateLister.
func NewServicePublicCertificateLister(indexer cache.Indexer) ServicePublicCertificateLister {
	return &servicePublicCertificateLister{indexer: indexer}
}

// List lists all ServicePublicCertificates in the indexer.
func (s *servicePublicCertificateLister) List(selector labels.Selector) (ret []*v1alpha1.ServicePublicCertificate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServicePublicCertificate))
	})
	return ret, err
}

// ServicePublicCertificates returns an object that can list and get ServicePublicCertificates.
func (s *servicePublicCertificateLister) ServicePublicCertificates(namespace string) ServicePublicCertificateNamespaceLister {
	return servicePublicCertificateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServicePublicCertificateNamespaceLister helps list and get ServicePublicCertificates.
// All objects returned here must be treated as read-only.
type ServicePublicCertificateNamespaceLister interface {
	// List lists all ServicePublicCertificates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServicePublicCertificate, err error)
	// Get retrieves the ServicePublicCertificate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServicePublicCertificate, error)
	ServicePublicCertificateNamespaceListerExpansion
}

// servicePublicCertificateNamespaceLister implements the ServicePublicCertificateNamespaceLister
// interface.
type servicePublicCertificateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServicePublicCertificates in the indexer for a given namespace.
func (s servicePublicCertificateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServicePublicCertificate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServicePublicCertificate))
	})
	return ret, err
}

// Get retrieves the ServicePublicCertificate from the indexer for a given namespace and name.
func (s servicePublicCertificateNamespaceLister) Get(name string) (*v1alpha1.ServicePublicCertificate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servicepubliccertificate"), name)
	}
	return obj.(*v1alpha1.ServicePublicCertificate), nil
}
