/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/app/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceCustomHostnameBindingLister helps list ServiceCustomHostnameBindings.
// All objects returned here must be treated as read-only.
type ServiceCustomHostnameBindingLister interface {
	// List lists all ServiceCustomHostnameBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceCustomHostnameBinding, err error)
	// ServiceCustomHostnameBindings returns an object that can list and get ServiceCustomHostnameBindings.
	ServiceCustomHostnameBindings(namespace string) ServiceCustomHostnameBindingNamespaceLister
	ServiceCustomHostnameBindingListerExpansion
}

// serviceCustomHostnameBindingLister implements the ServiceCustomHostnameBindingLister interface.
type serviceCustomHostnameBindingLister struct {
	indexer cache.Indexer
}

// NewServiceCustomHostnameBindingLister returns a new ServiceCustomHostnameBindingLister.
func NewServiceCustomHostnameBindingLister(indexer cache.Indexer) ServiceCustomHostnameBindingLister {
	return &serviceCustomHostnameBindingLister{indexer: indexer}
}

// List lists all ServiceCustomHostnameBindings in the indexer.
func (s *serviceCustomHostnameBindingLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceCustomHostnameBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceCustomHostnameBinding))
	})
	return ret, err
}

// ServiceCustomHostnameBindings returns an object that can list and get ServiceCustomHostnameBindings.
func (s *serviceCustomHostnameBindingLister) ServiceCustomHostnameBindings(namespace string) ServiceCustomHostnameBindingNamespaceLister {
	return serviceCustomHostnameBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceCustomHostnameBindingNamespaceLister helps list and get ServiceCustomHostnameBindings.
// All objects returned here must be treated as read-only.
type ServiceCustomHostnameBindingNamespaceLister interface {
	// List lists all ServiceCustomHostnameBindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceCustomHostnameBinding, err error)
	// Get retrieves the ServiceCustomHostnameBinding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServiceCustomHostnameBinding, error)
	ServiceCustomHostnameBindingNamespaceListerExpansion
}

// serviceCustomHostnameBindingNamespaceLister implements the ServiceCustomHostnameBindingNamespaceLister
// interface.
type serviceCustomHostnameBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceCustomHostnameBindings in the indexer for a given namespace.
func (s serviceCustomHostnameBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceCustomHostnameBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceCustomHostnameBinding))
	})
	return ret, err
}

// Get retrieves the ServiceCustomHostnameBinding from the indexer for a given namespace and name.
func (s serviceCustomHostnameBindingNamespaceLister) Get(name string) (*v1alpha1.ServiceCustomHostnameBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servicecustomhostnamebinding"), name)
	}
	return obj.(*v1alpha1.ServiceCustomHostnameBinding), nil
}
