/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/app/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceManagedCertificateLister helps list ServiceManagedCertificates.
// All objects returned here must be treated as read-only.
type ServiceManagedCertificateLister interface {
	// List lists all ServiceManagedCertificates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceManagedCertificate, err error)
	// ServiceManagedCertificates returns an object that can list and get ServiceManagedCertificates.
	ServiceManagedCertificates(namespace string) ServiceManagedCertificateNamespaceLister
	ServiceManagedCertificateListerExpansion
}

// serviceManagedCertificateLister implements the ServiceManagedCertificateLister interface.
type serviceManagedCertificateLister struct {
	indexer cache.Indexer
}

// NewServiceManagedCertificateLister returns a new ServiceManagedCertificateLister.
func NewServiceManagedCertificateLister(indexer cache.Indexer) ServiceManagedCertificateLister {
	return &serviceManagedCertificateLister{indexer: indexer}
}

// List lists all ServiceManagedCertificates in the indexer.
func (s *serviceManagedCertificateLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceManagedCertificate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceManagedCertificate))
	})
	return ret, err
}

// ServiceManagedCertificates returns an object that can list and get ServiceManagedCertificates.
func (s *serviceManagedCertificateLister) ServiceManagedCertificates(namespace string) ServiceManagedCertificateNamespaceLister {
	return serviceManagedCertificateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceManagedCertificateNamespaceLister helps list and get ServiceManagedCertificates.
// All objects returned here must be treated as read-only.
type ServiceManagedCertificateNamespaceLister interface {
	// List lists all ServiceManagedCertificates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceManagedCertificate, err error)
	// Get retrieves the ServiceManagedCertificate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServiceManagedCertificate, error)
	ServiceManagedCertificateNamespaceListerExpansion
}

// serviceManagedCertificateNamespaceLister implements the ServiceManagedCertificateNamespaceLister
// interface.
type serviceManagedCertificateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceManagedCertificates in the indexer for a given namespace.
func (s serviceManagedCertificateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceManagedCertificate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceManagedCertificate))
	})
	return ret, err
}

// Get retrieves the ServiceManagedCertificate from the indexer for a given namespace and name.
func (s serviceManagedCertificateNamespaceLister) Get(name string) (*v1alpha1.ServiceManagedCertificate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servicemanagedcertificate"), name)
	}
	return obj.(*v1alpha1.ServiceManagedCertificate), nil
}
