/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/app/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceCertificateOrderLister helps list ServiceCertificateOrders.
// All objects returned here must be treated as read-only.
type ServiceCertificateOrderLister interface {
	// List lists all ServiceCertificateOrders in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceCertificateOrder, err error)
	// ServiceCertificateOrders returns an object that can list and get ServiceCertificateOrders.
	ServiceCertificateOrders(namespace string) ServiceCertificateOrderNamespaceLister
	ServiceCertificateOrderListerExpansion
}

// serviceCertificateOrderLister implements the ServiceCertificateOrderLister interface.
type serviceCertificateOrderLister struct {
	indexer cache.Indexer
}

// NewServiceCertificateOrderLister returns a new ServiceCertificateOrderLister.
func NewServiceCertificateOrderLister(indexer cache.Indexer) ServiceCertificateOrderLister {
	return &serviceCertificateOrderLister{indexer: indexer}
}

// List lists all ServiceCertificateOrders in the indexer.
func (s *serviceCertificateOrderLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceCertificateOrder, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceCertificateOrder))
	})
	return ret, err
}

// ServiceCertificateOrders returns an object that can list and get ServiceCertificateOrders.
func (s *serviceCertificateOrderLister) ServiceCertificateOrders(namespace string) ServiceCertificateOrderNamespaceLister {
	return serviceCertificateOrderNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceCertificateOrderNamespaceLister helps list and get ServiceCertificateOrders.
// All objects returned here must be treated as read-only.
type ServiceCertificateOrderNamespaceLister interface {
	// List lists all ServiceCertificateOrders in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceCertificateOrder, err error)
	// Get retrieves the ServiceCertificateOrder from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServiceCertificateOrder, error)
	ServiceCertificateOrderNamespaceListerExpansion
}

// serviceCertificateOrderNamespaceLister implements the ServiceCertificateOrderNamespaceLister
// interface.
type serviceCertificateOrderNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceCertificateOrders in the indexer for a given namespace.
func (s serviceCertificateOrderNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceCertificateOrder, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceCertificateOrder))
	})
	return ret, err
}

// Get retrieves the ServiceCertificateOrder from the indexer for a given namespace and name.
func (s serviceCertificateOrderNamespaceLister) Get(name string) (*v1alpha1.ServiceCertificateOrder, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servicecertificateorder"), name)
	}
	return obj.(*v1alpha1.ServiceCertificateOrder), nil
}
