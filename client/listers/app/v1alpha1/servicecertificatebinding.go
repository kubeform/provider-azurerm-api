/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/app/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceCertificateBindingLister helps list ServiceCertificateBindings.
// All objects returned here must be treated as read-only.
type ServiceCertificateBindingLister interface {
	// List lists all ServiceCertificateBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceCertificateBinding, err error)
	// ServiceCertificateBindings returns an object that can list and get ServiceCertificateBindings.
	ServiceCertificateBindings(namespace string) ServiceCertificateBindingNamespaceLister
	ServiceCertificateBindingListerExpansion
}

// serviceCertificateBindingLister implements the ServiceCertificateBindingLister interface.
type serviceCertificateBindingLister struct {
	indexer cache.Indexer
}

// NewServiceCertificateBindingLister returns a new ServiceCertificateBindingLister.
func NewServiceCertificateBindingLister(indexer cache.Indexer) ServiceCertificateBindingLister {
	return &serviceCertificateBindingLister{indexer: indexer}
}

// List lists all ServiceCertificateBindings in the indexer.
func (s *serviceCertificateBindingLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceCertificateBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceCertificateBinding))
	})
	return ret, err
}

// ServiceCertificateBindings returns an object that can list and get ServiceCertificateBindings.
func (s *serviceCertificateBindingLister) ServiceCertificateBindings(namespace string) ServiceCertificateBindingNamespaceLister {
	return serviceCertificateBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceCertificateBindingNamespaceLister helps list and get ServiceCertificateBindings.
// All objects returned here must be treated as read-only.
type ServiceCertificateBindingNamespaceLister interface {
	// List lists all ServiceCertificateBindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceCertificateBinding, err error)
	// Get retrieves the ServiceCertificateBinding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServiceCertificateBinding, error)
	ServiceCertificateBindingNamespaceListerExpansion
}

// serviceCertificateBindingNamespaceLister implements the ServiceCertificateBindingNamespaceLister
// interface.
type serviceCertificateBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceCertificateBindings in the indexer for a given namespace.
func (s serviceCertificateBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceCertificateBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceCertificateBinding))
	})
	return ret, err
}

// Get retrieves the ServiceCertificateBinding from the indexer for a given namespace and name.
func (s serviceCertificateBindingNamespaceLister) Get(name string) (*v1alpha1.ServiceCertificateBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servicecertificatebinding"), name)
	}
	return obj.(*v1alpha1.ServiceCertificateBinding), nil
}
