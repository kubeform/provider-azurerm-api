/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/sentinel/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WatchlistLister helps list Watchlists.
// All objects returned here must be treated as read-only.
type WatchlistLister interface {
	// List lists all Watchlists in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Watchlist, err error)
	// Watchlists returns an object that can list and get Watchlists.
	Watchlists(namespace string) WatchlistNamespaceLister
	WatchlistListerExpansion
}

// watchlistLister implements the WatchlistLister interface.
type watchlistLister struct {
	indexer cache.Indexer
}

// NewWatchlistLister returns a new WatchlistLister.
func NewWatchlistLister(indexer cache.Indexer) WatchlistLister {
	return &watchlistLister{indexer: indexer}
}

// List lists all Watchlists in the indexer.
func (s *watchlistLister) List(selector labels.Selector) (ret []*v1alpha1.Watchlist, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Watchlist))
	})
	return ret, err
}

// Watchlists returns an object that can list and get Watchlists.
func (s *watchlistLister) Watchlists(namespace string) WatchlistNamespaceLister {
	return watchlistNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WatchlistNamespaceLister helps list and get Watchlists.
// All objects returned here must be treated as read-only.
type WatchlistNamespaceLister interface {
	// List lists all Watchlists in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Watchlist, err error)
	// Get retrieves the Watchlist from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Watchlist, error)
	WatchlistNamespaceListerExpansion
}

// watchlistNamespaceLister implements the WatchlistNamespaceLister
// interface.
type watchlistNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Watchlists in the indexer for a given namespace.
func (s watchlistNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Watchlist, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Watchlist))
	})
	return ret, err
}

// Get retrieves the Watchlist from the indexer for a given namespace and name.
func (s watchlistNamespaceLister) Get(name string) (*v1alpha1.Watchlist, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("watchlist"), name)
	}
	return obj.(*v1alpha1.Watchlist), nil
}
