/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/sentinel/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AlertRuleMsSecurityIncidentLister helps list AlertRuleMsSecurityIncidents.
// All objects returned here must be treated as read-only.
type AlertRuleMsSecurityIncidentLister interface {
	// List lists all AlertRuleMsSecurityIncidents in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AlertRuleMsSecurityIncident, err error)
	// AlertRuleMsSecurityIncidents returns an object that can list and get AlertRuleMsSecurityIncidents.
	AlertRuleMsSecurityIncidents(namespace string) AlertRuleMsSecurityIncidentNamespaceLister
	AlertRuleMsSecurityIncidentListerExpansion
}

// alertRuleMsSecurityIncidentLister implements the AlertRuleMsSecurityIncidentLister interface.
type alertRuleMsSecurityIncidentLister struct {
	indexer cache.Indexer
}

// NewAlertRuleMsSecurityIncidentLister returns a new AlertRuleMsSecurityIncidentLister.
func NewAlertRuleMsSecurityIncidentLister(indexer cache.Indexer) AlertRuleMsSecurityIncidentLister {
	return &alertRuleMsSecurityIncidentLister{indexer: indexer}
}

// List lists all AlertRuleMsSecurityIncidents in the indexer.
func (s *alertRuleMsSecurityIncidentLister) List(selector labels.Selector) (ret []*v1alpha1.AlertRuleMsSecurityIncident, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AlertRuleMsSecurityIncident))
	})
	return ret, err
}

// AlertRuleMsSecurityIncidents returns an object that can list and get AlertRuleMsSecurityIncidents.
func (s *alertRuleMsSecurityIncidentLister) AlertRuleMsSecurityIncidents(namespace string) AlertRuleMsSecurityIncidentNamespaceLister {
	return alertRuleMsSecurityIncidentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AlertRuleMsSecurityIncidentNamespaceLister helps list and get AlertRuleMsSecurityIncidents.
// All objects returned here must be treated as read-only.
type AlertRuleMsSecurityIncidentNamespaceLister interface {
	// List lists all AlertRuleMsSecurityIncidents in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AlertRuleMsSecurityIncident, err error)
	// Get retrieves the AlertRuleMsSecurityIncident from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AlertRuleMsSecurityIncident, error)
	AlertRuleMsSecurityIncidentNamespaceListerExpansion
}

// alertRuleMsSecurityIncidentNamespaceLister implements the AlertRuleMsSecurityIncidentNamespaceLister
// interface.
type alertRuleMsSecurityIncidentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AlertRuleMsSecurityIncidents in the indexer for a given namespace.
func (s alertRuleMsSecurityIncidentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AlertRuleMsSecurityIncident, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AlertRuleMsSecurityIncident))
	})
	return ret, err
}

// Get retrieves the AlertRuleMsSecurityIncident from the indexer for a given namespace and name.
func (s alertRuleMsSecurityIncidentNamespaceLister) Get(name string) (*v1alpha1.AlertRuleMsSecurityIncident, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("alertrulemssecurityincident"), name)
	}
	return obj.(*v1alpha1.AlertRuleMsSecurityIncident), nil
}
