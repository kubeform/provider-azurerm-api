/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/sentinel/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DataConnectorOffice365Lister helps list DataConnectorOffice365s.
// All objects returned here must be treated as read-only.
type DataConnectorOffice365Lister interface {
	// List lists all DataConnectorOffice365s in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DataConnectorOffice365, err error)
	// DataConnectorOffice365s returns an object that can list and get DataConnectorOffice365s.
	DataConnectorOffice365s(namespace string) DataConnectorOffice365NamespaceLister
	DataConnectorOffice365ListerExpansion
}

// dataConnectorOffice365Lister implements the DataConnectorOffice365Lister interface.
type dataConnectorOffice365Lister struct {
	indexer cache.Indexer
}

// NewDataConnectorOffice365Lister returns a new DataConnectorOffice365Lister.
func NewDataConnectorOffice365Lister(indexer cache.Indexer) DataConnectorOffice365Lister {
	return &dataConnectorOffice365Lister{indexer: indexer}
}

// List lists all DataConnectorOffice365s in the indexer.
func (s *dataConnectorOffice365Lister) List(selector labels.Selector) (ret []*v1alpha1.DataConnectorOffice365, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataConnectorOffice365))
	})
	return ret, err
}

// DataConnectorOffice365s returns an object that can list and get DataConnectorOffice365s.
func (s *dataConnectorOffice365Lister) DataConnectorOffice365s(namespace string) DataConnectorOffice365NamespaceLister {
	return dataConnectorOffice365NamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DataConnectorOffice365NamespaceLister helps list and get DataConnectorOffice365s.
// All objects returned here must be treated as read-only.
type DataConnectorOffice365NamespaceLister interface {
	// List lists all DataConnectorOffice365s in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DataConnectorOffice365, err error)
	// Get retrieves the DataConnectorOffice365 from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DataConnectorOffice365, error)
	DataConnectorOffice365NamespaceListerExpansion
}

// dataConnectorOffice365NamespaceLister implements the DataConnectorOffice365NamespaceLister
// interface.
type dataConnectorOffice365NamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DataConnectorOffice365s in the indexer for a given namespace.
func (s dataConnectorOffice365NamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DataConnectorOffice365, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataConnectorOffice365))
	})
	return ret, err
}

// Get retrieves the DataConnectorOffice365 from the indexer for a given namespace and name.
func (s dataConnectorOffice365NamespaceLister) Get(name string) (*v1alpha1.DataConnectorOffice365, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dataconnectoroffice365"), name)
	}
	return obj.(*v1alpha1.DataConnectorOffice365), nil
}
