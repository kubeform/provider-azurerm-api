/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/sentinel/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AutomationRuleLister helps list AutomationRules.
// All objects returned here must be treated as read-only.
type AutomationRuleLister interface {
	// List lists all AutomationRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AutomationRule, err error)
	// AutomationRules returns an object that can list and get AutomationRules.
	AutomationRules(namespace string) AutomationRuleNamespaceLister
	AutomationRuleListerExpansion
}

// automationRuleLister implements the AutomationRuleLister interface.
type automationRuleLister struct {
	indexer cache.Indexer
}

// NewAutomationRuleLister returns a new AutomationRuleLister.
func NewAutomationRuleLister(indexer cache.Indexer) AutomationRuleLister {
	return &automationRuleLister{indexer: indexer}
}

// List lists all AutomationRules in the indexer.
func (s *automationRuleLister) List(selector labels.Selector) (ret []*v1alpha1.AutomationRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AutomationRule))
	})
	return ret, err
}

// AutomationRules returns an object that can list and get AutomationRules.
func (s *automationRuleLister) AutomationRules(namespace string) AutomationRuleNamespaceLister {
	return automationRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AutomationRuleNamespaceLister helps list and get AutomationRules.
// All objects returned here must be treated as read-only.
type AutomationRuleNamespaceLister interface {
	// List lists all AutomationRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AutomationRule, err error)
	// Get retrieves the AutomationRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AutomationRule, error)
	AutomationRuleNamespaceListerExpansion
}

// automationRuleNamespaceLister implements the AutomationRuleNamespaceLister
// interface.
type automationRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AutomationRules in the indexer for a given namespace.
func (s automationRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AutomationRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AutomationRule))
	})
	return ret, err
}

// Get retrieves the AutomationRule from the indexer for a given namespace and name.
func (s automationRuleNamespaceLister) Get(name string) (*v1alpha1.AutomationRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("automationrule"), name)
	}
	return obj.(*v1alpha1.AutomationRule), nil
}
