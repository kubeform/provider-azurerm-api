/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/sentinel/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AlertRuleFusionLister helps list AlertRuleFusions.
// All objects returned here must be treated as read-only.
type AlertRuleFusionLister interface {
	// List lists all AlertRuleFusions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AlertRuleFusion, err error)
	// AlertRuleFusions returns an object that can list and get AlertRuleFusions.
	AlertRuleFusions(namespace string) AlertRuleFusionNamespaceLister
	AlertRuleFusionListerExpansion
}

// alertRuleFusionLister implements the AlertRuleFusionLister interface.
type alertRuleFusionLister struct {
	indexer cache.Indexer
}

// NewAlertRuleFusionLister returns a new AlertRuleFusionLister.
func NewAlertRuleFusionLister(indexer cache.Indexer) AlertRuleFusionLister {
	return &alertRuleFusionLister{indexer: indexer}
}

// List lists all AlertRuleFusions in the indexer.
func (s *alertRuleFusionLister) List(selector labels.Selector) (ret []*v1alpha1.AlertRuleFusion, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AlertRuleFusion))
	})
	return ret, err
}

// AlertRuleFusions returns an object that can list and get AlertRuleFusions.
func (s *alertRuleFusionLister) AlertRuleFusions(namespace string) AlertRuleFusionNamespaceLister {
	return alertRuleFusionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AlertRuleFusionNamespaceLister helps list and get AlertRuleFusions.
// All objects returned here must be treated as read-only.
type AlertRuleFusionNamespaceLister interface {
	// List lists all AlertRuleFusions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AlertRuleFusion, err error)
	// Get retrieves the AlertRuleFusion from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AlertRuleFusion, error)
	AlertRuleFusionNamespaceListerExpansion
}

// alertRuleFusionNamespaceLister implements the AlertRuleFusionNamespaceLister
// interface.
type alertRuleFusionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AlertRuleFusions in the indexer for a given namespace.
func (s alertRuleFusionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AlertRuleFusion, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AlertRuleFusion))
	})
	return ret, err
}

// Get retrieves the AlertRuleFusion from the indexer for a given namespace and name.
func (s alertRuleFusionNamespaceLister) Get(name string) (*v1alpha1.AlertRuleFusion, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("alertrulefusion"), name)
	}
	return obj.(*v1alpha1.AlertRuleFusion), nil
}
