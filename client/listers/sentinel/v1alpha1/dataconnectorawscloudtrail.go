/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/sentinel/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DataConnectorAwsCloudTrailLister helps list DataConnectorAwsCloudTrails.
// All objects returned here must be treated as read-only.
type DataConnectorAwsCloudTrailLister interface {
	// List lists all DataConnectorAwsCloudTrails in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DataConnectorAwsCloudTrail, err error)
	// DataConnectorAwsCloudTrails returns an object that can list and get DataConnectorAwsCloudTrails.
	DataConnectorAwsCloudTrails(namespace string) DataConnectorAwsCloudTrailNamespaceLister
	DataConnectorAwsCloudTrailListerExpansion
}

// dataConnectorAwsCloudTrailLister implements the DataConnectorAwsCloudTrailLister interface.
type dataConnectorAwsCloudTrailLister struct {
	indexer cache.Indexer
}

// NewDataConnectorAwsCloudTrailLister returns a new DataConnectorAwsCloudTrailLister.
func NewDataConnectorAwsCloudTrailLister(indexer cache.Indexer) DataConnectorAwsCloudTrailLister {
	return &dataConnectorAwsCloudTrailLister{indexer: indexer}
}

// List lists all DataConnectorAwsCloudTrails in the indexer.
func (s *dataConnectorAwsCloudTrailLister) List(selector labels.Selector) (ret []*v1alpha1.DataConnectorAwsCloudTrail, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataConnectorAwsCloudTrail))
	})
	return ret, err
}

// DataConnectorAwsCloudTrails returns an object that can list and get DataConnectorAwsCloudTrails.
func (s *dataConnectorAwsCloudTrailLister) DataConnectorAwsCloudTrails(namespace string) DataConnectorAwsCloudTrailNamespaceLister {
	return dataConnectorAwsCloudTrailNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DataConnectorAwsCloudTrailNamespaceLister helps list and get DataConnectorAwsCloudTrails.
// All objects returned here must be treated as read-only.
type DataConnectorAwsCloudTrailNamespaceLister interface {
	// List lists all DataConnectorAwsCloudTrails in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DataConnectorAwsCloudTrail, err error)
	// Get retrieves the DataConnectorAwsCloudTrail from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DataConnectorAwsCloudTrail, error)
	DataConnectorAwsCloudTrailNamespaceListerExpansion
}

// dataConnectorAwsCloudTrailNamespaceLister implements the DataConnectorAwsCloudTrailNamespaceLister
// interface.
type dataConnectorAwsCloudTrailNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DataConnectorAwsCloudTrails in the indexer for a given namespace.
func (s dataConnectorAwsCloudTrailNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DataConnectorAwsCloudTrail, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataConnectorAwsCloudTrail))
	})
	return ret, err
}

// Get retrieves the DataConnectorAwsCloudTrail from the indexer for a given namespace and name.
func (s dataConnectorAwsCloudTrailNamespaceLister) Get(name string) (*v1alpha1.DataConnectorAwsCloudTrail, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dataconnectorawscloudtrail"), name)
	}
	return obj.(*v1alpha1.DataConnectorAwsCloudTrail), nil
}
