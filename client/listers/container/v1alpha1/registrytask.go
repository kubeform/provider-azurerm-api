/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/container/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RegistryTaskLister helps list RegistryTasks.
// All objects returned here must be treated as read-only.
type RegistryTaskLister interface {
	// List lists all RegistryTasks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegistryTask, err error)
	// RegistryTasks returns an object that can list and get RegistryTasks.
	RegistryTasks(namespace string) RegistryTaskNamespaceLister
	RegistryTaskListerExpansion
}

// registryTaskLister implements the RegistryTaskLister interface.
type registryTaskLister struct {
	indexer cache.Indexer
}

// NewRegistryTaskLister returns a new RegistryTaskLister.
func NewRegistryTaskLister(indexer cache.Indexer) RegistryTaskLister {
	return &registryTaskLister{indexer: indexer}
}

// List lists all RegistryTasks in the indexer.
func (s *registryTaskLister) List(selector labels.Selector) (ret []*v1alpha1.RegistryTask, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegistryTask))
	})
	return ret, err
}

// RegistryTasks returns an object that can list and get RegistryTasks.
func (s *registryTaskLister) RegistryTasks(namespace string) RegistryTaskNamespaceLister {
	return registryTaskNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RegistryTaskNamespaceLister helps list and get RegistryTasks.
// All objects returned here must be treated as read-only.
type RegistryTaskNamespaceLister interface {
	// List lists all RegistryTasks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegistryTask, err error)
	// Get retrieves the RegistryTask from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RegistryTask, error)
	RegistryTaskNamespaceListerExpansion
}

// registryTaskNamespaceLister implements the RegistryTaskNamespaceLister
// interface.
type registryTaskNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RegistryTasks in the indexer for a given namespace.
func (s registryTaskNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RegistryTask, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegistryTask))
	})
	return ret, err
}

// Get retrieves the RegistryTask from the indexer for a given namespace and name.
func (s registryTaskNamespaceLister) Get(name string) (*v1alpha1.RegistryTask, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("registrytask"), name)
	}
	return obj.(*v1alpha1.RegistryTask), nil
}
