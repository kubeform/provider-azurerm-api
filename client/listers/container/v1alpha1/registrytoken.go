/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/container/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RegistryTokenLister helps list RegistryTokens.
// All objects returned here must be treated as read-only.
type RegistryTokenLister interface {
	// List lists all RegistryTokens in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegistryToken, err error)
	// RegistryTokens returns an object that can list and get RegistryTokens.
	RegistryTokens(namespace string) RegistryTokenNamespaceLister
	RegistryTokenListerExpansion
}

// registryTokenLister implements the RegistryTokenLister interface.
type registryTokenLister struct {
	indexer cache.Indexer
}

// NewRegistryTokenLister returns a new RegistryTokenLister.
func NewRegistryTokenLister(indexer cache.Indexer) RegistryTokenLister {
	return &registryTokenLister{indexer: indexer}
}

// List lists all RegistryTokens in the indexer.
func (s *registryTokenLister) List(selector labels.Selector) (ret []*v1alpha1.RegistryToken, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegistryToken))
	})
	return ret, err
}

// RegistryTokens returns an object that can list and get RegistryTokens.
func (s *registryTokenLister) RegistryTokens(namespace string) RegistryTokenNamespaceLister {
	return registryTokenNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RegistryTokenNamespaceLister helps list and get RegistryTokens.
// All objects returned here must be treated as read-only.
type RegistryTokenNamespaceLister interface {
	// List lists all RegistryTokens in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegistryToken, err error)
	// Get retrieves the RegistryToken from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RegistryToken, error)
	RegistryTokenNamespaceListerExpansion
}

// registryTokenNamespaceLister implements the RegistryTokenNamespaceLister
// interface.
type registryTokenNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RegistryTokens in the indexer for a given namespace.
func (s registryTokenNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RegistryToken, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegistryToken))
	})
	return ret, err
}

// Get retrieves the RegistryToken from the indexer for a given namespace and name.
func (s registryTokenNamespaceLister) Get(name string) (*v1alpha1.RegistryToken, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("registrytoken"), name)
	}
	return obj.(*v1alpha1.RegistryToken), nil
}
