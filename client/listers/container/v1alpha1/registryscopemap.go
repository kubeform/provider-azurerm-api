/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/container/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RegistryScopeMapLister helps list RegistryScopeMaps.
// All objects returned here must be treated as read-only.
type RegistryScopeMapLister interface {
	// List lists all RegistryScopeMaps in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegistryScopeMap, err error)
	// RegistryScopeMaps returns an object that can list and get RegistryScopeMaps.
	RegistryScopeMaps(namespace string) RegistryScopeMapNamespaceLister
	RegistryScopeMapListerExpansion
}

// registryScopeMapLister implements the RegistryScopeMapLister interface.
type registryScopeMapLister struct {
	indexer cache.Indexer
}

// NewRegistryScopeMapLister returns a new RegistryScopeMapLister.
func NewRegistryScopeMapLister(indexer cache.Indexer) RegistryScopeMapLister {
	return &registryScopeMapLister{indexer: indexer}
}

// List lists all RegistryScopeMaps in the indexer.
func (s *registryScopeMapLister) List(selector labels.Selector) (ret []*v1alpha1.RegistryScopeMap, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegistryScopeMap))
	})
	return ret, err
}

// RegistryScopeMaps returns an object that can list and get RegistryScopeMaps.
func (s *registryScopeMapLister) RegistryScopeMaps(namespace string) RegistryScopeMapNamespaceLister {
	return registryScopeMapNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RegistryScopeMapNamespaceLister helps list and get RegistryScopeMaps.
// All objects returned here must be treated as read-only.
type RegistryScopeMapNamespaceLister interface {
	// List lists all RegistryScopeMaps in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RegistryScopeMap, err error)
	// Get retrieves the RegistryScopeMap from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RegistryScopeMap, error)
	RegistryScopeMapNamespaceListerExpansion
}

// registryScopeMapNamespaceLister implements the RegistryScopeMapNamespaceLister
// interface.
type registryScopeMapNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RegistryScopeMaps in the indexer for a given namespace.
func (s registryScopeMapNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RegistryScopeMap, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RegistryScopeMap))
	})
	return ret, err
}

// Get retrieves the RegistryScopeMap from the indexer for a given namespace and name.
func (s registryScopeMapNamespaceLister) Get(name string) (*v1alpha1.RegistryScopeMap, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("registryscopemap"), name)
	}
	return obj.(*v1alpha1.RegistryScopeMap), nil
}
