/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/mssql/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ManagedDatabaseLister helps list ManagedDatabases.
// All objects returned here must be treated as read-only.
type ManagedDatabaseLister interface {
	// List lists all ManagedDatabases in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagedDatabase, err error)
	// ManagedDatabases returns an object that can list and get ManagedDatabases.
	ManagedDatabases(namespace string) ManagedDatabaseNamespaceLister
	ManagedDatabaseListerExpansion
}

// managedDatabaseLister implements the ManagedDatabaseLister interface.
type managedDatabaseLister struct {
	indexer cache.Indexer
}

// NewManagedDatabaseLister returns a new ManagedDatabaseLister.
func NewManagedDatabaseLister(indexer cache.Indexer) ManagedDatabaseLister {
	return &managedDatabaseLister{indexer: indexer}
}

// List lists all ManagedDatabases in the indexer.
func (s *managedDatabaseLister) List(selector labels.Selector) (ret []*v1alpha1.ManagedDatabase, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagedDatabase))
	})
	return ret, err
}

// ManagedDatabases returns an object that can list and get ManagedDatabases.
func (s *managedDatabaseLister) ManagedDatabases(namespace string) ManagedDatabaseNamespaceLister {
	return managedDatabaseNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManagedDatabaseNamespaceLister helps list and get ManagedDatabases.
// All objects returned here must be treated as read-only.
type ManagedDatabaseNamespaceLister interface {
	// List lists all ManagedDatabases in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagedDatabase, err error)
	// Get retrieves the ManagedDatabase from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ManagedDatabase, error)
	ManagedDatabaseNamespaceListerExpansion
}

// managedDatabaseNamespaceLister implements the ManagedDatabaseNamespaceLister
// interface.
type managedDatabaseNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManagedDatabases in the indexer for a given namespace.
func (s managedDatabaseNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ManagedDatabase, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagedDatabase))
	})
	return ret, err
}

// Get retrieves the ManagedDatabase from the indexer for a given namespace and name.
func (s managedDatabaseNamespaceLister) Get(name string) (*v1alpha1.ManagedDatabase, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("manageddatabase"), name)
	}
	return obj.(*v1alpha1.ManagedDatabase), nil
}
