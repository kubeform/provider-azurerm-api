/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/mssql/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ManagedInstanceFailoverGroupLister helps list ManagedInstanceFailoverGroups.
// All objects returned here must be treated as read-only.
type ManagedInstanceFailoverGroupLister interface {
	// List lists all ManagedInstanceFailoverGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagedInstanceFailoverGroup, err error)
	// ManagedInstanceFailoverGroups returns an object that can list and get ManagedInstanceFailoverGroups.
	ManagedInstanceFailoverGroups(namespace string) ManagedInstanceFailoverGroupNamespaceLister
	ManagedInstanceFailoverGroupListerExpansion
}

// managedInstanceFailoverGroupLister implements the ManagedInstanceFailoverGroupLister interface.
type managedInstanceFailoverGroupLister struct {
	indexer cache.Indexer
}

// NewManagedInstanceFailoverGroupLister returns a new ManagedInstanceFailoverGroupLister.
func NewManagedInstanceFailoverGroupLister(indexer cache.Indexer) ManagedInstanceFailoverGroupLister {
	return &managedInstanceFailoverGroupLister{indexer: indexer}
}

// List lists all ManagedInstanceFailoverGroups in the indexer.
func (s *managedInstanceFailoverGroupLister) List(selector labels.Selector) (ret []*v1alpha1.ManagedInstanceFailoverGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagedInstanceFailoverGroup))
	})
	return ret, err
}

// ManagedInstanceFailoverGroups returns an object that can list and get ManagedInstanceFailoverGroups.
func (s *managedInstanceFailoverGroupLister) ManagedInstanceFailoverGroups(namespace string) ManagedInstanceFailoverGroupNamespaceLister {
	return managedInstanceFailoverGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManagedInstanceFailoverGroupNamespaceLister helps list and get ManagedInstanceFailoverGroups.
// All objects returned here must be treated as read-only.
type ManagedInstanceFailoverGroupNamespaceLister interface {
	// List lists all ManagedInstanceFailoverGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagedInstanceFailoverGroup, err error)
	// Get retrieves the ManagedInstanceFailoverGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ManagedInstanceFailoverGroup, error)
	ManagedInstanceFailoverGroupNamespaceListerExpansion
}

// managedInstanceFailoverGroupNamespaceLister implements the ManagedInstanceFailoverGroupNamespaceLister
// interface.
type managedInstanceFailoverGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManagedInstanceFailoverGroups in the indexer for a given namespace.
func (s managedInstanceFailoverGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ManagedInstanceFailoverGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagedInstanceFailoverGroup))
	})
	return ret, err
}

// Get retrieves the ManagedInstanceFailoverGroup from the indexer for a given namespace and name.
func (s managedInstanceFailoverGroupNamespaceLister) Get(name string) (*v1alpha1.ManagedInstanceFailoverGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("managedinstancefailovergroup"), name)
	}
	return obj.(*v1alpha1.ManagedInstanceFailoverGroup), nil
}
