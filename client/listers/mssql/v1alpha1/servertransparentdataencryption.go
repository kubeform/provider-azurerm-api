/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/mssql/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServerTransparentDataEncryptionLister helps list ServerTransparentDataEncryptions.
// All objects returned here must be treated as read-only.
type ServerTransparentDataEncryptionLister interface {
	// List lists all ServerTransparentDataEncryptions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServerTransparentDataEncryption, err error)
	// ServerTransparentDataEncryptions returns an object that can list and get ServerTransparentDataEncryptions.
	ServerTransparentDataEncryptions(namespace string) ServerTransparentDataEncryptionNamespaceLister
	ServerTransparentDataEncryptionListerExpansion
}

// serverTransparentDataEncryptionLister implements the ServerTransparentDataEncryptionLister interface.
type serverTransparentDataEncryptionLister struct {
	indexer cache.Indexer
}

// NewServerTransparentDataEncryptionLister returns a new ServerTransparentDataEncryptionLister.
func NewServerTransparentDataEncryptionLister(indexer cache.Indexer) ServerTransparentDataEncryptionLister {
	return &serverTransparentDataEncryptionLister{indexer: indexer}
}

// List lists all ServerTransparentDataEncryptions in the indexer.
func (s *serverTransparentDataEncryptionLister) List(selector labels.Selector) (ret []*v1alpha1.ServerTransparentDataEncryption, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServerTransparentDataEncryption))
	})
	return ret, err
}

// ServerTransparentDataEncryptions returns an object that can list and get ServerTransparentDataEncryptions.
func (s *serverTransparentDataEncryptionLister) ServerTransparentDataEncryptions(namespace string) ServerTransparentDataEncryptionNamespaceLister {
	return serverTransparentDataEncryptionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServerTransparentDataEncryptionNamespaceLister helps list and get ServerTransparentDataEncryptions.
// All objects returned here must be treated as read-only.
type ServerTransparentDataEncryptionNamespaceLister interface {
	// List lists all ServerTransparentDataEncryptions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServerTransparentDataEncryption, err error)
	// Get retrieves the ServerTransparentDataEncryption from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServerTransparentDataEncryption, error)
	ServerTransparentDataEncryptionNamespaceListerExpansion
}

// serverTransparentDataEncryptionNamespaceLister implements the ServerTransparentDataEncryptionNamespaceLister
// interface.
type serverTransparentDataEncryptionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServerTransparentDataEncryptions in the indexer for a given namespace.
func (s serverTransparentDataEncryptionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServerTransparentDataEncryption, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServerTransparentDataEncryption))
	})
	return ret, err
}

// Get retrieves the ServerTransparentDataEncryption from the indexer for a given namespace and name.
func (s serverTransparentDataEncryptionNamespaceLister) Get(name string) (*v1alpha1.ServerTransparentDataEncryption, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servertransparentdataencryption"), name)
	}
	return obj.(*v1alpha1.ServerTransparentDataEncryption), nil
}
