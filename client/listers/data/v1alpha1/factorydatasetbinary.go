/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FactoryDatasetBinaryLister helps list FactoryDatasetBinaries.
// All objects returned here must be treated as read-only.
type FactoryDatasetBinaryLister interface {
	// List lists all FactoryDatasetBinaries in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryDatasetBinary, err error)
	// FactoryDatasetBinaries returns an object that can list and get FactoryDatasetBinaries.
	FactoryDatasetBinaries(namespace string) FactoryDatasetBinaryNamespaceLister
	FactoryDatasetBinaryListerExpansion
}

// factoryDatasetBinaryLister implements the FactoryDatasetBinaryLister interface.
type factoryDatasetBinaryLister struct {
	indexer cache.Indexer
}

// NewFactoryDatasetBinaryLister returns a new FactoryDatasetBinaryLister.
func NewFactoryDatasetBinaryLister(indexer cache.Indexer) FactoryDatasetBinaryLister {
	return &factoryDatasetBinaryLister{indexer: indexer}
}

// List lists all FactoryDatasetBinaries in the indexer.
func (s *factoryDatasetBinaryLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryDatasetBinary, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryDatasetBinary))
	})
	return ret, err
}

// FactoryDatasetBinaries returns an object that can list and get FactoryDatasetBinaries.
func (s *factoryDatasetBinaryLister) FactoryDatasetBinaries(namespace string) FactoryDatasetBinaryNamespaceLister {
	return factoryDatasetBinaryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FactoryDatasetBinaryNamespaceLister helps list and get FactoryDatasetBinaries.
// All objects returned here must be treated as read-only.
type FactoryDatasetBinaryNamespaceLister interface {
	// List lists all FactoryDatasetBinaries in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryDatasetBinary, err error)
	// Get retrieves the FactoryDatasetBinary from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FactoryDatasetBinary, error)
	FactoryDatasetBinaryNamespaceListerExpansion
}

// factoryDatasetBinaryNamespaceLister implements the FactoryDatasetBinaryNamespaceLister
// interface.
type factoryDatasetBinaryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FactoryDatasetBinaries in the indexer for a given namespace.
func (s factoryDatasetBinaryNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryDatasetBinary, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryDatasetBinary))
	})
	return ret, err
}

// Get retrieves the FactoryDatasetBinary from the indexer for a given namespace and name.
func (s factoryDatasetBinaryNamespaceLister) Get(name string) (*v1alpha1.FactoryDatasetBinary, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("factorydatasetbinary"), name)
	}
	return obj.(*v1alpha1.FactoryDatasetBinary), nil
}
