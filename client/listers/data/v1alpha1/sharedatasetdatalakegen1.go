/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ShareDatasetDataLakeGen1Lister helps list ShareDatasetDataLakeGen1s.
// All objects returned here must be treated as read-only.
type ShareDatasetDataLakeGen1Lister interface {
	// List lists all ShareDatasetDataLakeGen1s in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ShareDatasetDataLakeGen1, err error)
	// ShareDatasetDataLakeGen1s returns an object that can list and get ShareDatasetDataLakeGen1s.
	ShareDatasetDataLakeGen1s(namespace string) ShareDatasetDataLakeGen1NamespaceLister
	ShareDatasetDataLakeGen1ListerExpansion
}

// shareDatasetDataLakeGen1Lister implements the ShareDatasetDataLakeGen1Lister interface.
type shareDatasetDataLakeGen1Lister struct {
	indexer cache.Indexer
}

// NewShareDatasetDataLakeGen1Lister returns a new ShareDatasetDataLakeGen1Lister.
func NewShareDatasetDataLakeGen1Lister(indexer cache.Indexer) ShareDatasetDataLakeGen1Lister {
	return &shareDatasetDataLakeGen1Lister{indexer: indexer}
}

// List lists all ShareDatasetDataLakeGen1s in the indexer.
func (s *shareDatasetDataLakeGen1Lister) List(selector labels.Selector) (ret []*v1alpha1.ShareDatasetDataLakeGen1, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ShareDatasetDataLakeGen1))
	})
	return ret, err
}

// ShareDatasetDataLakeGen1s returns an object that can list and get ShareDatasetDataLakeGen1s.
func (s *shareDatasetDataLakeGen1Lister) ShareDatasetDataLakeGen1s(namespace string) ShareDatasetDataLakeGen1NamespaceLister {
	return shareDatasetDataLakeGen1NamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ShareDatasetDataLakeGen1NamespaceLister helps list and get ShareDatasetDataLakeGen1s.
// All objects returned here must be treated as read-only.
type ShareDatasetDataLakeGen1NamespaceLister interface {
	// List lists all ShareDatasetDataLakeGen1s in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ShareDatasetDataLakeGen1, err error)
	// Get retrieves the ShareDatasetDataLakeGen1 from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ShareDatasetDataLakeGen1, error)
	ShareDatasetDataLakeGen1NamespaceListerExpansion
}

// shareDatasetDataLakeGen1NamespaceLister implements the ShareDatasetDataLakeGen1NamespaceLister
// interface.
type shareDatasetDataLakeGen1NamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ShareDatasetDataLakeGen1s in the indexer for a given namespace.
func (s shareDatasetDataLakeGen1NamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ShareDatasetDataLakeGen1, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ShareDatasetDataLakeGen1))
	})
	return ret, err
}

// Get retrieves the ShareDatasetDataLakeGen1 from the indexer for a given namespace and name.
func (s shareDatasetDataLakeGen1NamespaceLister) Get(name string) (*v1alpha1.ShareDatasetDataLakeGen1, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sharedatasetdatalakegen1"), name)
	}
	return obj.(*v1alpha1.ShareDatasetDataLakeGen1), nil
}
