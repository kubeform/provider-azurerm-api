/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FactoryLinkedServiceWebLister helps list FactoryLinkedServiceWebs.
// All objects returned here must be treated as read-only.
type FactoryLinkedServiceWebLister interface {
	// List lists all FactoryLinkedServiceWebs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryLinkedServiceWeb, err error)
	// FactoryLinkedServiceWebs returns an object that can list and get FactoryLinkedServiceWebs.
	FactoryLinkedServiceWebs(namespace string) FactoryLinkedServiceWebNamespaceLister
	FactoryLinkedServiceWebListerExpansion
}

// factoryLinkedServiceWebLister implements the FactoryLinkedServiceWebLister interface.
type factoryLinkedServiceWebLister struct {
	indexer cache.Indexer
}

// NewFactoryLinkedServiceWebLister returns a new FactoryLinkedServiceWebLister.
func NewFactoryLinkedServiceWebLister(indexer cache.Indexer) FactoryLinkedServiceWebLister {
	return &factoryLinkedServiceWebLister{indexer: indexer}
}

// List lists all FactoryLinkedServiceWebs in the indexer.
func (s *factoryLinkedServiceWebLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryLinkedServiceWeb, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryLinkedServiceWeb))
	})
	return ret, err
}

// FactoryLinkedServiceWebs returns an object that can list and get FactoryLinkedServiceWebs.
func (s *factoryLinkedServiceWebLister) FactoryLinkedServiceWebs(namespace string) FactoryLinkedServiceWebNamespaceLister {
	return factoryLinkedServiceWebNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FactoryLinkedServiceWebNamespaceLister helps list and get FactoryLinkedServiceWebs.
// All objects returned here must be treated as read-only.
type FactoryLinkedServiceWebNamespaceLister interface {
	// List lists all FactoryLinkedServiceWebs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryLinkedServiceWeb, err error)
	// Get retrieves the FactoryLinkedServiceWeb from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FactoryLinkedServiceWeb, error)
	FactoryLinkedServiceWebNamespaceListerExpansion
}

// factoryLinkedServiceWebNamespaceLister implements the FactoryLinkedServiceWebNamespaceLister
// interface.
type factoryLinkedServiceWebNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FactoryLinkedServiceWebs in the indexer for a given namespace.
func (s factoryLinkedServiceWebNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryLinkedServiceWeb, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryLinkedServiceWeb))
	})
	return ret, err
}

// Get retrieves the FactoryLinkedServiceWeb from the indexer for a given namespace and name.
func (s factoryLinkedServiceWebNamespaceLister) Get(name string) (*v1alpha1.FactoryLinkedServiceWeb, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("factorylinkedserviceweb"), name)
	}
	return obj.(*v1alpha1.FactoryLinkedServiceWeb), nil
}
