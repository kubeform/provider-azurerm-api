/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FactoryDatasetSnowflakeLister helps list FactoryDatasetSnowflakes.
// All objects returned here must be treated as read-only.
type FactoryDatasetSnowflakeLister interface {
	// List lists all FactoryDatasetSnowflakes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryDatasetSnowflake, err error)
	// FactoryDatasetSnowflakes returns an object that can list and get FactoryDatasetSnowflakes.
	FactoryDatasetSnowflakes(namespace string) FactoryDatasetSnowflakeNamespaceLister
	FactoryDatasetSnowflakeListerExpansion
}

// factoryDatasetSnowflakeLister implements the FactoryDatasetSnowflakeLister interface.
type factoryDatasetSnowflakeLister struct {
	indexer cache.Indexer
}

// NewFactoryDatasetSnowflakeLister returns a new FactoryDatasetSnowflakeLister.
func NewFactoryDatasetSnowflakeLister(indexer cache.Indexer) FactoryDatasetSnowflakeLister {
	return &factoryDatasetSnowflakeLister{indexer: indexer}
}

// List lists all FactoryDatasetSnowflakes in the indexer.
func (s *factoryDatasetSnowflakeLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryDatasetSnowflake, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryDatasetSnowflake))
	})
	return ret, err
}

// FactoryDatasetSnowflakes returns an object that can list and get FactoryDatasetSnowflakes.
func (s *factoryDatasetSnowflakeLister) FactoryDatasetSnowflakes(namespace string) FactoryDatasetSnowflakeNamespaceLister {
	return factoryDatasetSnowflakeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FactoryDatasetSnowflakeNamespaceLister helps list and get FactoryDatasetSnowflakes.
// All objects returned here must be treated as read-only.
type FactoryDatasetSnowflakeNamespaceLister interface {
	// List lists all FactoryDatasetSnowflakes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryDatasetSnowflake, err error)
	// Get retrieves the FactoryDatasetSnowflake from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FactoryDatasetSnowflake, error)
	FactoryDatasetSnowflakeNamespaceListerExpansion
}

// factoryDatasetSnowflakeNamespaceLister implements the FactoryDatasetSnowflakeNamespaceLister
// interface.
type factoryDatasetSnowflakeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FactoryDatasetSnowflakes in the indexer for a given namespace.
func (s factoryDatasetSnowflakeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryDatasetSnowflake, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryDatasetSnowflake))
	})
	return ret, err
}

// Get retrieves the FactoryDatasetSnowflake from the indexer for a given namespace and name.
func (s factoryDatasetSnowflakeNamespaceLister) Get(name string) (*v1alpha1.FactoryDatasetSnowflake, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("factorydatasetsnowflake"), name)
	}
	return obj.(*v1alpha1.FactoryDatasetSnowflake), nil
}
