/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FactoryDatasetJSONLister helps list FactoryDatasetJSONs.
// All objects returned here must be treated as read-only.
type FactoryDatasetJSONLister interface {
	// List lists all FactoryDatasetJSONs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryDatasetJSON, err error)
	// FactoryDatasetJSONs returns an object that can list and get FactoryDatasetJSONs.
	FactoryDatasetJSONs(namespace string) FactoryDatasetJSONNamespaceLister
	FactoryDatasetJSONListerExpansion
}

// factoryDatasetJSONLister implements the FactoryDatasetJSONLister interface.
type factoryDatasetJSONLister struct {
	indexer cache.Indexer
}

// NewFactoryDatasetJSONLister returns a new FactoryDatasetJSONLister.
func NewFactoryDatasetJSONLister(indexer cache.Indexer) FactoryDatasetJSONLister {
	return &factoryDatasetJSONLister{indexer: indexer}
}

// List lists all FactoryDatasetJSONs in the indexer.
func (s *factoryDatasetJSONLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryDatasetJSON, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryDatasetJSON))
	})
	return ret, err
}

// FactoryDatasetJSONs returns an object that can list and get FactoryDatasetJSONs.
func (s *factoryDatasetJSONLister) FactoryDatasetJSONs(namespace string) FactoryDatasetJSONNamespaceLister {
	return factoryDatasetJSONNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FactoryDatasetJSONNamespaceLister helps list and get FactoryDatasetJSONs.
// All objects returned here must be treated as read-only.
type FactoryDatasetJSONNamespaceLister interface {
	// List lists all FactoryDatasetJSONs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryDatasetJSON, err error)
	// Get retrieves the FactoryDatasetJSON from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FactoryDatasetJSON, error)
	FactoryDatasetJSONNamespaceListerExpansion
}

// factoryDatasetJSONNamespaceLister implements the FactoryDatasetJSONNamespaceLister
// interface.
type factoryDatasetJSONNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FactoryDatasetJSONs in the indexer for a given namespace.
func (s factoryDatasetJSONNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryDatasetJSON, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryDatasetJSON))
	})
	return ret, err
}

// Get retrieves the FactoryDatasetJSON from the indexer for a given namespace and name.
func (s factoryDatasetJSONNamespaceLister) Get(name string) (*v1alpha1.FactoryDatasetJSON, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("factorydatasetjson"), name)
	}
	return obj.(*v1alpha1.FactoryDatasetJSON), nil
}
