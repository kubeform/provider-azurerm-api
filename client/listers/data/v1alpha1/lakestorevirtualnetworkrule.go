/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LakeStoreVirtualNetworkRuleLister helps list LakeStoreVirtualNetworkRules.
// All objects returned here must be treated as read-only.
type LakeStoreVirtualNetworkRuleLister interface {
	// List lists all LakeStoreVirtualNetworkRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LakeStoreVirtualNetworkRule, err error)
	// LakeStoreVirtualNetworkRules returns an object that can list and get LakeStoreVirtualNetworkRules.
	LakeStoreVirtualNetworkRules(namespace string) LakeStoreVirtualNetworkRuleNamespaceLister
	LakeStoreVirtualNetworkRuleListerExpansion
}

// lakeStoreVirtualNetworkRuleLister implements the LakeStoreVirtualNetworkRuleLister interface.
type lakeStoreVirtualNetworkRuleLister struct {
	indexer cache.Indexer
}

// NewLakeStoreVirtualNetworkRuleLister returns a new LakeStoreVirtualNetworkRuleLister.
func NewLakeStoreVirtualNetworkRuleLister(indexer cache.Indexer) LakeStoreVirtualNetworkRuleLister {
	return &lakeStoreVirtualNetworkRuleLister{indexer: indexer}
}

// List lists all LakeStoreVirtualNetworkRules in the indexer.
func (s *lakeStoreVirtualNetworkRuleLister) List(selector labels.Selector) (ret []*v1alpha1.LakeStoreVirtualNetworkRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LakeStoreVirtualNetworkRule))
	})
	return ret, err
}

// LakeStoreVirtualNetworkRules returns an object that can list and get LakeStoreVirtualNetworkRules.
func (s *lakeStoreVirtualNetworkRuleLister) LakeStoreVirtualNetworkRules(namespace string) LakeStoreVirtualNetworkRuleNamespaceLister {
	return lakeStoreVirtualNetworkRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LakeStoreVirtualNetworkRuleNamespaceLister helps list and get LakeStoreVirtualNetworkRules.
// All objects returned here must be treated as read-only.
type LakeStoreVirtualNetworkRuleNamespaceLister interface {
	// List lists all LakeStoreVirtualNetworkRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LakeStoreVirtualNetworkRule, err error)
	// Get retrieves the LakeStoreVirtualNetworkRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LakeStoreVirtualNetworkRule, error)
	LakeStoreVirtualNetworkRuleNamespaceListerExpansion
}

// lakeStoreVirtualNetworkRuleNamespaceLister implements the LakeStoreVirtualNetworkRuleNamespaceLister
// interface.
type lakeStoreVirtualNetworkRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LakeStoreVirtualNetworkRules in the indexer for a given namespace.
func (s lakeStoreVirtualNetworkRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LakeStoreVirtualNetworkRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LakeStoreVirtualNetworkRule))
	})
	return ret, err
}

// Get retrieves the LakeStoreVirtualNetworkRule from the indexer for a given namespace and name.
func (s lakeStoreVirtualNetworkRuleNamespaceLister) Get(name string) (*v1alpha1.LakeStoreVirtualNetworkRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("lakestorevirtualnetworkrule"), name)
	}
	return obj.(*v1alpha1.LakeStoreVirtualNetworkRule), nil
}
