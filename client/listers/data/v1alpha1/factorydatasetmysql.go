/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FactoryDatasetMysqlLister helps list FactoryDatasetMysqls.
// All objects returned here must be treated as read-only.
type FactoryDatasetMysqlLister interface {
	// List lists all FactoryDatasetMysqls in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryDatasetMysql, err error)
	// FactoryDatasetMysqls returns an object that can list and get FactoryDatasetMysqls.
	FactoryDatasetMysqls(namespace string) FactoryDatasetMysqlNamespaceLister
	FactoryDatasetMysqlListerExpansion
}

// factoryDatasetMysqlLister implements the FactoryDatasetMysqlLister interface.
type factoryDatasetMysqlLister struct {
	indexer cache.Indexer
}

// NewFactoryDatasetMysqlLister returns a new FactoryDatasetMysqlLister.
func NewFactoryDatasetMysqlLister(indexer cache.Indexer) FactoryDatasetMysqlLister {
	return &factoryDatasetMysqlLister{indexer: indexer}
}

// List lists all FactoryDatasetMysqls in the indexer.
func (s *factoryDatasetMysqlLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryDatasetMysql, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryDatasetMysql))
	})
	return ret, err
}

// FactoryDatasetMysqls returns an object that can list and get FactoryDatasetMysqls.
func (s *factoryDatasetMysqlLister) FactoryDatasetMysqls(namespace string) FactoryDatasetMysqlNamespaceLister {
	return factoryDatasetMysqlNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FactoryDatasetMysqlNamespaceLister helps list and get FactoryDatasetMysqls.
// All objects returned here must be treated as read-only.
type FactoryDatasetMysqlNamespaceLister interface {
	// List lists all FactoryDatasetMysqls in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryDatasetMysql, err error)
	// Get retrieves the FactoryDatasetMysql from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FactoryDatasetMysql, error)
	FactoryDatasetMysqlNamespaceListerExpansion
}

// factoryDatasetMysqlNamespaceLister implements the FactoryDatasetMysqlNamespaceLister
// interface.
type factoryDatasetMysqlNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FactoryDatasetMysqls in the indexer for a given namespace.
func (s factoryDatasetMysqlNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryDatasetMysql, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryDatasetMysql))
	})
	return ret, err
}

// Get retrieves the FactoryDatasetMysql from the indexer for a given namespace and name.
func (s factoryDatasetMysqlNamespaceLister) Get(name string) (*v1alpha1.FactoryDatasetMysql, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("factorydatasetmysql"), name)
	}
	return obj.(*v1alpha1.FactoryDatasetMysql), nil
}
