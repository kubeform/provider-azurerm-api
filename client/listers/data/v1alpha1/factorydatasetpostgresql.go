/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FactoryDatasetPostgresqlLister helps list FactoryDatasetPostgresqls.
// All objects returned here must be treated as read-only.
type FactoryDatasetPostgresqlLister interface {
	// List lists all FactoryDatasetPostgresqls in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryDatasetPostgresql, err error)
	// FactoryDatasetPostgresqls returns an object that can list and get FactoryDatasetPostgresqls.
	FactoryDatasetPostgresqls(namespace string) FactoryDatasetPostgresqlNamespaceLister
	FactoryDatasetPostgresqlListerExpansion
}

// factoryDatasetPostgresqlLister implements the FactoryDatasetPostgresqlLister interface.
type factoryDatasetPostgresqlLister struct {
	indexer cache.Indexer
}

// NewFactoryDatasetPostgresqlLister returns a new FactoryDatasetPostgresqlLister.
func NewFactoryDatasetPostgresqlLister(indexer cache.Indexer) FactoryDatasetPostgresqlLister {
	return &factoryDatasetPostgresqlLister{indexer: indexer}
}

// List lists all FactoryDatasetPostgresqls in the indexer.
func (s *factoryDatasetPostgresqlLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryDatasetPostgresql, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryDatasetPostgresql))
	})
	return ret, err
}

// FactoryDatasetPostgresqls returns an object that can list and get FactoryDatasetPostgresqls.
func (s *factoryDatasetPostgresqlLister) FactoryDatasetPostgresqls(namespace string) FactoryDatasetPostgresqlNamespaceLister {
	return factoryDatasetPostgresqlNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FactoryDatasetPostgresqlNamespaceLister helps list and get FactoryDatasetPostgresqls.
// All objects returned here must be treated as read-only.
type FactoryDatasetPostgresqlNamespaceLister interface {
	// List lists all FactoryDatasetPostgresqls in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryDatasetPostgresql, err error)
	// Get retrieves the FactoryDatasetPostgresql from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FactoryDatasetPostgresql, error)
	FactoryDatasetPostgresqlNamespaceListerExpansion
}

// factoryDatasetPostgresqlNamespaceLister implements the FactoryDatasetPostgresqlNamespaceLister
// interface.
type factoryDatasetPostgresqlNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FactoryDatasetPostgresqls in the indexer for a given namespace.
func (s factoryDatasetPostgresqlNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryDatasetPostgresql, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryDatasetPostgresql))
	})
	return ret, err
}

// Get retrieves the FactoryDatasetPostgresql from the indexer for a given namespace and name.
func (s factoryDatasetPostgresqlNamespaceLister) Get(name string) (*v1alpha1.FactoryDatasetPostgresql, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("factorydatasetpostgresql"), name)
	}
	return obj.(*v1alpha1.FactoryDatasetPostgresql), nil
}
