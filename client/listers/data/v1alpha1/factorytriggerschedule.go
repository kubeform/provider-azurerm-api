/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FactoryTriggerScheduleLister helps list FactoryTriggerSchedules.
// All objects returned here must be treated as read-only.
type FactoryTriggerScheduleLister interface {
	// List lists all FactoryTriggerSchedules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryTriggerSchedule, err error)
	// FactoryTriggerSchedules returns an object that can list and get FactoryTriggerSchedules.
	FactoryTriggerSchedules(namespace string) FactoryTriggerScheduleNamespaceLister
	FactoryTriggerScheduleListerExpansion
}

// factoryTriggerScheduleLister implements the FactoryTriggerScheduleLister interface.
type factoryTriggerScheduleLister struct {
	indexer cache.Indexer
}

// NewFactoryTriggerScheduleLister returns a new FactoryTriggerScheduleLister.
func NewFactoryTriggerScheduleLister(indexer cache.Indexer) FactoryTriggerScheduleLister {
	return &factoryTriggerScheduleLister{indexer: indexer}
}

// List lists all FactoryTriggerSchedules in the indexer.
func (s *factoryTriggerScheduleLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryTriggerSchedule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryTriggerSchedule))
	})
	return ret, err
}

// FactoryTriggerSchedules returns an object that can list and get FactoryTriggerSchedules.
func (s *factoryTriggerScheduleLister) FactoryTriggerSchedules(namespace string) FactoryTriggerScheduleNamespaceLister {
	return factoryTriggerScheduleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FactoryTriggerScheduleNamespaceLister helps list and get FactoryTriggerSchedules.
// All objects returned here must be treated as read-only.
type FactoryTriggerScheduleNamespaceLister interface {
	// List lists all FactoryTriggerSchedules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryTriggerSchedule, err error)
	// Get retrieves the FactoryTriggerSchedule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FactoryTriggerSchedule, error)
	FactoryTriggerScheduleNamespaceListerExpansion
}

// factoryTriggerScheduleNamespaceLister implements the FactoryTriggerScheduleNamespaceLister
// interface.
type factoryTriggerScheduleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FactoryTriggerSchedules in the indexer for a given namespace.
func (s factoryTriggerScheduleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryTriggerSchedule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryTriggerSchedule))
	})
	return ret, err
}

// Get retrieves the FactoryTriggerSchedule from the indexer for a given namespace and name.
func (s factoryTriggerScheduleNamespaceLister) Get(name string) (*v1alpha1.FactoryTriggerSchedule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("factorytriggerschedule"), name)
	}
	return obj.(*v1alpha1.FactoryTriggerSchedule), nil
}
