/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ShareDatasetKustoClusterLister helps list ShareDatasetKustoClusters.
// All objects returned here must be treated as read-only.
type ShareDatasetKustoClusterLister interface {
	// List lists all ShareDatasetKustoClusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ShareDatasetKustoCluster, err error)
	// ShareDatasetKustoClusters returns an object that can list and get ShareDatasetKustoClusters.
	ShareDatasetKustoClusters(namespace string) ShareDatasetKustoClusterNamespaceLister
	ShareDatasetKustoClusterListerExpansion
}

// shareDatasetKustoClusterLister implements the ShareDatasetKustoClusterLister interface.
type shareDatasetKustoClusterLister struct {
	indexer cache.Indexer
}

// NewShareDatasetKustoClusterLister returns a new ShareDatasetKustoClusterLister.
func NewShareDatasetKustoClusterLister(indexer cache.Indexer) ShareDatasetKustoClusterLister {
	return &shareDatasetKustoClusterLister{indexer: indexer}
}

// List lists all ShareDatasetKustoClusters in the indexer.
func (s *shareDatasetKustoClusterLister) List(selector labels.Selector) (ret []*v1alpha1.ShareDatasetKustoCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ShareDatasetKustoCluster))
	})
	return ret, err
}

// ShareDatasetKustoClusters returns an object that can list and get ShareDatasetKustoClusters.
func (s *shareDatasetKustoClusterLister) ShareDatasetKustoClusters(namespace string) ShareDatasetKustoClusterNamespaceLister {
	return shareDatasetKustoClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ShareDatasetKustoClusterNamespaceLister helps list and get ShareDatasetKustoClusters.
// All objects returned here must be treated as read-only.
type ShareDatasetKustoClusterNamespaceLister interface {
	// List lists all ShareDatasetKustoClusters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ShareDatasetKustoCluster, err error)
	// Get retrieves the ShareDatasetKustoCluster from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ShareDatasetKustoCluster, error)
	ShareDatasetKustoClusterNamespaceListerExpansion
}

// shareDatasetKustoClusterNamespaceLister implements the ShareDatasetKustoClusterNamespaceLister
// interface.
type shareDatasetKustoClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ShareDatasetKustoClusters in the indexer for a given namespace.
func (s shareDatasetKustoClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ShareDatasetKustoCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ShareDatasetKustoCluster))
	})
	return ret, err
}

// Get retrieves the ShareDatasetKustoCluster from the indexer for a given namespace and name.
func (s shareDatasetKustoClusterNamespaceLister) Get(name string) (*v1alpha1.ShareDatasetKustoCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sharedatasetkustocluster"), name)
	}
	return obj.(*v1alpha1.ShareDatasetKustoCluster), nil
}
