/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ShareDatasetBlobStorageLister helps list ShareDatasetBlobStorages.
// All objects returned here must be treated as read-only.
type ShareDatasetBlobStorageLister interface {
	// List lists all ShareDatasetBlobStorages in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ShareDatasetBlobStorage, err error)
	// ShareDatasetBlobStorages returns an object that can list and get ShareDatasetBlobStorages.
	ShareDatasetBlobStorages(namespace string) ShareDatasetBlobStorageNamespaceLister
	ShareDatasetBlobStorageListerExpansion
}

// shareDatasetBlobStorageLister implements the ShareDatasetBlobStorageLister interface.
type shareDatasetBlobStorageLister struct {
	indexer cache.Indexer
}

// NewShareDatasetBlobStorageLister returns a new ShareDatasetBlobStorageLister.
func NewShareDatasetBlobStorageLister(indexer cache.Indexer) ShareDatasetBlobStorageLister {
	return &shareDatasetBlobStorageLister{indexer: indexer}
}

// List lists all ShareDatasetBlobStorages in the indexer.
func (s *shareDatasetBlobStorageLister) List(selector labels.Selector) (ret []*v1alpha1.ShareDatasetBlobStorage, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ShareDatasetBlobStorage))
	})
	return ret, err
}

// ShareDatasetBlobStorages returns an object that can list and get ShareDatasetBlobStorages.
func (s *shareDatasetBlobStorageLister) ShareDatasetBlobStorages(namespace string) ShareDatasetBlobStorageNamespaceLister {
	return shareDatasetBlobStorageNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ShareDatasetBlobStorageNamespaceLister helps list and get ShareDatasetBlobStorages.
// All objects returned here must be treated as read-only.
type ShareDatasetBlobStorageNamespaceLister interface {
	// List lists all ShareDatasetBlobStorages in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ShareDatasetBlobStorage, err error)
	// Get retrieves the ShareDatasetBlobStorage from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ShareDatasetBlobStorage, error)
	ShareDatasetBlobStorageNamespaceListerExpansion
}

// shareDatasetBlobStorageNamespaceLister implements the ShareDatasetBlobStorageNamespaceLister
// interface.
type shareDatasetBlobStorageNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ShareDatasetBlobStorages in the indexer for a given namespace.
func (s shareDatasetBlobStorageNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ShareDatasetBlobStorage, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ShareDatasetBlobStorage))
	})
	return ret, err
}

// Get retrieves the ShareDatasetBlobStorage from the indexer for a given namespace and name.
func (s shareDatasetBlobStorageNamespaceLister) Get(name string) (*v1alpha1.ShareDatasetBlobStorage, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sharedatasetblobstorage"), name)
	}
	return obj.(*v1alpha1.ShareDatasetBlobStorage), nil
}
