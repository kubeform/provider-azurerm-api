/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LakeStoreFirewallRuleLister helps list LakeStoreFirewallRules.
// All objects returned here must be treated as read-only.
type LakeStoreFirewallRuleLister interface {
	// List lists all LakeStoreFirewallRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LakeStoreFirewallRule, err error)
	// LakeStoreFirewallRules returns an object that can list and get LakeStoreFirewallRules.
	LakeStoreFirewallRules(namespace string) LakeStoreFirewallRuleNamespaceLister
	LakeStoreFirewallRuleListerExpansion
}

// lakeStoreFirewallRuleLister implements the LakeStoreFirewallRuleLister interface.
type lakeStoreFirewallRuleLister struct {
	indexer cache.Indexer
}

// NewLakeStoreFirewallRuleLister returns a new LakeStoreFirewallRuleLister.
func NewLakeStoreFirewallRuleLister(indexer cache.Indexer) LakeStoreFirewallRuleLister {
	return &lakeStoreFirewallRuleLister{indexer: indexer}
}

// List lists all LakeStoreFirewallRules in the indexer.
func (s *lakeStoreFirewallRuleLister) List(selector labels.Selector) (ret []*v1alpha1.LakeStoreFirewallRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LakeStoreFirewallRule))
	})
	return ret, err
}

// LakeStoreFirewallRules returns an object that can list and get LakeStoreFirewallRules.
func (s *lakeStoreFirewallRuleLister) LakeStoreFirewallRules(namespace string) LakeStoreFirewallRuleNamespaceLister {
	return lakeStoreFirewallRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LakeStoreFirewallRuleNamespaceLister helps list and get LakeStoreFirewallRules.
// All objects returned here must be treated as read-only.
type LakeStoreFirewallRuleNamespaceLister interface {
	// List lists all LakeStoreFirewallRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LakeStoreFirewallRule, err error)
	// Get retrieves the LakeStoreFirewallRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LakeStoreFirewallRule, error)
	LakeStoreFirewallRuleNamespaceListerExpansion
}

// lakeStoreFirewallRuleNamespaceLister implements the LakeStoreFirewallRuleNamespaceLister
// interface.
type lakeStoreFirewallRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LakeStoreFirewallRules in the indexer for a given namespace.
func (s lakeStoreFirewallRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LakeStoreFirewallRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LakeStoreFirewallRule))
	})
	return ret, err
}

// Get retrieves the LakeStoreFirewallRule from the indexer for a given namespace and name.
func (s lakeStoreFirewallRuleNamespaceLister) Get(name string) (*v1alpha1.LakeStoreFirewallRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("lakestorefirewallrule"), name)
	}
	return obj.(*v1alpha1.LakeStoreFirewallRule), nil
}
