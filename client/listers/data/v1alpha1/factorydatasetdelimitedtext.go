/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FactoryDatasetDelimitedTextLister helps list FactoryDatasetDelimitedTexts.
// All objects returned here must be treated as read-only.
type FactoryDatasetDelimitedTextLister interface {
	// List lists all FactoryDatasetDelimitedTexts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryDatasetDelimitedText, err error)
	// FactoryDatasetDelimitedTexts returns an object that can list and get FactoryDatasetDelimitedTexts.
	FactoryDatasetDelimitedTexts(namespace string) FactoryDatasetDelimitedTextNamespaceLister
	FactoryDatasetDelimitedTextListerExpansion
}

// factoryDatasetDelimitedTextLister implements the FactoryDatasetDelimitedTextLister interface.
type factoryDatasetDelimitedTextLister struct {
	indexer cache.Indexer
}

// NewFactoryDatasetDelimitedTextLister returns a new FactoryDatasetDelimitedTextLister.
func NewFactoryDatasetDelimitedTextLister(indexer cache.Indexer) FactoryDatasetDelimitedTextLister {
	return &factoryDatasetDelimitedTextLister{indexer: indexer}
}

// List lists all FactoryDatasetDelimitedTexts in the indexer.
func (s *factoryDatasetDelimitedTextLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryDatasetDelimitedText, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryDatasetDelimitedText))
	})
	return ret, err
}

// FactoryDatasetDelimitedTexts returns an object that can list and get FactoryDatasetDelimitedTexts.
func (s *factoryDatasetDelimitedTextLister) FactoryDatasetDelimitedTexts(namespace string) FactoryDatasetDelimitedTextNamespaceLister {
	return factoryDatasetDelimitedTextNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FactoryDatasetDelimitedTextNamespaceLister helps list and get FactoryDatasetDelimitedTexts.
// All objects returned here must be treated as read-only.
type FactoryDatasetDelimitedTextNamespaceLister interface {
	// List lists all FactoryDatasetDelimitedTexts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryDatasetDelimitedText, err error)
	// Get retrieves the FactoryDatasetDelimitedText from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FactoryDatasetDelimitedText, error)
	FactoryDatasetDelimitedTextNamespaceListerExpansion
}

// factoryDatasetDelimitedTextNamespaceLister implements the FactoryDatasetDelimitedTextNamespaceLister
// interface.
type factoryDatasetDelimitedTextNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FactoryDatasetDelimitedTexts in the indexer for a given namespace.
func (s factoryDatasetDelimitedTextNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryDatasetDelimitedText, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryDatasetDelimitedText))
	})
	return ret, err
}

// Get retrieves the FactoryDatasetDelimitedText from the indexer for a given namespace and name.
func (s factoryDatasetDelimitedTextNamespaceLister) Get(name string) (*v1alpha1.FactoryDatasetDelimitedText, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("factorydatasetdelimitedtext"), name)
	}
	return obj.(*v1alpha1.FactoryDatasetDelimitedText), nil
}
