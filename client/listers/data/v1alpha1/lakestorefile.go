/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LakeStoreFileLister helps list LakeStoreFiles.
// All objects returned here must be treated as read-only.
type LakeStoreFileLister interface {
	// List lists all LakeStoreFiles in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LakeStoreFile, err error)
	// LakeStoreFiles returns an object that can list and get LakeStoreFiles.
	LakeStoreFiles(namespace string) LakeStoreFileNamespaceLister
	LakeStoreFileListerExpansion
}

// lakeStoreFileLister implements the LakeStoreFileLister interface.
type lakeStoreFileLister struct {
	indexer cache.Indexer
}

// NewLakeStoreFileLister returns a new LakeStoreFileLister.
func NewLakeStoreFileLister(indexer cache.Indexer) LakeStoreFileLister {
	return &lakeStoreFileLister{indexer: indexer}
}

// List lists all LakeStoreFiles in the indexer.
func (s *lakeStoreFileLister) List(selector labels.Selector) (ret []*v1alpha1.LakeStoreFile, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LakeStoreFile))
	})
	return ret, err
}

// LakeStoreFiles returns an object that can list and get LakeStoreFiles.
func (s *lakeStoreFileLister) LakeStoreFiles(namespace string) LakeStoreFileNamespaceLister {
	return lakeStoreFileNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LakeStoreFileNamespaceLister helps list and get LakeStoreFiles.
// All objects returned here must be treated as read-only.
type LakeStoreFileNamespaceLister interface {
	// List lists all LakeStoreFiles in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LakeStoreFile, err error)
	// Get retrieves the LakeStoreFile from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LakeStoreFile, error)
	LakeStoreFileNamespaceListerExpansion
}

// lakeStoreFileNamespaceLister implements the LakeStoreFileNamespaceLister
// interface.
type lakeStoreFileNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LakeStoreFiles in the indexer for a given namespace.
func (s lakeStoreFileNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LakeStoreFile, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LakeStoreFile))
	})
	return ret, err
}

// Get retrieves the LakeStoreFile from the indexer for a given namespace and name.
func (s lakeStoreFileNamespaceLister) Get(name string) (*v1alpha1.LakeStoreFile, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("lakestorefile"), name)
	}
	return obj.(*v1alpha1.LakeStoreFile), nil
}
