/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FactoryCustomDatasetLister helps list FactoryCustomDatasets.
// All objects returned here must be treated as read-only.
type FactoryCustomDatasetLister interface {
	// List lists all FactoryCustomDatasets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryCustomDataset, err error)
	// FactoryCustomDatasets returns an object that can list and get FactoryCustomDatasets.
	FactoryCustomDatasets(namespace string) FactoryCustomDatasetNamespaceLister
	FactoryCustomDatasetListerExpansion
}

// factoryCustomDatasetLister implements the FactoryCustomDatasetLister interface.
type factoryCustomDatasetLister struct {
	indexer cache.Indexer
}

// NewFactoryCustomDatasetLister returns a new FactoryCustomDatasetLister.
func NewFactoryCustomDatasetLister(indexer cache.Indexer) FactoryCustomDatasetLister {
	return &factoryCustomDatasetLister{indexer: indexer}
}

// List lists all FactoryCustomDatasets in the indexer.
func (s *factoryCustomDatasetLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryCustomDataset, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryCustomDataset))
	})
	return ret, err
}

// FactoryCustomDatasets returns an object that can list and get FactoryCustomDatasets.
func (s *factoryCustomDatasetLister) FactoryCustomDatasets(namespace string) FactoryCustomDatasetNamespaceLister {
	return factoryCustomDatasetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FactoryCustomDatasetNamespaceLister helps list and get FactoryCustomDatasets.
// All objects returned here must be treated as read-only.
type FactoryCustomDatasetNamespaceLister interface {
	// List lists all FactoryCustomDatasets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryCustomDataset, err error)
	// Get retrieves the FactoryCustomDataset from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FactoryCustomDataset, error)
	FactoryCustomDatasetNamespaceListerExpansion
}

// factoryCustomDatasetNamespaceLister implements the FactoryCustomDatasetNamespaceLister
// interface.
type factoryCustomDatasetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FactoryCustomDatasets in the indexer for a given namespace.
func (s factoryCustomDatasetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryCustomDataset, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryCustomDataset))
	})
	return ret, err
}

// Get retrieves the FactoryCustomDataset from the indexer for a given namespace and name.
func (s factoryCustomDatasetNamespaceLister) Get(name string) (*v1alpha1.FactoryCustomDataset, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("factorycustomdataset"), name)
	}
	return obj.(*v1alpha1.FactoryCustomDataset), nil
}
