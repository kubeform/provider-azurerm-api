/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FactoryLinkedServiceOdataLister helps list FactoryLinkedServiceOdatas.
// All objects returned here must be treated as read-only.
type FactoryLinkedServiceOdataLister interface {
	// List lists all FactoryLinkedServiceOdatas in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryLinkedServiceOdata, err error)
	// FactoryLinkedServiceOdatas returns an object that can list and get FactoryLinkedServiceOdatas.
	FactoryLinkedServiceOdatas(namespace string) FactoryLinkedServiceOdataNamespaceLister
	FactoryLinkedServiceOdataListerExpansion
}

// factoryLinkedServiceOdataLister implements the FactoryLinkedServiceOdataLister interface.
type factoryLinkedServiceOdataLister struct {
	indexer cache.Indexer
}

// NewFactoryLinkedServiceOdataLister returns a new FactoryLinkedServiceOdataLister.
func NewFactoryLinkedServiceOdataLister(indexer cache.Indexer) FactoryLinkedServiceOdataLister {
	return &factoryLinkedServiceOdataLister{indexer: indexer}
}

// List lists all FactoryLinkedServiceOdatas in the indexer.
func (s *factoryLinkedServiceOdataLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryLinkedServiceOdata, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryLinkedServiceOdata))
	})
	return ret, err
}

// FactoryLinkedServiceOdatas returns an object that can list and get FactoryLinkedServiceOdatas.
func (s *factoryLinkedServiceOdataLister) FactoryLinkedServiceOdatas(namespace string) FactoryLinkedServiceOdataNamespaceLister {
	return factoryLinkedServiceOdataNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FactoryLinkedServiceOdataNamespaceLister helps list and get FactoryLinkedServiceOdatas.
// All objects returned here must be treated as read-only.
type FactoryLinkedServiceOdataNamespaceLister interface {
	// List lists all FactoryLinkedServiceOdatas in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryLinkedServiceOdata, err error)
	// Get retrieves the FactoryLinkedServiceOdata from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FactoryLinkedServiceOdata, error)
	FactoryLinkedServiceOdataNamespaceListerExpansion
}

// factoryLinkedServiceOdataNamespaceLister implements the FactoryLinkedServiceOdataNamespaceLister
// interface.
type factoryLinkedServiceOdataNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FactoryLinkedServiceOdatas in the indexer for a given namespace.
func (s factoryLinkedServiceOdataNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryLinkedServiceOdata, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryLinkedServiceOdata))
	})
	return ret, err
}

// Get retrieves the FactoryLinkedServiceOdata from the indexer for a given namespace and name.
func (s factoryLinkedServiceOdataNamespaceLister) Get(name string) (*v1alpha1.FactoryLinkedServiceOdata, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("factorylinkedserviceodata"), name)
	}
	return obj.(*v1alpha1.FactoryLinkedServiceOdata), nil
}
