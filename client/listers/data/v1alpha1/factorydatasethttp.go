/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FactoryDatasetHTTPLister helps list FactoryDatasetHTTPs.
// All objects returned here must be treated as read-only.
type FactoryDatasetHTTPLister interface {
	// List lists all FactoryDatasetHTTPs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryDatasetHTTP, err error)
	// FactoryDatasetHTTPs returns an object that can list and get FactoryDatasetHTTPs.
	FactoryDatasetHTTPs(namespace string) FactoryDatasetHTTPNamespaceLister
	FactoryDatasetHTTPListerExpansion
}

// factoryDatasetHTTPLister implements the FactoryDatasetHTTPLister interface.
type factoryDatasetHTTPLister struct {
	indexer cache.Indexer
}

// NewFactoryDatasetHTTPLister returns a new FactoryDatasetHTTPLister.
func NewFactoryDatasetHTTPLister(indexer cache.Indexer) FactoryDatasetHTTPLister {
	return &factoryDatasetHTTPLister{indexer: indexer}
}

// List lists all FactoryDatasetHTTPs in the indexer.
func (s *factoryDatasetHTTPLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryDatasetHTTP, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryDatasetHTTP))
	})
	return ret, err
}

// FactoryDatasetHTTPs returns an object that can list and get FactoryDatasetHTTPs.
func (s *factoryDatasetHTTPLister) FactoryDatasetHTTPs(namespace string) FactoryDatasetHTTPNamespaceLister {
	return factoryDatasetHTTPNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FactoryDatasetHTTPNamespaceLister helps list and get FactoryDatasetHTTPs.
// All objects returned here must be treated as read-only.
type FactoryDatasetHTTPNamespaceLister interface {
	// List lists all FactoryDatasetHTTPs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryDatasetHTTP, err error)
	// Get retrieves the FactoryDatasetHTTP from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FactoryDatasetHTTP, error)
	FactoryDatasetHTTPNamespaceListerExpansion
}

// factoryDatasetHTTPNamespaceLister implements the FactoryDatasetHTTPNamespaceLister
// interface.
type factoryDatasetHTTPNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FactoryDatasetHTTPs in the indexer for a given namespace.
func (s factoryDatasetHTTPNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryDatasetHTTP, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryDatasetHTTP))
	})
	return ret, err
}

// Get retrieves the FactoryDatasetHTTP from the indexer for a given namespace and name.
func (s factoryDatasetHTTPNamespaceLister) Get(name string) (*v1alpha1.FactoryDatasetHTTP, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("factorydatasethttp"), name)
	}
	return obj.(*v1alpha1.FactoryDatasetHTTP), nil
}
