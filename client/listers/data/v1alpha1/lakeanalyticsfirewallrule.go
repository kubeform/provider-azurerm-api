/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LakeAnalyticsFirewallRuleLister helps list LakeAnalyticsFirewallRules.
// All objects returned here must be treated as read-only.
type LakeAnalyticsFirewallRuleLister interface {
	// List lists all LakeAnalyticsFirewallRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LakeAnalyticsFirewallRule, err error)
	// LakeAnalyticsFirewallRules returns an object that can list and get LakeAnalyticsFirewallRules.
	LakeAnalyticsFirewallRules(namespace string) LakeAnalyticsFirewallRuleNamespaceLister
	LakeAnalyticsFirewallRuleListerExpansion
}

// lakeAnalyticsFirewallRuleLister implements the LakeAnalyticsFirewallRuleLister interface.
type lakeAnalyticsFirewallRuleLister struct {
	indexer cache.Indexer
}

// NewLakeAnalyticsFirewallRuleLister returns a new LakeAnalyticsFirewallRuleLister.
func NewLakeAnalyticsFirewallRuleLister(indexer cache.Indexer) LakeAnalyticsFirewallRuleLister {
	return &lakeAnalyticsFirewallRuleLister{indexer: indexer}
}

// List lists all LakeAnalyticsFirewallRules in the indexer.
func (s *lakeAnalyticsFirewallRuleLister) List(selector labels.Selector) (ret []*v1alpha1.LakeAnalyticsFirewallRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LakeAnalyticsFirewallRule))
	})
	return ret, err
}

// LakeAnalyticsFirewallRules returns an object that can list and get LakeAnalyticsFirewallRules.
func (s *lakeAnalyticsFirewallRuleLister) LakeAnalyticsFirewallRules(namespace string) LakeAnalyticsFirewallRuleNamespaceLister {
	return lakeAnalyticsFirewallRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LakeAnalyticsFirewallRuleNamespaceLister helps list and get LakeAnalyticsFirewallRules.
// All objects returned here must be treated as read-only.
type LakeAnalyticsFirewallRuleNamespaceLister interface {
	// List lists all LakeAnalyticsFirewallRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LakeAnalyticsFirewallRule, err error)
	// Get retrieves the LakeAnalyticsFirewallRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LakeAnalyticsFirewallRule, error)
	LakeAnalyticsFirewallRuleNamespaceListerExpansion
}

// lakeAnalyticsFirewallRuleNamespaceLister implements the LakeAnalyticsFirewallRuleNamespaceLister
// interface.
type lakeAnalyticsFirewallRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LakeAnalyticsFirewallRules in the indexer for a given namespace.
func (s lakeAnalyticsFirewallRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LakeAnalyticsFirewallRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LakeAnalyticsFirewallRule))
	})
	return ret, err
}

// Get retrieves the LakeAnalyticsFirewallRule from the indexer for a given namespace and name.
func (s lakeAnalyticsFirewallRuleNamespaceLister) Get(name string) (*v1alpha1.LakeAnalyticsFirewallRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("lakeanalyticsfirewallrule"), name)
	}
	return obj.(*v1alpha1.LakeAnalyticsFirewallRule), nil
}
