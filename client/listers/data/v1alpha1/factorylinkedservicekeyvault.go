/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FactoryLinkedServiceKeyVaultLister helps list FactoryLinkedServiceKeyVaults.
// All objects returned here must be treated as read-only.
type FactoryLinkedServiceKeyVaultLister interface {
	// List lists all FactoryLinkedServiceKeyVaults in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryLinkedServiceKeyVault, err error)
	// FactoryLinkedServiceKeyVaults returns an object that can list and get FactoryLinkedServiceKeyVaults.
	FactoryLinkedServiceKeyVaults(namespace string) FactoryLinkedServiceKeyVaultNamespaceLister
	FactoryLinkedServiceKeyVaultListerExpansion
}

// factoryLinkedServiceKeyVaultLister implements the FactoryLinkedServiceKeyVaultLister interface.
type factoryLinkedServiceKeyVaultLister struct {
	indexer cache.Indexer
}

// NewFactoryLinkedServiceKeyVaultLister returns a new FactoryLinkedServiceKeyVaultLister.
func NewFactoryLinkedServiceKeyVaultLister(indexer cache.Indexer) FactoryLinkedServiceKeyVaultLister {
	return &factoryLinkedServiceKeyVaultLister{indexer: indexer}
}

// List lists all FactoryLinkedServiceKeyVaults in the indexer.
func (s *factoryLinkedServiceKeyVaultLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryLinkedServiceKeyVault, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryLinkedServiceKeyVault))
	})
	return ret, err
}

// FactoryLinkedServiceKeyVaults returns an object that can list and get FactoryLinkedServiceKeyVaults.
func (s *factoryLinkedServiceKeyVaultLister) FactoryLinkedServiceKeyVaults(namespace string) FactoryLinkedServiceKeyVaultNamespaceLister {
	return factoryLinkedServiceKeyVaultNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FactoryLinkedServiceKeyVaultNamespaceLister helps list and get FactoryLinkedServiceKeyVaults.
// All objects returned here must be treated as read-only.
type FactoryLinkedServiceKeyVaultNamespaceLister interface {
	// List lists all FactoryLinkedServiceKeyVaults in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryLinkedServiceKeyVault, err error)
	// Get retrieves the FactoryLinkedServiceKeyVault from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FactoryLinkedServiceKeyVault, error)
	FactoryLinkedServiceKeyVaultNamespaceListerExpansion
}

// factoryLinkedServiceKeyVaultNamespaceLister implements the FactoryLinkedServiceKeyVaultNamespaceLister
// interface.
type factoryLinkedServiceKeyVaultNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FactoryLinkedServiceKeyVaults in the indexer for a given namespace.
func (s factoryLinkedServiceKeyVaultNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryLinkedServiceKeyVault, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryLinkedServiceKeyVault))
	})
	return ret, err
}

// Get retrieves the FactoryLinkedServiceKeyVault from the indexer for a given namespace and name.
func (s factoryLinkedServiceKeyVaultNamespaceLister) Get(name string) (*v1alpha1.FactoryLinkedServiceKeyVault, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("factorylinkedservicekeyvault"), name)
	}
	return obj.(*v1alpha1.FactoryLinkedServiceKeyVault), nil
}
