/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ShareAccountLister helps list ShareAccounts.
// All objects returned here must be treated as read-only.
type ShareAccountLister interface {
	// List lists all ShareAccounts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ShareAccount, err error)
	// ShareAccounts returns an object that can list and get ShareAccounts.
	ShareAccounts(namespace string) ShareAccountNamespaceLister
	ShareAccountListerExpansion
}

// shareAccountLister implements the ShareAccountLister interface.
type shareAccountLister struct {
	indexer cache.Indexer
}

// NewShareAccountLister returns a new ShareAccountLister.
func NewShareAccountLister(indexer cache.Indexer) ShareAccountLister {
	return &shareAccountLister{indexer: indexer}
}

// List lists all ShareAccounts in the indexer.
func (s *shareAccountLister) List(selector labels.Selector) (ret []*v1alpha1.ShareAccount, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ShareAccount))
	})
	return ret, err
}

// ShareAccounts returns an object that can list and get ShareAccounts.
func (s *shareAccountLister) ShareAccounts(namespace string) ShareAccountNamespaceLister {
	return shareAccountNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ShareAccountNamespaceLister helps list and get ShareAccounts.
// All objects returned here must be treated as read-only.
type ShareAccountNamespaceLister interface {
	// List lists all ShareAccounts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ShareAccount, err error)
	// Get retrieves the ShareAccount from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ShareAccount, error)
	ShareAccountNamespaceListerExpansion
}

// shareAccountNamespaceLister implements the ShareAccountNamespaceLister
// interface.
type shareAccountNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ShareAccounts in the indexer for a given namespace.
func (s shareAccountNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ShareAccount, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ShareAccount))
	})
	return ret, err
}

// Get retrieves the ShareAccount from the indexer for a given namespace and name.
func (s shareAccountNamespaceLister) Get(name string) (*v1alpha1.ShareAccount, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("shareaccount"), name)
	}
	return obj.(*v1alpha1.ShareAccount), nil
}
