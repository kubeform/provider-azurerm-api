/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FactoryTriggerBlobEventLister helps list FactoryTriggerBlobEvents.
// All objects returned here must be treated as read-only.
type FactoryTriggerBlobEventLister interface {
	// List lists all FactoryTriggerBlobEvents in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryTriggerBlobEvent, err error)
	// FactoryTriggerBlobEvents returns an object that can list and get FactoryTriggerBlobEvents.
	FactoryTriggerBlobEvents(namespace string) FactoryTriggerBlobEventNamespaceLister
	FactoryTriggerBlobEventListerExpansion
}

// factoryTriggerBlobEventLister implements the FactoryTriggerBlobEventLister interface.
type factoryTriggerBlobEventLister struct {
	indexer cache.Indexer
}

// NewFactoryTriggerBlobEventLister returns a new FactoryTriggerBlobEventLister.
func NewFactoryTriggerBlobEventLister(indexer cache.Indexer) FactoryTriggerBlobEventLister {
	return &factoryTriggerBlobEventLister{indexer: indexer}
}

// List lists all FactoryTriggerBlobEvents in the indexer.
func (s *factoryTriggerBlobEventLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryTriggerBlobEvent, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryTriggerBlobEvent))
	})
	return ret, err
}

// FactoryTriggerBlobEvents returns an object that can list and get FactoryTriggerBlobEvents.
func (s *factoryTriggerBlobEventLister) FactoryTriggerBlobEvents(namespace string) FactoryTriggerBlobEventNamespaceLister {
	return factoryTriggerBlobEventNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FactoryTriggerBlobEventNamespaceLister helps list and get FactoryTriggerBlobEvents.
// All objects returned here must be treated as read-only.
type FactoryTriggerBlobEventNamespaceLister interface {
	// List lists all FactoryTriggerBlobEvents in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryTriggerBlobEvent, err error)
	// Get retrieves the FactoryTriggerBlobEvent from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FactoryTriggerBlobEvent, error)
	FactoryTriggerBlobEventNamespaceListerExpansion
}

// factoryTriggerBlobEventNamespaceLister implements the FactoryTriggerBlobEventNamespaceLister
// interface.
type factoryTriggerBlobEventNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FactoryTriggerBlobEvents in the indexer for a given namespace.
func (s factoryTriggerBlobEventNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryTriggerBlobEvent, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryTriggerBlobEvent))
	})
	return ret, err
}

// Get retrieves the FactoryTriggerBlobEvent from the indexer for a given namespace and name.
func (s factoryTriggerBlobEventNamespaceLister) Get(name string) (*v1alpha1.FactoryTriggerBlobEvent, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("factorytriggerblobevent"), name)
	}
	return obj.(*v1alpha1.FactoryTriggerBlobEvent), nil
}
