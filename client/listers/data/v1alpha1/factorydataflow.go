/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FactoryDataFlowLister helps list FactoryDataFlows.
// All objects returned here must be treated as read-only.
type FactoryDataFlowLister interface {
	// List lists all FactoryDataFlows in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryDataFlow, err error)
	// FactoryDataFlows returns an object that can list and get FactoryDataFlows.
	FactoryDataFlows(namespace string) FactoryDataFlowNamespaceLister
	FactoryDataFlowListerExpansion
}

// factoryDataFlowLister implements the FactoryDataFlowLister interface.
type factoryDataFlowLister struct {
	indexer cache.Indexer
}

// NewFactoryDataFlowLister returns a new FactoryDataFlowLister.
func NewFactoryDataFlowLister(indexer cache.Indexer) FactoryDataFlowLister {
	return &factoryDataFlowLister{indexer: indexer}
}

// List lists all FactoryDataFlows in the indexer.
func (s *factoryDataFlowLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryDataFlow, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryDataFlow))
	})
	return ret, err
}

// FactoryDataFlows returns an object that can list and get FactoryDataFlows.
func (s *factoryDataFlowLister) FactoryDataFlows(namespace string) FactoryDataFlowNamespaceLister {
	return factoryDataFlowNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FactoryDataFlowNamespaceLister helps list and get FactoryDataFlows.
// All objects returned here must be treated as read-only.
type FactoryDataFlowNamespaceLister interface {
	// List lists all FactoryDataFlows in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryDataFlow, err error)
	// Get retrieves the FactoryDataFlow from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FactoryDataFlow, error)
	FactoryDataFlowNamespaceListerExpansion
}

// factoryDataFlowNamespaceLister implements the FactoryDataFlowNamespaceLister
// interface.
type factoryDataFlowNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FactoryDataFlows in the indexer for a given namespace.
func (s factoryDataFlowNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryDataFlow, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryDataFlow))
	})
	return ret, err
}

// Get retrieves the FactoryDataFlow from the indexer for a given namespace and name.
func (s factoryDataFlowNamespaceLister) Get(name string) (*v1alpha1.FactoryDataFlow, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("factorydataflow"), name)
	}
	return obj.(*v1alpha1.FactoryDataFlow), nil
}
