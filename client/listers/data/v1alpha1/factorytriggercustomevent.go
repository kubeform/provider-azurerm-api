/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FactoryTriggerCustomEventLister helps list FactoryTriggerCustomEvents.
// All objects returned here must be treated as read-only.
type FactoryTriggerCustomEventLister interface {
	// List lists all FactoryTriggerCustomEvents in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryTriggerCustomEvent, err error)
	// FactoryTriggerCustomEvents returns an object that can list and get FactoryTriggerCustomEvents.
	FactoryTriggerCustomEvents(namespace string) FactoryTriggerCustomEventNamespaceLister
	FactoryTriggerCustomEventListerExpansion
}

// factoryTriggerCustomEventLister implements the FactoryTriggerCustomEventLister interface.
type factoryTriggerCustomEventLister struct {
	indexer cache.Indexer
}

// NewFactoryTriggerCustomEventLister returns a new FactoryTriggerCustomEventLister.
func NewFactoryTriggerCustomEventLister(indexer cache.Indexer) FactoryTriggerCustomEventLister {
	return &factoryTriggerCustomEventLister{indexer: indexer}
}

// List lists all FactoryTriggerCustomEvents in the indexer.
func (s *factoryTriggerCustomEventLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryTriggerCustomEvent, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryTriggerCustomEvent))
	})
	return ret, err
}

// FactoryTriggerCustomEvents returns an object that can list and get FactoryTriggerCustomEvents.
func (s *factoryTriggerCustomEventLister) FactoryTriggerCustomEvents(namespace string) FactoryTriggerCustomEventNamespaceLister {
	return factoryTriggerCustomEventNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FactoryTriggerCustomEventNamespaceLister helps list and get FactoryTriggerCustomEvents.
// All objects returned here must be treated as read-only.
type FactoryTriggerCustomEventNamespaceLister interface {
	// List lists all FactoryTriggerCustomEvents in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryTriggerCustomEvent, err error)
	// Get retrieves the FactoryTriggerCustomEvent from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FactoryTriggerCustomEvent, error)
	FactoryTriggerCustomEventNamespaceListerExpansion
}

// factoryTriggerCustomEventNamespaceLister implements the FactoryTriggerCustomEventNamespaceLister
// interface.
type factoryTriggerCustomEventNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FactoryTriggerCustomEvents in the indexer for a given namespace.
func (s factoryTriggerCustomEventNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryTriggerCustomEvent, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryTriggerCustomEvent))
	})
	return ret, err
}

// Get retrieves the FactoryTriggerCustomEvent from the indexer for a given namespace and name.
func (s factoryTriggerCustomEventNamespaceLister) Get(name string) (*v1alpha1.FactoryTriggerCustomEvent, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("factorytriggercustomevent"), name)
	}
	return obj.(*v1alpha1.FactoryTriggerCustomEvent), nil
}
