/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProtectionBackupInstanceDiskLister helps list ProtectionBackupInstanceDisks.
// All objects returned here must be treated as read-only.
type ProtectionBackupInstanceDiskLister interface {
	// List lists all ProtectionBackupInstanceDisks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProtectionBackupInstanceDisk, err error)
	// ProtectionBackupInstanceDisks returns an object that can list and get ProtectionBackupInstanceDisks.
	ProtectionBackupInstanceDisks(namespace string) ProtectionBackupInstanceDiskNamespaceLister
	ProtectionBackupInstanceDiskListerExpansion
}

// protectionBackupInstanceDiskLister implements the ProtectionBackupInstanceDiskLister interface.
type protectionBackupInstanceDiskLister struct {
	indexer cache.Indexer
}

// NewProtectionBackupInstanceDiskLister returns a new ProtectionBackupInstanceDiskLister.
func NewProtectionBackupInstanceDiskLister(indexer cache.Indexer) ProtectionBackupInstanceDiskLister {
	return &protectionBackupInstanceDiskLister{indexer: indexer}
}

// List lists all ProtectionBackupInstanceDisks in the indexer.
func (s *protectionBackupInstanceDiskLister) List(selector labels.Selector) (ret []*v1alpha1.ProtectionBackupInstanceDisk, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProtectionBackupInstanceDisk))
	})
	return ret, err
}

// ProtectionBackupInstanceDisks returns an object that can list and get ProtectionBackupInstanceDisks.
func (s *protectionBackupInstanceDiskLister) ProtectionBackupInstanceDisks(namespace string) ProtectionBackupInstanceDiskNamespaceLister {
	return protectionBackupInstanceDiskNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProtectionBackupInstanceDiskNamespaceLister helps list and get ProtectionBackupInstanceDisks.
// All objects returned here must be treated as read-only.
type ProtectionBackupInstanceDiskNamespaceLister interface {
	// List lists all ProtectionBackupInstanceDisks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProtectionBackupInstanceDisk, err error)
	// Get retrieves the ProtectionBackupInstanceDisk from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ProtectionBackupInstanceDisk, error)
	ProtectionBackupInstanceDiskNamespaceListerExpansion
}

// protectionBackupInstanceDiskNamespaceLister implements the ProtectionBackupInstanceDiskNamespaceLister
// interface.
type protectionBackupInstanceDiskNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProtectionBackupInstanceDisks in the indexer for a given namespace.
func (s protectionBackupInstanceDiskNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ProtectionBackupInstanceDisk, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProtectionBackupInstanceDisk))
	})
	return ret, err
}

// Get retrieves the ProtectionBackupInstanceDisk from the indexer for a given namespace and name.
func (s protectionBackupInstanceDiskNamespaceLister) Get(name string) (*v1alpha1.ProtectionBackupInstanceDisk, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("protectionbackupinstancedisk"), name)
	}
	return obj.(*v1alpha1.ProtectionBackupInstanceDisk), nil
}
