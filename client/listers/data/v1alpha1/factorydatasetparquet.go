/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FactoryDatasetParquetLister helps list FactoryDatasetParquets.
// All objects returned here must be treated as read-only.
type FactoryDatasetParquetLister interface {
	// List lists all FactoryDatasetParquets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryDatasetParquet, err error)
	// FactoryDatasetParquets returns an object that can list and get FactoryDatasetParquets.
	FactoryDatasetParquets(namespace string) FactoryDatasetParquetNamespaceLister
	FactoryDatasetParquetListerExpansion
}

// factoryDatasetParquetLister implements the FactoryDatasetParquetLister interface.
type factoryDatasetParquetLister struct {
	indexer cache.Indexer
}

// NewFactoryDatasetParquetLister returns a new FactoryDatasetParquetLister.
func NewFactoryDatasetParquetLister(indexer cache.Indexer) FactoryDatasetParquetLister {
	return &factoryDatasetParquetLister{indexer: indexer}
}

// List lists all FactoryDatasetParquets in the indexer.
func (s *factoryDatasetParquetLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryDatasetParquet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryDatasetParquet))
	})
	return ret, err
}

// FactoryDatasetParquets returns an object that can list and get FactoryDatasetParquets.
func (s *factoryDatasetParquetLister) FactoryDatasetParquets(namespace string) FactoryDatasetParquetNamespaceLister {
	return factoryDatasetParquetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FactoryDatasetParquetNamespaceLister helps list and get FactoryDatasetParquets.
// All objects returned here must be treated as read-only.
type FactoryDatasetParquetNamespaceLister interface {
	// List lists all FactoryDatasetParquets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryDatasetParquet, err error)
	// Get retrieves the FactoryDatasetParquet from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FactoryDatasetParquet, error)
	FactoryDatasetParquetNamespaceListerExpansion
}

// factoryDatasetParquetNamespaceLister implements the FactoryDatasetParquetNamespaceLister
// interface.
type factoryDatasetParquetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FactoryDatasetParquets in the indexer for a given namespace.
func (s factoryDatasetParquetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryDatasetParquet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryDatasetParquet))
	})
	return ret, err
}

// Get retrieves the FactoryDatasetParquet from the indexer for a given namespace and name.
func (s factoryDatasetParquetNamespaceLister) Get(name string) (*v1alpha1.FactoryDatasetParquet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("factorydatasetparquet"), name)
	}
	return obj.(*v1alpha1.FactoryDatasetParquet), nil
}
