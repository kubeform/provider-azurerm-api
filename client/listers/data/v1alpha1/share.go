/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ShareLister helps list Shares.
// All objects returned here must be treated as read-only.
type ShareLister interface {
	// List lists all Shares in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Share, err error)
	// Shares returns an object that can list and get Shares.
	Shares(namespace string) ShareNamespaceLister
	ShareListerExpansion
}

// shareLister implements the ShareLister interface.
type shareLister struct {
	indexer cache.Indexer
}

// NewShareLister returns a new ShareLister.
func NewShareLister(indexer cache.Indexer) ShareLister {
	return &shareLister{indexer: indexer}
}

// List lists all Shares in the indexer.
func (s *shareLister) List(selector labels.Selector) (ret []*v1alpha1.Share, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Share))
	})
	return ret, err
}

// Shares returns an object that can list and get Shares.
func (s *shareLister) Shares(namespace string) ShareNamespaceLister {
	return shareNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ShareNamespaceLister helps list and get Shares.
// All objects returned here must be treated as read-only.
type ShareNamespaceLister interface {
	// List lists all Shares in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Share, err error)
	// Get retrieves the Share from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Share, error)
	ShareNamespaceListerExpansion
}

// shareNamespaceLister implements the ShareNamespaceLister
// interface.
type shareNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Shares in the indexer for a given namespace.
func (s shareNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Share, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Share))
	})
	return ret, err
}

// Get retrieves the Share from the indexer for a given namespace and name.
func (s shareNamespaceLister) Get(name string) (*v1alpha1.Share, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("share"), name)
	}
	return obj.(*v1alpha1.Share), nil
}
