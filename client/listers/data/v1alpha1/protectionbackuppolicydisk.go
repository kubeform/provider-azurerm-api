/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProtectionBackupPolicyDiskLister helps list ProtectionBackupPolicyDisks.
// All objects returned here must be treated as read-only.
type ProtectionBackupPolicyDiskLister interface {
	// List lists all ProtectionBackupPolicyDisks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProtectionBackupPolicyDisk, err error)
	// ProtectionBackupPolicyDisks returns an object that can list and get ProtectionBackupPolicyDisks.
	ProtectionBackupPolicyDisks(namespace string) ProtectionBackupPolicyDiskNamespaceLister
	ProtectionBackupPolicyDiskListerExpansion
}

// protectionBackupPolicyDiskLister implements the ProtectionBackupPolicyDiskLister interface.
type protectionBackupPolicyDiskLister struct {
	indexer cache.Indexer
}

// NewProtectionBackupPolicyDiskLister returns a new ProtectionBackupPolicyDiskLister.
func NewProtectionBackupPolicyDiskLister(indexer cache.Indexer) ProtectionBackupPolicyDiskLister {
	return &protectionBackupPolicyDiskLister{indexer: indexer}
}

// List lists all ProtectionBackupPolicyDisks in the indexer.
func (s *protectionBackupPolicyDiskLister) List(selector labels.Selector) (ret []*v1alpha1.ProtectionBackupPolicyDisk, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProtectionBackupPolicyDisk))
	})
	return ret, err
}

// ProtectionBackupPolicyDisks returns an object that can list and get ProtectionBackupPolicyDisks.
func (s *protectionBackupPolicyDiskLister) ProtectionBackupPolicyDisks(namespace string) ProtectionBackupPolicyDiskNamespaceLister {
	return protectionBackupPolicyDiskNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProtectionBackupPolicyDiskNamespaceLister helps list and get ProtectionBackupPolicyDisks.
// All objects returned here must be treated as read-only.
type ProtectionBackupPolicyDiskNamespaceLister interface {
	// List lists all ProtectionBackupPolicyDisks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProtectionBackupPolicyDisk, err error)
	// Get retrieves the ProtectionBackupPolicyDisk from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ProtectionBackupPolicyDisk, error)
	ProtectionBackupPolicyDiskNamespaceListerExpansion
}

// protectionBackupPolicyDiskNamespaceLister implements the ProtectionBackupPolicyDiskNamespaceLister
// interface.
type protectionBackupPolicyDiskNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProtectionBackupPolicyDisks in the indexer for a given namespace.
func (s protectionBackupPolicyDiskNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ProtectionBackupPolicyDisk, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProtectionBackupPolicyDisk))
	})
	return ret, err
}

// Get retrieves the ProtectionBackupPolicyDisk from the indexer for a given namespace and name.
func (s protectionBackupPolicyDiskNamespaceLister) Get(name string) (*v1alpha1.ProtectionBackupPolicyDisk, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("protectionbackuppolicydisk"), name)
	}
	return obj.(*v1alpha1.ProtectionBackupPolicyDisk), nil
}
