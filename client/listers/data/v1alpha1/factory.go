/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FactoryLister helps list Factories.
// All objects returned here must be treated as read-only.
type FactoryLister interface {
	// List lists all Factories in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Factory, err error)
	// Factories returns an object that can list and get Factories.
	Factories(namespace string) FactoryNamespaceLister
	FactoryListerExpansion
}

// factoryLister implements the FactoryLister interface.
type factoryLister struct {
	indexer cache.Indexer
}

// NewFactoryLister returns a new FactoryLister.
func NewFactoryLister(indexer cache.Indexer) FactoryLister {
	return &factoryLister{indexer: indexer}
}

// List lists all Factories in the indexer.
func (s *factoryLister) List(selector labels.Selector) (ret []*v1alpha1.Factory, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Factory))
	})
	return ret, err
}

// Factories returns an object that can list and get Factories.
func (s *factoryLister) Factories(namespace string) FactoryNamespaceLister {
	return factoryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FactoryNamespaceLister helps list and get Factories.
// All objects returned here must be treated as read-only.
type FactoryNamespaceLister interface {
	// List lists all Factories in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Factory, err error)
	// Get retrieves the Factory from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Factory, error)
	FactoryNamespaceListerExpansion
}

// factoryNamespaceLister implements the FactoryNamespaceLister
// interface.
type factoryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Factories in the indexer for a given namespace.
func (s factoryNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Factory, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Factory))
	})
	return ret, err
}

// Get retrieves the Factory from the indexer for a given namespace and name.
func (s factoryNamespaceLister) Get(name string) (*v1alpha1.Factory, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("factory"), name)
	}
	return obj.(*v1alpha1.Factory), nil
}
