/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LakeStoreLister helps list LakeStores.
// All objects returned here must be treated as read-only.
type LakeStoreLister interface {
	// List lists all LakeStores in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LakeStore, err error)
	// LakeStores returns an object that can list and get LakeStores.
	LakeStores(namespace string) LakeStoreNamespaceLister
	LakeStoreListerExpansion
}

// lakeStoreLister implements the LakeStoreLister interface.
type lakeStoreLister struct {
	indexer cache.Indexer
}

// NewLakeStoreLister returns a new LakeStoreLister.
func NewLakeStoreLister(indexer cache.Indexer) LakeStoreLister {
	return &lakeStoreLister{indexer: indexer}
}

// List lists all LakeStores in the indexer.
func (s *lakeStoreLister) List(selector labels.Selector) (ret []*v1alpha1.LakeStore, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LakeStore))
	})
	return ret, err
}

// LakeStores returns an object that can list and get LakeStores.
func (s *lakeStoreLister) LakeStores(namespace string) LakeStoreNamespaceLister {
	return lakeStoreNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LakeStoreNamespaceLister helps list and get LakeStores.
// All objects returned here must be treated as read-only.
type LakeStoreNamespaceLister interface {
	// List lists all LakeStores in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LakeStore, err error)
	// Get retrieves the LakeStore from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LakeStore, error)
	LakeStoreNamespaceListerExpansion
}

// lakeStoreNamespaceLister implements the LakeStoreNamespaceLister
// interface.
type lakeStoreNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LakeStores in the indexer for a given namespace.
func (s lakeStoreNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LakeStore, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LakeStore))
	})
	return ret, err
}

// Get retrieves the LakeStore from the indexer for a given namespace and name.
func (s lakeStoreNamespaceLister) Get(name string) (*v1alpha1.LakeStore, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("lakestore"), name)
	}
	return obj.(*v1alpha1.LakeStore), nil
}
