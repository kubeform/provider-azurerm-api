/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FactoryLinkedServiceSftpLister helps list FactoryLinkedServiceSftps.
// All objects returned here must be treated as read-only.
type FactoryLinkedServiceSftpLister interface {
	// List lists all FactoryLinkedServiceSftps in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryLinkedServiceSftp, err error)
	// FactoryLinkedServiceSftps returns an object that can list and get FactoryLinkedServiceSftps.
	FactoryLinkedServiceSftps(namespace string) FactoryLinkedServiceSftpNamespaceLister
	FactoryLinkedServiceSftpListerExpansion
}

// factoryLinkedServiceSftpLister implements the FactoryLinkedServiceSftpLister interface.
type factoryLinkedServiceSftpLister struct {
	indexer cache.Indexer
}

// NewFactoryLinkedServiceSftpLister returns a new FactoryLinkedServiceSftpLister.
func NewFactoryLinkedServiceSftpLister(indexer cache.Indexer) FactoryLinkedServiceSftpLister {
	return &factoryLinkedServiceSftpLister{indexer: indexer}
}

// List lists all FactoryLinkedServiceSftps in the indexer.
func (s *factoryLinkedServiceSftpLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryLinkedServiceSftp, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryLinkedServiceSftp))
	})
	return ret, err
}

// FactoryLinkedServiceSftps returns an object that can list and get FactoryLinkedServiceSftps.
func (s *factoryLinkedServiceSftpLister) FactoryLinkedServiceSftps(namespace string) FactoryLinkedServiceSftpNamespaceLister {
	return factoryLinkedServiceSftpNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FactoryLinkedServiceSftpNamespaceLister helps list and get FactoryLinkedServiceSftps.
// All objects returned here must be treated as read-only.
type FactoryLinkedServiceSftpNamespaceLister interface {
	// List lists all FactoryLinkedServiceSftps in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryLinkedServiceSftp, err error)
	// Get retrieves the FactoryLinkedServiceSftp from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FactoryLinkedServiceSftp, error)
	FactoryLinkedServiceSftpNamespaceListerExpansion
}

// factoryLinkedServiceSftpNamespaceLister implements the FactoryLinkedServiceSftpNamespaceLister
// interface.
type factoryLinkedServiceSftpNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FactoryLinkedServiceSftps in the indexer for a given namespace.
func (s factoryLinkedServiceSftpNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryLinkedServiceSftp, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryLinkedServiceSftp))
	})
	return ret, err
}

// Get retrieves the FactoryLinkedServiceSftp from the indexer for a given namespace and name.
func (s factoryLinkedServiceSftpNamespaceLister) Get(name string) (*v1alpha1.FactoryLinkedServiceSftp, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("factorylinkedservicesftp"), name)
	}
	return obj.(*v1alpha1.FactoryLinkedServiceSftp), nil
}
