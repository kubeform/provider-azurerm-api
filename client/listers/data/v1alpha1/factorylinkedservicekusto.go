/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FactoryLinkedServiceKustoLister helps list FactoryLinkedServiceKustos.
// All objects returned here must be treated as read-only.
type FactoryLinkedServiceKustoLister interface {
	// List lists all FactoryLinkedServiceKustos in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryLinkedServiceKusto, err error)
	// FactoryLinkedServiceKustos returns an object that can list and get FactoryLinkedServiceKustos.
	FactoryLinkedServiceKustos(namespace string) FactoryLinkedServiceKustoNamespaceLister
	FactoryLinkedServiceKustoListerExpansion
}

// factoryLinkedServiceKustoLister implements the FactoryLinkedServiceKustoLister interface.
type factoryLinkedServiceKustoLister struct {
	indexer cache.Indexer
}

// NewFactoryLinkedServiceKustoLister returns a new FactoryLinkedServiceKustoLister.
func NewFactoryLinkedServiceKustoLister(indexer cache.Indexer) FactoryLinkedServiceKustoLister {
	return &factoryLinkedServiceKustoLister{indexer: indexer}
}

// List lists all FactoryLinkedServiceKustos in the indexer.
func (s *factoryLinkedServiceKustoLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryLinkedServiceKusto, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryLinkedServiceKusto))
	})
	return ret, err
}

// FactoryLinkedServiceKustos returns an object that can list and get FactoryLinkedServiceKustos.
func (s *factoryLinkedServiceKustoLister) FactoryLinkedServiceKustos(namespace string) FactoryLinkedServiceKustoNamespaceLister {
	return factoryLinkedServiceKustoNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FactoryLinkedServiceKustoNamespaceLister helps list and get FactoryLinkedServiceKustos.
// All objects returned here must be treated as read-only.
type FactoryLinkedServiceKustoNamespaceLister interface {
	// List lists all FactoryLinkedServiceKustos in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FactoryLinkedServiceKusto, err error)
	// Get retrieves the FactoryLinkedServiceKusto from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FactoryLinkedServiceKusto, error)
	FactoryLinkedServiceKustoNamespaceListerExpansion
}

// factoryLinkedServiceKustoNamespaceLister implements the FactoryLinkedServiceKustoNamespaceLister
// interface.
type factoryLinkedServiceKustoNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FactoryLinkedServiceKustos in the indexer for a given namespace.
func (s factoryLinkedServiceKustoNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FactoryLinkedServiceKusto, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FactoryLinkedServiceKusto))
	})
	return ret, err
}

// Get retrieves the FactoryLinkedServiceKusto from the indexer for a given namespace and name.
func (s factoryLinkedServiceKustoNamespaceLister) Get(name string) (*v1alpha1.FactoryLinkedServiceKusto, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("factorylinkedservicekusto"), name)
	}
	return obj.(*v1alpha1.FactoryLinkedServiceKusto), nil
}
