/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/private/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DnsZoneVirtualNetworkLinkLister helps list DnsZoneVirtualNetworkLinks.
// All objects returned here must be treated as read-only.
type DnsZoneVirtualNetworkLinkLister interface {
	// List lists all DnsZoneVirtualNetworkLinks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DnsZoneVirtualNetworkLink, err error)
	// DnsZoneVirtualNetworkLinks returns an object that can list and get DnsZoneVirtualNetworkLinks.
	DnsZoneVirtualNetworkLinks(namespace string) DnsZoneVirtualNetworkLinkNamespaceLister
	DnsZoneVirtualNetworkLinkListerExpansion
}

// dnsZoneVirtualNetworkLinkLister implements the DnsZoneVirtualNetworkLinkLister interface.
type dnsZoneVirtualNetworkLinkLister struct {
	indexer cache.Indexer
}

// NewDnsZoneVirtualNetworkLinkLister returns a new DnsZoneVirtualNetworkLinkLister.
func NewDnsZoneVirtualNetworkLinkLister(indexer cache.Indexer) DnsZoneVirtualNetworkLinkLister {
	return &dnsZoneVirtualNetworkLinkLister{indexer: indexer}
}

// List lists all DnsZoneVirtualNetworkLinks in the indexer.
func (s *dnsZoneVirtualNetworkLinkLister) List(selector labels.Selector) (ret []*v1alpha1.DnsZoneVirtualNetworkLink, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DnsZoneVirtualNetworkLink))
	})
	return ret, err
}

// DnsZoneVirtualNetworkLinks returns an object that can list and get DnsZoneVirtualNetworkLinks.
func (s *dnsZoneVirtualNetworkLinkLister) DnsZoneVirtualNetworkLinks(namespace string) DnsZoneVirtualNetworkLinkNamespaceLister {
	return dnsZoneVirtualNetworkLinkNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DnsZoneVirtualNetworkLinkNamespaceLister helps list and get DnsZoneVirtualNetworkLinks.
// All objects returned here must be treated as read-only.
type DnsZoneVirtualNetworkLinkNamespaceLister interface {
	// List lists all DnsZoneVirtualNetworkLinks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DnsZoneVirtualNetworkLink, err error)
	// Get retrieves the DnsZoneVirtualNetworkLink from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DnsZoneVirtualNetworkLink, error)
	DnsZoneVirtualNetworkLinkNamespaceListerExpansion
}

// dnsZoneVirtualNetworkLinkNamespaceLister implements the DnsZoneVirtualNetworkLinkNamespaceLister
// interface.
type dnsZoneVirtualNetworkLinkNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DnsZoneVirtualNetworkLinks in the indexer for a given namespace.
func (s dnsZoneVirtualNetworkLinkNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DnsZoneVirtualNetworkLink, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DnsZoneVirtualNetworkLink))
	})
	return ret, err
}

// Get retrieves the DnsZoneVirtualNetworkLink from the indexer for a given namespace and name.
func (s dnsZoneVirtualNetworkLinkNamespaceLister) Get(name string) (*v1alpha1.DnsZoneVirtualNetworkLink, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dnszonevirtualnetworklink"), name)
	}
	return obj.(*v1alpha1.DnsZoneVirtualNetworkLink), nil
}
