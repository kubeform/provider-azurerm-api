/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/private/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DnsARecordLister helps list DnsARecords.
// All objects returned here must be treated as read-only.
type DnsARecordLister interface {
	// List lists all DnsARecords in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DnsARecord, err error)
	// DnsARecords returns an object that can list and get DnsARecords.
	DnsARecords(namespace string) DnsARecordNamespaceLister
	DnsARecordListerExpansion
}

// dnsARecordLister implements the DnsARecordLister interface.
type dnsARecordLister struct {
	indexer cache.Indexer
}

// NewDnsARecordLister returns a new DnsARecordLister.
func NewDnsARecordLister(indexer cache.Indexer) DnsARecordLister {
	return &dnsARecordLister{indexer: indexer}
}

// List lists all DnsARecords in the indexer.
func (s *dnsARecordLister) List(selector labels.Selector) (ret []*v1alpha1.DnsARecord, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DnsARecord))
	})
	return ret, err
}

// DnsARecords returns an object that can list and get DnsARecords.
func (s *dnsARecordLister) DnsARecords(namespace string) DnsARecordNamespaceLister {
	return dnsARecordNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DnsARecordNamespaceLister helps list and get DnsARecords.
// All objects returned here must be treated as read-only.
type DnsARecordNamespaceLister interface {
	// List lists all DnsARecords in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DnsARecord, err error)
	// Get retrieves the DnsARecord from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DnsARecord, error)
	DnsARecordNamespaceListerExpansion
}

// dnsARecordNamespaceLister implements the DnsARecordNamespaceLister
// interface.
type dnsARecordNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DnsARecords in the indexer for a given namespace.
func (s dnsARecordNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DnsARecord, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DnsARecord))
	})
	return ret, err
}

// Get retrieves the DnsARecord from the indexer for a given namespace and name.
func (s dnsARecordNamespaceLister) Get(name string) (*v1alpha1.DnsARecord, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dnsarecord"), name)
	}
	return obj.(*v1alpha1.DnsARecord), nil
}
