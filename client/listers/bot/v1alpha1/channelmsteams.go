/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/bot/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ChannelMsTeamsLister helps list ChannelMsTeamses.
// All objects returned here must be treated as read-only.
type ChannelMsTeamsLister interface {
	// List lists all ChannelMsTeamses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ChannelMsTeams, err error)
	// ChannelMsTeamses returns an object that can list and get ChannelMsTeamses.
	ChannelMsTeamses(namespace string) ChannelMsTeamsNamespaceLister
	ChannelMsTeamsListerExpansion
}

// channelMsTeamsLister implements the ChannelMsTeamsLister interface.
type channelMsTeamsLister struct {
	indexer cache.Indexer
}

// NewChannelMsTeamsLister returns a new ChannelMsTeamsLister.
func NewChannelMsTeamsLister(indexer cache.Indexer) ChannelMsTeamsLister {
	return &channelMsTeamsLister{indexer: indexer}
}

// List lists all ChannelMsTeamses in the indexer.
func (s *channelMsTeamsLister) List(selector labels.Selector) (ret []*v1alpha1.ChannelMsTeams, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ChannelMsTeams))
	})
	return ret, err
}

// ChannelMsTeamses returns an object that can list and get ChannelMsTeamses.
func (s *channelMsTeamsLister) ChannelMsTeamses(namespace string) ChannelMsTeamsNamespaceLister {
	return channelMsTeamsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ChannelMsTeamsNamespaceLister helps list and get ChannelMsTeamses.
// All objects returned here must be treated as read-only.
type ChannelMsTeamsNamespaceLister interface {
	// List lists all ChannelMsTeamses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ChannelMsTeams, err error)
	// Get retrieves the ChannelMsTeams from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ChannelMsTeams, error)
	ChannelMsTeamsNamespaceListerExpansion
}

// channelMsTeamsNamespaceLister implements the ChannelMsTeamsNamespaceLister
// interface.
type channelMsTeamsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ChannelMsTeamses in the indexer for a given namespace.
func (s channelMsTeamsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ChannelMsTeams, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ChannelMsTeams))
	})
	return ret, err
}

// Get retrieves the ChannelMsTeams from the indexer for a given namespace and name.
func (s channelMsTeamsNamespaceLister) Get(name string) (*v1alpha1.ChannelMsTeams, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("channelmsteams"), name)
	}
	return obj.(*v1alpha1.ChannelMsTeams), nil
}
