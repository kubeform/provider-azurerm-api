/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/bot/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ChannelSmsLister helps list ChannelSmses.
// All objects returned here must be treated as read-only.
type ChannelSmsLister interface {
	// List lists all ChannelSmses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ChannelSms, err error)
	// ChannelSmses returns an object that can list and get ChannelSmses.
	ChannelSmses(namespace string) ChannelSmsNamespaceLister
	ChannelSmsListerExpansion
}

// channelSmsLister implements the ChannelSmsLister interface.
type channelSmsLister struct {
	indexer cache.Indexer
}

// NewChannelSmsLister returns a new ChannelSmsLister.
func NewChannelSmsLister(indexer cache.Indexer) ChannelSmsLister {
	return &channelSmsLister{indexer: indexer}
}

// List lists all ChannelSmses in the indexer.
func (s *channelSmsLister) List(selector labels.Selector) (ret []*v1alpha1.ChannelSms, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ChannelSms))
	})
	return ret, err
}

// ChannelSmses returns an object that can list and get ChannelSmses.
func (s *channelSmsLister) ChannelSmses(namespace string) ChannelSmsNamespaceLister {
	return channelSmsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ChannelSmsNamespaceLister helps list and get ChannelSmses.
// All objects returned here must be treated as read-only.
type ChannelSmsNamespaceLister interface {
	// List lists all ChannelSmses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ChannelSms, err error)
	// Get retrieves the ChannelSms from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ChannelSms, error)
	ChannelSmsNamespaceListerExpansion
}

// channelSmsNamespaceLister implements the ChannelSmsNamespaceLister
// interface.
type channelSmsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ChannelSmses in the indexer for a given namespace.
func (s channelSmsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ChannelSms, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ChannelSms))
	})
	return ret, err
}

// Get retrieves the ChannelSms from the indexer for a given namespace and name.
func (s channelSmsNamespaceLister) Get(name string) (*v1alpha1.ChannelSms, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("channelsms"), name)
	}
	return obj.(*v1alpha1.ChannelSms), nil
}
