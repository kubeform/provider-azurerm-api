/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/bot/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ChannelEmailLister helps list ChannelEmails.
// All objects returned here must be treated as read-only.
type ChannelEmailLister interface {
	// List lists all ChannelEmails in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ChannelEmail, err error)
	// ChannelEmails returns an object that can list and get ChannelEmails.
	ChannelEmails(namespace string) ChannelEmailNamespaceLister
	ChannelEmailListerExpansion
}

// channelEmailLister implements the ChannelEmailLister interface.
type channelEmailLister struct {
	indexer cache.Indexer
}

// NewChannelEmailLister returns a new ChannelEmailLister.
func NewChannelEmailLister(indexer cache.Indexer) ChannelEmailLister {
	return &channelEmailLister{indexer: indexer}
}

// List lists all ChannelEmails in the indexer.
func (s *channelEmailLister) List(selector labels.Selector) (ret []*v1alpha1.ChannelEmail, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ChannelEmail))
	})
	return ret, err
}

// ChannelEmails returns an object that can list and get ChannelEmails.
func (s *channelEmailLister) ChannelEmails(namespace string) ChannelEmailNamespaceLister {
	return channelEmailNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ChannelEmailNamespaceLister helps list and get ChannelEmails.
// All objects returned here must be treated as read-only.
type ChannelEmailNamespaceLister interface {
	// List lists all ChannelEmails in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ChannelEmail, err error)
	// Get retrieves the ChannelEmail from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ChannelEmail, error)
	ChannelEmailNamespaceListerExpansion
}

// channelEmailNamespaceLister implements the ChannelEmailNamespaceLister
// interface.
type channelEmailNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ChannelEmails in the indexer for a given namespace.
func (s channelEmailNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ChannelEmail, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ChannelEmail))
	})
	return ret, err
}

// Get retrieves the ChannelEmail from the indexer for a given namespace and name.
func (s channelEmailNamespaceLister) Get(name string) (*v1alpha1.ChannelEmail, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("channelemail"), name)
	}
	return obj.(*v1alpha1.ChannelEmail), nil
}
