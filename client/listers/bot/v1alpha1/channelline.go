/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/bot/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ChannelLineLister helps list ChannelLines.
// All objects returned here must be treated as read-only.
type ChannelLineLister interface {
	// List lists all ChannelLines in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ChannelLine, err error)
	// ChannelLines returns an object that can list and get ChannelLines.
	ChannelLines(namespace string) ChannelLineNamespaceLister
	ChannelLineListerExpansion
}

// channelLineLister implements the ChannelLineLister interface.
type channelLineLister struct {
	indexer cache.Indexer
}

// NewChannelLineLister returns a new ChannelLineLister.
func NewChannelLineLister(indexer cache.Indexer) ChannelLineLister {
	return &channelLineLister{indexer: indexer}
}

// List lists all ChannelLines in the indexer.
func (s *channelLineLister) List(selector labels.Selector) (ret []*v1alpha1.ChannelLine, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ChannelLine))
	})
	return ret, err
}

// ChannelLines returns an object that can list and get ChannelLines.
func (s *channelLineLister) ChannelLines(namespace string) ChannelLineNamespaceLister {
	return channelLineNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ChannelLineNamespaceLister helps list and get ChannelLines.
// All objects returned here must be treated as read-only.
type ChannelLineNamespaceLister interface {
	// List lists all ChannelLines in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ChannelLine, err error)
	// Get retrieves the ChannelLine from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ChannelLine, error)
	ChannelLineNamespaceListerExpansion
}

// channelLineNamespaceLister implements the ChannelLineNamespaceLister
// interface.
type channelLineNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ChannelLines in the indexer for a given namespace.
func (s channelLineNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ChannelLine, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ChannelLine))
	})
	return ret, err
}

// Get retrieves the ChannelLine from the indexer for a given namespace and name.
func (s channelLineNamespaceLister) Get(name string) (*v1alpha1.ChannelLine, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("channelline"), name)
	}
	return obj.(*v1alpha1.ChannelLine), nil
}
