/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/bot/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ChannelWebChatLister helps list ChannelWebChats.
// All objects returned here must be treated as read-only.
type ChannelWebChatLister interface {
	// List lists all ChannelWebChats in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ChannelWebChat, err error)
	// ChannelWebChats returns an object that can list and get ChannelWebChats.
	ChannelWebChats(namespace string) ChannelWebChatNamespaceLister
	ChannelWebChatListerExpansion
}

// channelWebChatLister implements the ChannelWebChatLister interface.
type channelWebChatLister struct {
	indexer cache.Indexer
}

// NewChannelWebChatLister returns a new ChannelWebChatLister.
func NewChannelWebChatLister(indexer cache.Indexer) ChannelWebChatLister {
	return &channelWebChatLister{indexer: indexer}
}

// List lists all ChannelWebChats in the indexer.
func (s *channelWebChatLister) List(selector labels.Selector) (ret []*v1alpha1.ChannelWebChat, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ChannelWebChat))
	})
	return ret, err
}

// ChannelWebChats returns an object that can list and get ChannelWebChats.
func (s *channelWebChatLister) ChannelWebChats(namespace string) ChannelWebChatNamespaceLister {
	return channelWebChatNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ChannelWebChatNamespaceLister helps list and get ChannelWebChats.
// All objects returned here must be treated as read-only.
type ChannelWebChatNamespaceLister interface {
	// List lists all ChannelWebChats in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ChannelWebChat, err error)
	// Get retrieves the ChannelWebChat from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ChannelWebChat, error)
	ChannelWebChatNamespaceListerExpansion
}

// channelWebChatNamespaceLister implements the ChannelWebChatNamespaceLister
// interface.
type channelWebChatNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ChannelWebChats in the indexer for a given namespace.
func (s channelWebChatNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ChannelWebChat, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ChannelWebChat))
	})
	return ret, err
}

// Get retrieves the ChannelWebChat from the indexer for a given namespace and name.
func (s channelWebChatNamespaceLister) Get(name string) (*v1alpha1.ChannelWebChat, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("channelwebchat"), name)
	}
	return obj.(*v1alpha1.ChannelWebChat), nil
}
