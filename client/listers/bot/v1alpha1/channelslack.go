/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/bot/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ChannelSlackLister helps list ChannelSlacks.
// All objects returned here must be treated as read-only.
type ChannelSlackLister interface {
	// List lists all ChannelSlacks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ChannelSlack, err error)
	// ChannelSlacks returns an object that can list and get ChannelSlacks.
	ChannelSlacks(namespace string) ChannelSlackNamespaceLister
	ChannelSlackListerExpansion
}

// channelSlackLister implements the ChannelSlackLister interface.
type channelSlackLister struct {
	indexer cache.Indexer
}

// NewChannelSlackLister returns a new ChannelSlackLister.
func NewChannelSlackLister(indexer cache.Indexer) ChannelSlackLister {
	return &channelSlackLister{indexer: indexer}
}

// List lists all ChannelSlacks in the indexer.
func (s *channelSlackLister) List(selector labels.Selector) (ret []*v1alpha1.ChannelSlack, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ChannelSlack))
	})
	return ret, err
}

// ChannelSlacks returns an object that can list and get ChannelSlacks.
func (s *channelSlackLister) ChannelSlacks(namespace string) ChannelSlackNamespaceLister {
	return channelSlackNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ChannelSlackNamespaceLister helps list and get ChannelSlacks.
// All objects returned here must be treated as read-only.
type ChannelSlackNamespaceLister interface {
	// List lists all ChannelSlacks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ChannelSlack, err error)
	// Get retrieves the ChannelSlack from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ChannelSlack, error)
	ChannelSlackNamespaceListerExpansion
}

// channelSlackNamespaceLister implements the ChannelSlackNamespaceLister
// interface.
type channelSlackNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ChannelSlacks in the indexer for a given namespace.
func (s channelSlackNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ChannelSlack, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ChannelSlack))
	})
	return ret, err
}

// Get retrieves the ChannelSlack from the indexer for a given namespace and name.
func (s channelSlackNamespaceLister) Get(name string) (*v1alpha1.ChannelSlack, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("channelslack"), name)
	}
	return obj.(*v1alpha1.ChannelSlack), nil
}
