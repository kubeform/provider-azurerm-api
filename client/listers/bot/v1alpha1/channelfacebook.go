/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/bot/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ChannelFacebookLister helps list ChannelFacebooks.
// All objects returned here must be treated as read-only.
type ChannelFacebookLister interface {
	// List lists all ChannelFacebooks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ChannelFacebook, err error)
	// ChannelFacebooks returns an object that can list and get ChannelFacebooks.
	ChannelFacebooks(namespace string) ChannelFacebookNamespaceLister
	ChannelFacebookListerExpansion
}

// channelFacebookLister implements the ChannelFacebookLister interface.
type channelFacebookLister struct {
	indexer cache.Indexer
}

// NewChannelFacebookLister returns a new ChannelFacebookLister.
func NewChannelFacebookLister(indexer cache.Indexer) ChannelFacebookLister {
	return &channelFacebookLister{indexer: indexer}
}

// List lists all ChannelFacebooks in the indexer.
func (s *channelFacebookLister) List(selector labels.Selector) (ret []*v1alpha1.ChannelFacebook, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ChannelFacebook))
	})
	return ret, err
}

// ChannelFacebooks returns an object that can list and get ChannelFacebooks.
func (s *channelFacebookLister) ChannelFacebooks(namespace string) ChannelFacebookNamespaceLister {
	return channelFacebookNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ChannelFacebookNamespaceLister helps list and get ChannelFacebooks.
// All objects returned here must be treated as read-only.
type ChannelFacebookNamespaceLister interface {
	// List lists all ChannelFacebooks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ChannelFacebook, err error)
	// Get retrieves the ChannelFacebook from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ChannelFacebook, error)
	ChannelFacebookNamespaceListerExpansion
}

// channelFacebookNamespaceLister implements the ChannelFacebookNamespaceLister
// interface.
type channelFacebookNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ChannelFacebooks in the indexer for a given namespace.
func (s channelFacebookNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ChannelFacebook, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ChannelFacebook))
	})
	return ret, err
}

// Get retrieves the ChannelFacebook from the indexer for a given namespace and name.
func (s channelFacebookNamespaceLister) Get(name string) (*v1alpha1.ChannelFacebook, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("channelfacebook"), name)
	}
	return obj.(*v1alpha1.ChannelFacebook), nil
}
