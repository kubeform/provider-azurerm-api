/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/logicapp/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IntegrationAccountSchemaLister helps list IntegrationAccountSchemas.
// All objects returned here must be treated as read-only.
type IntegrationAccountSchemaLister interface {
	// List lists all IntegrationAccountSchemas in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IntegrationAccountSchema, err error)
	// IntegrationAccountSchemas returns an object that can list and get IntegrationAccountSchemas.
	IntegrationAccountSchemas(namespace string) IntegrationAccountSchemaNamespaceLister
	IntegrationAccountSchemaListerExpansion
}

// integrationAccountSchemaLister implements the IntegrationAccountSchemaLister interface.
type integrationAccountSchemaLister struct {
	indexer cache.Indexer
}

// NewIntegrationAccountSchemaLister returns a new IntegrationAccountSchemaLister.
func NewIntegrationAccountSchemaLister(indexer cache.Indexer) IntegrationAccountSchemaLister {
	return &integrationAccountSchemaLister{indexer: indexer}
}

// List lists all IntegrationAccountSchemas in the indexer.
func (s *integrationAccountSchemaLister) List(selector labels.Selector) (ret []*v1alpha1.IntegrationAccountSchema, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IntegrationAccountSchema))
	})
	return ret, err
}

// IntegrationAccountSchemas returns an object that can list and get IntegrationAccountSchemas.
func (s *integrationAccountSchemaLister) IntegrationAccountSchemas(namespace string) IntegrationAccountSchemaNamespaceLister {
	return integrationAccountSchemaNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IntegrationAccountSchemaNamespaceLister helps list and get IntegrationAccountSchemas.
// All objects returned here must be treated as read-only.
type IntegrationAccountSchemaNamespaceLister interface {
	// List lists all IntegrationAccountSchemas in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IntegrationAccountSchema, err error)
	// Get retrieves the IntegrationAccountSchema from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IntegrationAccountSchema, error)
	IntegrationAccountSchemaNamespaceListerExpansion
}

// integrationAccountSchemaNamespaceLister implements the IntegrationAccountSchemaNamespaceLister
// interface.
type integrationAccountSchemaNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IntegrationAccountSchemas in the indexer for a given namespace.
func (s integrationAccountSchemaNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IntegrationAccountSchema, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IntegrationAccountSchema))
	})
	return ret, err
}

// Get retrieves the IntegrationAccountSchema from the indexer for a given namespace and name.
func (s integrationAccountSchemaNamespaceLister) Get(name string) (*v1alpha1.IntegrationAccountSchema, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("integrationaccountschema"), name)
	}
	return obj.(*v1alpha1.IntegrationAccountSchema), nil
}
