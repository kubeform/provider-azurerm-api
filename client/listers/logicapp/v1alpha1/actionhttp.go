/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/logicapp/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ActionHTTPLister helps list ActionHTTPs.
// All objects returned here must be treated as read-only.
type ActionHTTPLister interface {
	// List lists all ActionHTTPs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ActionHTTP, err error)
	// ActionHTTPs returns an object that can list and get ActionHTTPs.
	ActionHTTPs(namespace string) ActionHTTPNamespaceLister
	ActionHTTPListerExpansion
}

// actionHTTPLister implements the ActionHTTPLister interface.
type actionHTTPLister struct {
	indexer cache.Indexer
}

// NewActionHTTPLister returns a new ActionHTTPLister.
func NewActionHTTPLister(indexer cache.Indexer) ActionHTTPLister {
	return &actionHTTPLister{indexer: indexer}
}

// List lists all ActionHTTPs in the indexer.
func (s *actionHTTPLister) List(selector labels.Selector) (ret []*v1alpha1.ActionHTTP, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ActionHTTP))
	})
	return ret, err
}

// ActionHTTPs returns an object that can list and get ActionHTTPs.
func (s *actionHTTPLister) ActionHTTPs(namespace string) ActionHTTPNamespaceLister {
	return actionHTTPNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ActionHTTPNamespaceLister helps list and get ActionHTTPs.
// All objects returned here must be treated as read-only.
type ActionHTTPNamespaceLister interface {
	// List lists all ActionHTTPs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ActionHTTP, err error)
	// Get retrieves the ActionHTTP from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ActionHTTP, error)
	ActionHTTPNamespaceListerExpansion
}

// actionHTTPNamespaceLister implements the ActionHTTPNamespaceLister
// interface.
type actionHTTPNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ActionHTTPs in the indexer for a given namespace.
func (s actionHTTPNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ActionHTTP, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ActionHTTP))
	})
	return ret, err
}

// Get retrieves the ActionHTTP from the indexer for a given namespace and name.
func (s actionHTTPNamespaceLister) Get(name string) (*v1alpha1.ActionHTTP, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("actionhttp"), name)
	}
	return obj.(*v1alpha1.ActionHTTP), nil
}
