/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/logicapp/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IntegrationAccountMapLister helps list IntegrationAccountMaps.
// All objects returned here must be treated as read-only.
type IntegrationAccountMapLister interface {
	// List lists all IntegrationAccountMaps in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IntegrationAccountMap, err error)
	// IntegrationAccountMaps returns an object that can list and get IntegrationAccountMaps.
	IntegrationAccountMaps(namespace string) IntegrationAccountMapNamespaceLister
	IntegrationAccountMapListerExpansion
}

// integrationAccountMapLister implements the IntegrationAccountMapLister interface.
type integrationAccountMapLister struct {
	indexer cache.Indexer
}

// NewIntegrationAccountMapLister returns a new IntegrationAccountMapLister.
func NewIntegrationAccountMapLister(indexer cache.Indexer) IntegrationAccountMapLister {
	return &integrationAccountMapLister{indexer: indexer}
}

// List lists all IntegrationAccountMaps in the indexer.
func (s *integrationAccountMapLister) List(selector labels.Selector) (ret []*v1alpha1.IntegrationAccountMap, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IntegrationAccountMap))
	})
	return ret, err
}

// IntegrationAccountMaps returns an object that can list and get IntegrationAccountMaps.
func (s *integrationAccountMapLister) IntegrationAccountMaps(namespace string) IntegrationAccountMapNamespaceLister {
	return integrationAccountMapNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IntegrationAccountMapNamespaceLister helps list and get IntegrationAccountMaps.
// All objects returned here must be treated as read-only.
type IntegrationAccountMapNamespaceLister interface {
	// List lists all IntegrationAccountMaps in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IntegrationAccountMap, err error)
	// Get retrieves the IntegrationAccountMap from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IntegrationAccountMap, error)
	IntegrationAccountMapNamespaceListerExpansion
}

// integrationAccountMapNamespaceLister implements the IntegrationAccountMapNamespaceLister
// interface.
type integrationAccountMapNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IntegrationAccountMaps in the indexer for a given namespace.
func (s integrationAccountMapNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IntegrationAccountMap, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IntegrationAccountMap))
	})
	return ret, err
}

// Get retrieves the IntegrationAccountMap from the indexer for a given namespace and name.
func (s integrationAccountMapNamespaceLister) Get(name string) (*v1alpha1.IntegrationAccountMap, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("integrationaccountmap"), name)
	}
	return obj.(*v1alpha1.IntegrationAccountMap), nil
}
