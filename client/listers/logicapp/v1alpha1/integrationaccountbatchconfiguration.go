/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/logicapp/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IntegrationAccountBatchConfigurationLister helps list IntegrationAccountBatchConfigurations.
// All objects returned here must be treated as read-only.
type IntegrationAccountBatchConfigurationLister interface {
	// List lists all IntegrationAccountBatchConfigurations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IntegrationAccountBatchConfiguration, err error)
	// IntegrationAccountBatchConfigurations returns an object that can list and get IntegrationAccountBatchConfigurations.
	IntegrationAccountBatchConfigurations(namespace string) IntegrationAccountBatchConfigurationNamespaceLister
	IntegrationAccountBatchConfigurationListerExpansion
}

// integrationAccountBatchConfigurationLister implements the IntegrationAccountBatchConfigurationLister interface.
type integrationAccountBatchConfigurationLister struct {
	indexer cache.Indexer
}

// NewIntegrationAccountBatchConfigurationLister returns a new IntegrationAccountBatchConfigurationLister.
func NewIntegrationAccountBatchConfigurationLister(indexer cache.Indexer) IntegrationAccountBatchConfigurationLister {
	return &integrationAccountBatchConfigurationLister{indexer: indexer}
}

// List lists all IntegrationAccountBatchConfigurations in the indexer.
func (s *integrationAccountBatchConfigurationLister) List(selector labels.Selector) (ret []*v1alpha1.IntegrationAccountBatchConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IntegrationAccountBatchConfiguration))
	})
	return ret, err
}

// IntegrationAccountBatchConfigurations returns an object that can list and get IntegrationAccountBatchConfigurations.
func (s *integrationAccountBatchConfigurationLister) IntegrationAccountBatchConfigurations(namespace string) IntegrationAccountBatchConfigurationNamespaceLister {
	return integrationAccountBatchConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IntegrationAccountBatchConfigurationNamespaceLister helps list and get IntegrationAccountBatchConfigurations.
// All objects returned here must be treated as read-only.
type IntegrationAccountBatchConfigurationNamespaceLister interface {
	// List lists all IntegrationAccountBatchConfigurations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IntegrationAccountBatchConfiguration, err error)
	// Get retrieves the IntegrationAccountBatchConfiguration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IntegrationAccountBatchConfiguration, error)
	IntegrationAccountBatchConfigurationNamespaceListerExpansion
}

// integrationAccountBatchConfigurationNamespaceLister implements the IntegrationAccountBatchConfigurationNamespaceLister
// interface.
type integrationAccountBatchConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IntegrationAccountBatchConfigurations in the indexer for a given namespace.
func (s integrationAccountBatchConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IntegrationAccountBatchConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IntegrationAccountBatchConfiguration))
	})
	return ret, err
}

// Get retrieves the IntegrationAccountBatchConfiguration from the indexer for a given namespace and name.
func (s integrationAccountBatchConfigurationNamespaceLister) Get(name string) (*v1alpha1.IntegrationAccountBatchConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("integrationaccountbatchconfiguration"), name)
	}
	return obj.(*v1alpha1.IntegrationAccountBatchConfiguration), nil
}
