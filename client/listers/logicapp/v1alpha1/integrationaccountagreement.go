/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/logicapp/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IntegrationAccountAgreementLister helps list IntegrationAccountAgreements.
// All objects returned here must be treated as read-only.
type IntegrationAccountAgreementLister interface {
	// List lists all IntegrationAccountAgreements in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IntegrationAccountAgreement, err error)
	// IntegrationAccountAgreements returns an object that can list and get IntegrationAccountAgreements.
	IntegrationAccountAgreements(namespace string) IntegrationAccountAgreementNamespaceLister
	IntegrationAccountAgreementListerExpansion
}

// integrationAccountAgreementLister implements the IntegrationAccountAgreementLister interface.
type integrationAccountAgreementLister struct {
	indexer cache.Indexer
}

// NewIntegrationAccountAgreementLister returns a new IntegrationAccountAgreementLister.
func NewIntegrationAccountAgreementLister(indexer cache.Indexer) IntegrationAccountAgreementLister {
	return &integrationAccountAgreementLister{indexer: indexer}
}

// List lists all IntegrationAccountAgreements in the indexer.
func (s *integrationAccountAgreementLister) List(selector labels.Selector) (ret []*v1alpha1.IntegrationAccountAgreement, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IntegrationAccountAgreement))
	})
	return ret, err
}

// IntegrationAccountAgreements returns an object that can list and get IntegrationAccountAgreements.
func (s *integrationAccountAgreementLister) IntegrationAccountAgreements(namespace string) IntegrationAccountAgreementNamespaceLister {
	return integrationAccountAgreementNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IntegrationAccountAgreementNamespaceLister helps list and get IntegrationAccountAgreements.
// All objects returned here must be treated as read-only.
type IntegrationAccountAgreementNamespaceLister interface {
	// List lists all IntegrationAccountAgreements in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IntegrationAccountAgreement, err error)
	// Get retrieves the IntegrationAccountAgreement from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IntegrationAccountAgreement, error)
	IntegrationAccountAgreementNamespaceListerExpansion
}

// integrationAccountAgreementNamespaceLister implements the IntegrationAccountAgreementNamespaceLister
// interface.
type integrationAccountAgreementNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IntegrationAccountAgreements in the indexer for a given namespace.
func (s integrationAccountAgreementNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IntegrationAccountAgreement, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IntegrationAccountAgreement))
	})
	return ret, err
}

// Get retrieves the IntegrationAccountAgreement from the indexer for a given namespace and name.
func (s integrationAccountAgreementNamespaceLister) Get(name string) (*v1alpha1.IntegrationAccountAgreement, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("integrationaccountagreement"), name)
	}
	return obj.(*v1alpha1.IntegrationAccountAgreement), nil
}
