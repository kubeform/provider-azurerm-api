/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/logicapp/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IntegrationAccountSessionLister helps list IntegrationAccountSessions.
// All objects returned here must be treated as read-only.
type IntegrationAccountSessionLister interface {
	// List lists all IntegrationAccountSessions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IntegrationAccountSession, err error)
	// IntegrationAccountSessions returns an object that can list and get IntegrationAccountSessions.
	IntegrationAccountSessions(namespace string) IntegrationAccountSessionNamespaceLister
	IntegrationAccountSessionListerExpansion
}

// integrationAccountSessionLister implements the IntegrationAccountSessionLister interface.
type integrationAccountSessionLister struct {
	indexer cache.Indexer
}

// NewIntegrationAccountSessionLister returns a new IntegrationAccountSessionLister.
func NewIntegrationAccountSessionLister(indexer cache.Indexer) IntegrationAccountSessionLister {
	return &integrationAccountSessionLister{indexer: indexer}
}

// List lists all IntegrationAccountSessions in the indexer.
func (s *integrationAccountSessionLister) List(selector labels.Selector) (ret []*v1alpha1.IntegrationAccountSession, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IntegrationAccountSession))
	})
	return ret, err
}

// IntegrationAccountSessions returns an object that can list and get IntegrationAccountSessions.
func (s *integrationAccountSessionLister) IntegrationAccountSessions(namespace string) IntegrationAccountSessionNamespaceLister {
	return integrationAccountSessionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IntegrationAccountSessionNamespaceLister helps list and get IntegrationAccountSessions.
// All objects returned here must be treated as read-only.
type IntegrationAccountSessionNamespaceLister interface {
	// List lists all IntegrationAccountSessions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IntegrationAccountSession, err error)
	// Get retrieves the IntegrationAccountSession from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IntegrationAccountSession, error)
	IntegrationAccountSessionNamespaceListerExpansion
}

// integrationAccountSessionNamespaceLister implements the IntegrationAccountSessionNamespaceLister
// interface.
type integrationAccountSessionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IntegrationAccountSessions in the indexer for a given namespace.
func (s integrationAccountSessionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IntegrationAccountSession, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IntegrationAccountSession))
	})
	return ret, err
}

// Get retrieves the IntegrationAccountSession from the indexer for a given namespace and name.
func (s integrationAccountSessionNamespaceLister) Get(name string) (*v1alpha1.IntegrationAccountSession, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("integrationaccountsession"), name)
	}
	return obj.(*v1alpha1.IntegrationAccountSession), nil
}
