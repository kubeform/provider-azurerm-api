/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/logicapp/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IntegrationAccountPartnerLister helps list IntegrationAccountPartners.
// All objects returned here must be treated as read-only.
type IntegrationAccountPartnerLister interface {
	// List lists all IntegrationAccountPartners in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IntegrationAccountPartner, err error)
	// IntegrationAccountPartners returns an object that can list and get IntegrationAccountPartners.
	IntegrationAccountPartners(namespace string) IntegrationAccountPartnerNamespaceLister
	IntegrationAccountPartnerListerExpansion
}

// integrationAccountPartnerLister implements the IntegrationAccountPartnerLister interface.
type integrationAccountPartnerLister struct {
	indexer cache.Indexer
}

// NewIntegrationAccountPartnerLister returns a new IntegrationAccountPartnerLister.
func NewIntegrationAccountPartnerLister(indexer cache.Indexer) IntegrationAccountPartnerLister {
	return &integrationAccountPartnerLister{indexer: indexer}
}

// List lists all IntegrationAccountPartners in the indexer.
func (s *integrationAccountPartnerLister) List(selector labels.Selector) (ret []*v1alpha1.IntegrationAccountPartner, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IntegrationAccountPartner))
	})
	return ret, err
}

// IntegrationAccountPartners returns an object that can list and get IntegrationAccountPartners.
func (s *integrationAccountPartnerLister) IntegrationAccountPartners(namespace string) IntegrationAccountPartnerNamespaceLister {
	return integrationAccountPartnerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IntegrationAccountPartnerNamespaceLister helps list and get IntegrationAccountPartners.
// All objects returned here must be treated as read-only.
type IntegrationAccountPartnerNamespaceLister interface {
	// List lists all IntegrationAccountPartners in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IntegrationAccountPartner, err error)
	// Get retrieves the IntegrationAccountPartner from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IntegrationAccountPartner, error)
	IntegrationAccountPartnerNamespaceListerExpansion
}

// integrationAccountPartnerNamespaceLister implements the IntegrationAccountPartnerNamespaceLister
// interface.
type integrationAccountPartnerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IntegrationAccountPartners in the indexer for a given namespace.
func (s integrationAccountPartnerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IntegrationAccountPartner, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IntegrationAccountPartner))
	})
	return ret, err
}

// Get retrieves the IntegrationAccountPartner from the indexer for a given namespace and name.
func (s integrationAccountPartnerNamespaceLister) Get(name string) (*v1alpha1.IntegrationAccountPartner, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("integrationaccountpartner"), name)
	}
	return obj.(*v1alpha1.IntegrationAccountPartner), nil
}
