/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/logicapp/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ActionCustomLister helps list ActionCustoms.
// All objects returned here must be treated as read-only.
type ActionCustomLister interface {
	// List lists all ActionCustoms in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ActionCustom, err error)
	// ActionCustoms returns an object that can list and get ActionCustoms.
	ActionCustoms(namespace string) ActionCustomNamespaceLister
	ActionCustomListerExpansion
}

// actionCustomLister implements the ActionCustomLister interface.
type actionCustomLister struct {
	indexer cache.Indexer
}

// NewActionCustomLister returns a new ActionCustomLister.
func NewActionCustomLister(indexer cache.Indexer) ActionCustomLister {
	return &actionCustomLister{indexer: indexer}
}

// List lists all ActionCustoms in the indexer.
func (s *actionCustomLister) List(selector labels.Selector) (ret []*v1alpha1.ActionCustom, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ActionCustom))
	})
	return ret, err
}

// ActionCustoms returns an object that can list and get ActionCustoms.
func (s *actionCustomLister) ActionCustoms(namespace string) ActionCustomNamespaceLister {
	return actionCustomNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ActionCustomNamespaceLister helps list and get ActionCustoms.
// All objects returned here must be treated as read-only.
type ActionCustomNamespaceLister interface {
	// List lists all ActionCustoms in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ActionCustom, err error)
	// Get retrieves the ActionCustom from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ActionCustom, error)
	ActionCustomNamespaceListerExpansion
}

// actionCustomNamespaceLister implements the ActionCustomNamespaceLister
// interface.
type actionCustomNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ActionCustoms in the indexer for a given namespace.
func (s actionCustomNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ActionCustom, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ActionCustom))
	})
	return ret, err
}

// Get retrieves the ActionCustom from the indexer for a given namespace and name.
func (s actionCustomNamespaceLister) Get(name string) (*v1alpha1.ActionCustom, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("actioncustom"), name)
	}
	return obj.(*v1alpha1.ActionCustom), nil
}
