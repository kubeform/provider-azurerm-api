/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/logicapp/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TriggerHTTPRequestLister helps list TriggerHTTPRequests.
// All objects returned here must be treated as read-only.
type TriggerHTTPRequestLister interface {
	// List lists all TriggerHTTPRequests in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TriggerHTTPRequest, err error)
	// TriggerHTTPRequests returns an object that can list and get TriggerHTTPRequests.
	TriggerHTTPRequests(namespace string) TriggerHTTPRequestNamespaceLister
	TriggerHTTPRequestListerExpansion
}

// triggerHTTPRequestLister implements the TriggerHTTPRequestLister interface.
type triggerHTTPRequestLister struct {
	indexer cache.Indexer
}

// NewTriggerHTTPRequestLister returns a new TriggerHTTPRequestLister.
func NewTriggerHTTPRequestLister(indexer cache.Indexer) TriggerHTTPRequestLister {
	return &triggerHTTPRequestLister{indexer: indexer}
}

// List lists all TriggerHTTPRequests in the indexer.
func (s *triggerHTTPRequestLister) List(selector labels.Selector) (ret []*v1alpha1.TriggerHTTPRequest, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TriggerHTTPRequest))
	})
	return ret, err
}

// TriggerHTTPRequests returns an object that can list and get TriggerHTTPRequests.
func (s *triggerHTTPRequestLister) TriggerHTTPRequests(namespace string) TriggerHTTPRequestNamespaceLister {
	return triggerHTTPRequestNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TriggerHTTPRequestNamespaceLister helps list and get TriggerHTTPRequests.
// All objects returned here must be treated as read-only.
type TriggerHTTPRequestNamespaceLister interface {
	// List lists all TriggerHTTPRequests in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TriggerHTTPRequest, err error)
	// Get retrieves the TriggerHTTPRequest from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TriggerHTTPRequest, error)
	TriggerHTTPRequestNamespaceListerExpansion
}

// triggerHTTPRequestNamespaceLister implements the TriggerHTTPRequestNamespaceLister
// interface.
type triggerHTTPRequestNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TriggerHTTPRequests in the indexer for a given namespace.
func (s triggerHTTPRequestNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TriggerHTTPRequest, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TriggerHTTPRequest))
	})
	return ret, err
}

// Get retrieves the TriggerHTTPRequest from the indexer for a given namespace and name.
func (s triggerHTTPRequestNamespaceLister) Get(name string) (*v1alpha1.TriggerHTTPRequest, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("triggerhttprequest"), name)
	}
	return obj.(*v1alpha1.TriggerHTTPRequest), nil
}
