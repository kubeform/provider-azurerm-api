/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/logicapp/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StandardLister helps list Standards.
// All objects returned here must be treated as read-only.
type StandardLister interface {
	// List lists all Standards in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Standard, err error)
	// Standards returns an object that can list and get Standards.
	Standards(namespace string) StandardNamespaceLister
	StandardListerExpansion
}

// standardLister implements the StandardLister interface.
type standardLister struct {
	indexer cache.Indexer
}

// NewStandardLister returns a new StandardLister.
func NewStandardLister(indexer cache.Indexer) StandardLister {
	return &standardLister{indexer: indexer}
}

// List lists all Standards in the indexer.
func (s *standardLister) List(selector labels.Selector) (ret []*v1alpha1.Standard, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Standard))
	})
	return ret, err
}

// Standards returns an object that can list and get Standards.
func (s *standardLister) Standards(namespace string) StandardNamespaceLister {
	return standardNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StandardNamespaceLister helps list and get Standards.
// All objects returned here must be treated as read-only.
type StandardNamespaceLister interface {
	// List lists all Standards in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Standard, err error)
	// Get retrieves the Standard from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Standard, error)
	StandardNamespaceListerExpansion
}

// standardNamespaceLister implements the StandardNamespaceLister
// interface.
type standardNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Standards in the indexer for a given namespace.
func (s standardNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Standard, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Standard))
	})
	return ret, err
}

// Get retrieves the Standard from the indexer for a given namespace and name.
func (s standardNamespaceLister) Get(name string) (*v1alpha1.Standard, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("standard"), name)
	}
	return obj.(*v1alpha1.Standard), nil
}
