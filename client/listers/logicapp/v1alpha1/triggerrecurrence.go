/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/logicapp/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TriggerRecurrenceLister helps list TriggerRecurrences.
// All objects returned here must be treated as read-only.
type TriggerRecurrenceLister interface {
	// List lists all TriggerRecurrences in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TriggerRecurrence, err error)
	// TriggerRecurrences returns an object that can list and get TriggerRecurrences.
	TriggerRecurrences(namespace string) TriggerRecurrenceNamespaceLister
	TriggerRecurrenceListerExpansion
}

// triggerRecurrenceLister implements the TriggerRecurrenceLister interface.
type triggerRecurrenceLister struct {
	indexer cache.Indexer
}

// NewTriggerRecurrenceLister returns a new TriggerRecurrenceLister.
func NewTriggerRecurrenceLister(indexer cache.Indexer) TriggerRecurrenceLister {
	return &triggerRecurrenceLister{indexer: indexer}
}

// List lists all TriggerRecurrences in the indexer.
func (s *triggerRecurrenceLister) List(selector labels.Selector) (ret []*v1alpha1.TriggerRecurrence, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TriggerRecurrence))
	})
	return ret, err
}

// TriggerRecurrences returns an object that can list and get TriggerRecurrences.
func (s *triggerRecurrenceLister) TriggerRecurrences(namespace string) TriggerRecurrenceNamespaceLister {
	return triggerRecurrenceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TriggerRecurrenceNamespaceLister helps list and get TriggerRecurrences.
// All objects returned here must be treated as read-only.
type TriggerRecurrenceNamespaceLister interface {
	// List lists all TriggerRecurrences in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TriggerRecurrence, err error)
	// Get retrieves the TriggerRecurrence from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TriggerRecurrence, error)
	TriggerRecurrenceNamespaceListerExpansion
}

// triggerRecurrenceNamespaceLister implements the TriggerRecurrenceNamespaceLister
// interface.
type triggerRecurrenceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TriggerRecurrences in the indexer for a given namespace.
func (s triggerRecurrenceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TriggerRecurrence, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TriggerRecurrence))
	})
	return ret, err
}

// Get retrieves the TriggerRecurrence from the indexer for a given namespace and name.
func (s triggerRecurrenceNamespaceLister) Get(name string) (*v1alpha1.TriggerRecurrence, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("triggerrecurrence"), name)
	}
	return obj.(*v1alpha1.TriggerRecurrence), nil
}
