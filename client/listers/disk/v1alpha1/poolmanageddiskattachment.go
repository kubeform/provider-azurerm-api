/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/disk/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PoolManagedDiskAttachmentLister helps list PoolManagedDiskAttachments.
// All objects returned here must be treated as read-only.
type PoolManagedDiskAttachmentLister interface {
	// List lists all PoolManagedDiskAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PoolManagedDiskAttachment, err error)
	// PoolManagedDiskAttachments returns an object that can list and get PoolManagedDiskAttachments.
	PoolManagedDiskAttachments(namespace string) PoolManagedDiskAttachmentNamespaceLister
	PoolManagedDiskAttachmentListerExpansion
}

// poolManagedDiskAttachmentLister implements the PoolManagedDiskAttachmentLister interface.
type poolManagedDiskAttachmentLister struct {
	indexer cache.Indexer
}

// NewPoolManagedDiskAttachmentLister returns a new PoolManagedDiskAttachmentLister.
func NewPoolManagedDiskAttachmentLister(indexer cache.Indexer) PoolManagedDiskAttachmentLister {
	return &poolManagedDiskAttachmentLister{indexer: indexer}
}

// List lists all PoolManagedDiskAttachments in the indexer.
func (s *poolManagedDiskAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.PoolManagedDiskAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PoolManagedDiskAttachment))
	})
	return ret, err
}

// PoolManagedDiskAttachments returns an object that can list and get PoolManagedDiskAttachments.
func (s *poolManagedDiskAttachmentLister) PoolManagedDiskAttachments(namespace string) PoolManagedDiskAttachmentNamespaceLister {
	return poolManagedDiskAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PoolManagedDiskAttachmentNamespaceLister helps list and get PoolManagedDiskAttachments.
// All objects returned here must be treated as read-only.
type PoolManagedDiskAttachmentNamespaceLister interface {
	// List lists all PoolManagedDiskAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PoolManagedDiskAttachment, err error)
	// Get retrieves the PoolManagedDiskAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PoolManagedDiskAttachment, error)
	PoolManagedDiskAttachmentNamespaceListerExpansion
}

// poolManagedDiskAttachmentNamespaceLister implements the PoolManagedDiskAttachmentNamespaceLister
// interface.
type poolManagedDiskAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PoolManagedDiskAttachments in the indexer for a given namespace.
func (s poolManagedDiskAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PoolManagedDiskAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PoolManagedDiskAttachment))
	})
	return ret, err
}

// Get retrieves the PoolManagedDiskAttachment from the indexer for a given namespace and name.
func (s poolManagedDiskAttachmentNamespaceLister) Get(name string) (*v1alpha1.PoolManagedDiskAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("poolmanageddiskattachment"), name)
	}
	return obj.(*v1alpha1.PoolManagedDiskAttachment), nil
}
