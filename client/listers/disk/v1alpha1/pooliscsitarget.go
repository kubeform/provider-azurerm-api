/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/disk/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PoolIscsiTargetLister helps list PoolIscsiTargets.
// All objects returned here must be treated as read-only.
type PoolIscsiTargetLister interface {
	// List lists all PoolIscsiTargets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PoolIscsiTarget, err error)
	// PoolIscsiTargets returns an object that can list and get PoolIscsiTargets.
	PoolIscsiTargets(namespace string) PoolIscsiTargetNamespaceLister
	PoolIscsiTargetListerExpansion
}

// poolIscsiTargetLister implements the PoolIscsiTargetLister interface.
type poolIscsiTargetLister struct {
	indexer cache.Indexer
}

// NewPoolIscsiTargetLister returns a new PoolIscsiTargetLister.
func NewPoolIscsiTargetLister(indexer cache.Indexer) PoolIscsiTargetLister {
	return &poolIscsiTargetLister{indexer: indexer}
}

// List lists all PoolIscsiTargets in the indexer.
func (s *poolIscsiTargetLister) List(selector labels.Selector) (ret []*v1alpha1.PoolIscsiTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PoolIscsiTarget))
	})
	return ret, err
}

// PoolIscsiTargets returns an object that can list and get PoolIscsiTargets.
func (s *poolIscsiTargetLister) PoolIscsiTargets(namespace string) PoolIscsiTargetNamespaceLister {
	return poolIscsiTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PoolIscsiTargetNamespaceLister helps list and get PoolIscsiTargets.
// All objects returned here must be treated as read-only.
type PoolIscsiTargetNamespaceLister interface {
	// List lists all PoolIscsiTargets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PoolIscsiTarget, err error)
	// Get retrieves the PoolIscsiTarget from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PoolIscsiTarget, error)
	PoolIscsiTargetNamespaceListerExpansion
}

// poolIscsiTargetNamespaceLister implements the PoolIscsiTargetNamespaceLister
// interface.
type poolIscsiTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PoolIscsiTargets in the indexer for a given namespace.
func (s poolIscsiTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PoolIscsiTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PoolIscsiTarget))
	})
	return ret, err
}

// Get retrieves the PoolIscsiTarget from the indexer for a given namespace and name.
func (s poolIscsiTargetNamespaceLister) Get(name string) (*v1alpha1.PoolIscsiTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("pooliscsitarget"), name)
	}
	return obj.(*v1alpha1.PoolIscsiTarget), nil
}
