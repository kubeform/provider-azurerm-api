/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/sql/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ElasticpoolLister helps list Elasticpools.
// All objects returned here must be treated as read-only.
type ElasticpoolLister interface {
	// List lists all Elasticpools in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Elasticpool, err error)
	// Elasticpools returns an object that can list and get Elasticpools.
	Elasticpools(namespace string) ElasticpoolNamespaceLister
	ElasticpoolListerExpansion
}

// elasticpoolLister implements the ElasticpoolLister interface.
type elasticpoolLister struct {
	indexer cache.Indexer
}

// NewElasticpoolLister returns a new ElasticpoolLister.
func NewElasticpoolLister(indexer cache.Indexer) ElasticpoolLister {
	return &elasticpoolLister{indexer: indexer}
}

// List lists all Elasticpools in the indexer.
func (s *elasticpoolLister) List(selector labels.Selector) (ret []*v1alpha1.Elasticpool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Elasticpool))
	})
	return ret, err
}

// Elasticpools returns an object that can list and get Elasticpools.
func (s *elasticpoolLister) Elasticpools(namespace string) ElasticpoolNamespaceLister {
	return elasticpoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ElasticpoolNamespaceLister helps list and get Elasticpools.
// All objects returned here must be treated as read-only.
type ElasticpoolNamespaceLister interface {
	// List lists all Elasticpools in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Elasticpool, err error)
	// Get retrieves the Elasticpool from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Elasticpool, error)
	ElasticpoolNamespaceListerExpansion
}

// elasticpoolNamespaceLister implements the ElasticpoolNamespaceLister
// interface.
type elasticpoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Elasticpools in the indexer for a given namespace.
func (s elasticpoolNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Elasticpool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Elasticpool))
	})
	return ret, err
}

// Get retrieves the Elasticpool from the indexer for a given namespace and name.
func (s elasticpoolNamespaceLister) Get(name string) (*v1alpha1.Elasticpool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("elasticpool"), name)
	}
	return obj.(*v1alpha1.Elasticpool), nil
}
