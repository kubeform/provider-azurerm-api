/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/monitor/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ScheduledQueryRulesAlertLister helps list ScheduledQueryRulesAlerts.
// All objects returned here must be treated as read-only.
type ScheduledQueryRulesAlertLister interface {
	// List lists all ScheduledQueryRulesAlerts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ScheduledQueryRulesAlert, err error)
	// ScheduledQueryRulesAlerts returns an object that can list and get ScheduledQueryRulesAlerts.
	ScheduledQueryRulesAlerts(namespace string) ScheduledQueryRulesAlertNamespaceLister
	ScheduledQueryRulesAlertListerExpansion
}

// scheduledQueryRulesAlertLister implements the ScheduledQueryRulesAlertLister interface.
type scheduledQueryRulesAlertLister struct {
	indexer cache.Indexer
}

// NewScheduledQueryRulesAlertLister returns a new ScheduledQueryRulesAlertLister.
func NewScheduledQueryRulesAlertLister(indexer cache.Indexer) ScheduledQueryRulesAlertLister {
	return &scheduledQueryRulesAlertLister{indexer: indexer}
}

// List lists all ScheduledQueryRulesAlerts in the indexer.
func (s *scheduledQueryRulesAlertLister) List(selector labels.Selector) (ret []*v1alpha1.ScheduledQueryRulesAlert, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ScheduledQueryRulesAlert))
	})
	return ret, err
}

// ScheduledQueryRulesAlerts returns an object that can list and get ScheduledQueryRulesAlerts.
func (s *scheduledQueryRulesAlertLister) ScheduledQueryRulesAlerts(namespace string) ScheduledQueryRulesAlertNamespaceLister {
	return scheduledQueryRulesAlertNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ScheduledQueryRulesAlertNamespaceLister helps list and get ScheduledQueryRulesAlerts.
// All objects returned here must be treated as read-only.
type ScheduledQueryRulesAlertNamespaceLister interface {
	// List lists all ScheduledQueryRulesAlerts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ScheduledQueryRulesAlert, err error)
	// Get retrieves the ScheduledQueryRulesAlert from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ScheduledQueryRulesAlert, error)
	ScheduledQueryRulesAlertNamespaceListerExpansion
}

// scheduledQueryRulesAlertNamespaceLister implements the ScheduledQueryRulesAlertNamespaceLister
// interface.
type scheduledQueryRulesAlertNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ScheduledQueryRulesAlerts in the indexer for a given namespace.
func (s scheduledQueryRulesAlertNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ScheduledQueryRulesAlert, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ScheduledQueryRulesAlert))
	})
	return ret, err
}

// Get retrieves the ScheduledQueryRulesAlert from the indexer for a given namespace and name.
func (s scheduledQueryRulesAlertNamespaceLister) Get(name string) (*v1alpha1.ScheduledQueryRulesAlert, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("scheduledqueryrulesalert"), name)
	}
	return obj.(*v1alpha1.ScheduledQueryRulesAlert), nil
}
