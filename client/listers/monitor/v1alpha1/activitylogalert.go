/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/monitor/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ActivityLogAlertLister helps list ActivityLogAlerts.
// All objects returned here must be treated as read-only.
type ActivityLogAlertLister interface {
	// List lists all ActivityLogAlerts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ActivityLogAlert, err error)
	// ActivityLogAlerts returns an object that can list and get ActivityLogAlerts.
	ActivityLogAlerts(namespace string) ActivityLogAlertNamespaceLister
	ActivityLogAlertListerExpansion
}

// activityLogAlertLister implements the ActivityLogAlertLister interface.
type activityLogAlertLister struct {
	indexer cache.Indexer
}

// NewActivityLogAlertLister returns a new ActivityLogAlertLister.
func NewActivityLogAlertLister(indexer cache.Indexer) ActivityLogAlertLister {
	return &activityLogAlertLister{indexer: indexer}
}

// List lists all ActivityLogAlerts in the indexer.
func (s *activityLogAlertLister) List(selector labels.Selector) (ret []*v1alpha1.ActivityLogAlert, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ActivityLogAlert))
	})
	return ret, err
}

// ActivityLogAlerts returns an object that can list and get ActivityLogAlerts.
func (s *activityLogAlertLister) ActivityLogAlerts(namespace string) ActivityLogAlertNamespaceLister {
	return activityLogAlertNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ActivityLogAlertNamespaceLister helps list and get ActivityLogAlerts.
// All objects returned here must be treated as read-only.
type ActivityLogAlertNamespaceLister interface {
	// List lists all ActivityLogAlerts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ActivityLogAlert, err error)
	// Get retrieves the ActivityLogAlert from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ActivityLogAlert, error)
	ActivityLogAlertNamespaceListerExpansion
}

// activityLogAlertNamespaceLister implements the ActivityLogAlertNamespaceLister
// interface.
type activityLogAlertNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ActivityLogAlerts in the indexer for a given namespace.
func (s activityLogAlertNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ActivityLogAlert, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ActivityLogAlert))
	})
	return ret, err
}

// Get retrieves the ActivityLogAlert from the indexer for a given namespace and name.
func (s activityLogAlertNamespaceLister) Get(name string) (*v1alpha1.ActivityLogAlert, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("activitylogalert"), name)
	}
	return obj.(*v1alpha1.ActivityLogAlert), nil
}
