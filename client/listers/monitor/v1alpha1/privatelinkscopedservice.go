/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/monitor/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PrivateLinkScopedServiceLister helps list PrivateLinkScopedServices.
// All objects returned here must be treated as read-only.
type PrivateLinkScopedServiceLister interface {
	// List lists all PrivateLinkScopedServices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PrivateLinkScopedService, err error)
	// PrivateLinkScopedServices returns an object that can list and get PrivateLinkScopedServices.
	PrivateLinkScopedServices(namespace string) PrivateLinkScopedServiceNamespaceLister
	PrivateLinkScopedServiceListerExpansion
}

// privateLinkScopedServiceLister implements the PrivateLinkScopedServiceLister interface.
type privateLinkScopedServiceLister struct {
	indexer cache.Indexer
}

// NewPrivateLinkScopedServiceLister returns a new PrivateLinkScopedServiceLister.
func NewPrivateLinkScopedServiceLister(indexer cache.Indexer) PrivateLinkScopedServiceLister {
	return &privateLinkScopedServiceLister{indexer: indexer}
}

// List lists all PrivateLinkScopedServices in the indexer.
func (s *privateLinkScopedServiceLister) List(selector labels.Selector) (ret []*v1alpha1.PrivateLinkScopedService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PrivateLinkScopedService))
	})
	return ret, err
}

// PrivateLinkScopedServices returns an object that can list and get PrivateLinkScopedServices.
func (s *privateLinkScopedServiceLister) PrivateLinkScopedServices(namespace string) PrivateLinkScopedServiceNamespaceLister {
	return privateLinkScopedServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PrivateLinkScopedServiceNamespaceLister helps list and get PrivateLinkScopedServices.
// All objects returned here must be treated as read-only.
type PrivateLinkScopedServiceNamespaceLister interface {
	// List lists all PrivateLinkScopedServices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PrivateLinkScopedService, err error)
	// Get retrieves the PrivateLinkScopedService from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PrivateLinkScopedService, error)
	PrivateLinkScopedServiceNamespaceListerExpansion
}

// privateLinkScopedServiceNamespaceLister implements the PrivateLinkScopedServiceNamespaceLister
// interface.
type privateLinkScopedServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PrivateLinkScopedServices in the indexer for a given namespace.
func (s privateLinkScopedServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PrivateLinkScopedService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PrivateLinkScopedService))
	})
	return ret, err
}

// Get retrieves the PrivateLinkScopedService from the indexer for a given namespace and name.
func (s privateLinkScopedServiceNamespaceLister) Get(name string) (*v1alpha1.PrivateLinkScopedService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("privatelinkscopedservice"), name)
	}
	return obj.(*v1alpha1.PrivateLinkScopedService), nil
}
