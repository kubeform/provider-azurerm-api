/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/monitor/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ActionRuleActionGroupLister helps list ActionRuleActionGroups.
// All objects returned here must be treated as read-only.
type ActionRuleActionGroupLister interface {
	// List lists all ActionRuleActionGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ActionRuleActionGroup, err error)
	// ActionRuleActionGroups returns an object that can list and get ActionRuleActionGroups.
	ActionRuleActionGroups(namespace string) ActionRuleActionGroupNamespaceLister
	ActionRuleActionGroupListerExpansion
}

// actionRuleActionGroupLister implements the ActionRuleActionGroupLister interface.
type actionRuleActionGroupLister struct {
	indexer cache.Indexer
}

// NewActionRuleActionGroupLister returns a new ActionRuleActionGroupLister.
func NewActionRuleActionGroupLister(indexer cache.Indexer) ActionRuleActionGroupLister {
	return &actionRuleActionGroupLister{indexer: indexer}
}

// List lists all ActionRuleActionGroups in the indexer.
func (s *actionRuleActionGroupLister) List(selector labels.Selector) (ret []*v1alpha1.ActionRuleActionGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ActionRuleActionGroup))
	})
	return ret, err
}

// ActionRuleActionGroups returns an object that can list and get ActionRuleActionGroups.
func (s *actionRuleActionGroupLister) ActionRuleActionGroups(namespace string) ActionRuleActionGroupNamespaceLister {
	return actionRuleActionGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ActionRuleActionGroupNamespaceLister helps list and get ActionRuleActionGroups.
// All objects returned here must be treated as read-only.
type ActionRuleActionGroupNamespaceLister interface {
	// List lists all ActionRuleActionGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ActionRuleActionGroup, err error)
	// Get retrieves the ActionRuleActionGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ActionRuleActionGroup, error)
	ActionRuleActionGroupNamespaceListerExpansion
}

// actionRuleActionGroupNamespaceLister implements the ActionRuleActionGroupNamespaceLister
// interface.
type actionRuleActionGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ActionRuleActionGroups in the indexer for a given namespace.
func (s actionRuleActionGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ActionRuleActionGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ActionRuleActionGroup))
	})
	return ret, err
}

// Get retrieves the ActionRuleActionGroup from the indexer for a given namespace and name.
func (s actionRuleActionGroupNamespaceLister) Get(name string) (*v1alpha1.ActionRuleActionGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("actionruleactiongroup"), name)
	}
	return obj.(*v1alpha1.ActionRuleActionGroup), nil
}
