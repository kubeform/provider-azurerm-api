/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/monitor/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AadDiagnosticSettingLister helps list AadDiagnosticSettings.
// All objects returned here must be treated as read-only.
type AadDiagnosticSettingLister interface {
	// List lists all AadDiagnosticSettings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AadDiagnosticSetting, err error)
	// AadDiagnosticSettings returns an object that can list and get AadDiagnosticSettings.
	AadDiagnosticSettings(namespace string) AadDiagnosticSettingNamespaceLister
	AadDiagnosticSettingListerExpansion
}

// aadDiagnosticSettingLister implements the AadDiagnosticSettingLister interface.
type aadDiagnosticSettingLister struct {
	indexer cache.Indexer
}

// NewAadDiagnosticSettingLister returns a new AadDiagnosticSettingLister.
func NewAadDiagnosticSettingLister(indexer cache.Indexer) AadDiagnosticSettingLister {
	return &aadDiagnosticSettingLister{indexer: indexer}
}

// List lists all AadDiagnosticSettings in the indexer.
func (s *aadDiagnosticSettingLister) List(selector labels.Selector) (ret []*v1alpha1.AadDiagnosticSetting, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AadDiagnosticSetting))
	})
	return ret, err
}

// AadDiagnosticSettings returns an object that can list and get AadDiagnosticSettings.
func (s *aadDiagnosticSettingLister) AadDiagnosticSettings(namespace string) AadDiagnosticSettingNamespaceLister {
	return aadDiagnosticSettingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AadDiagnosticSettingNamespaceLister helps list and get AadDiagnosticSettings.
// All objects returned here must be treated as read-only.
type AadDiagnosticSettingNamespaceLister interface {
	// List lists all AadDiagnosticSettings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AadDiagnosticSetting, err error)
	// Get retrieves the AadDiagnosticSetting from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AadDiagnosticSetting, error)
	AadDiagnosticSettingNamespaceListerExpansion
}

// aadDiagnosticSettingNamespaceLister implements the AadDiagnosticSettingNamespaceLister
// interface.
type aadDiagnosticSettingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AadDiagnosticSettings in the indexer for a given namespace.
func (s aadDiagnosticSettingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AadDiagnosticSetting, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AadDiagnosticSetting))
	})
	return ret, err
}

// Get retrieves the AadDiagnosticSetting from the indexer for a given namespace and name.
func (s aadDiagnosticSettingNamespaceLister) Get(name string) (*v1alpha1.AadDiagnosticSetting, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("aaddiagnosticsetting"), name)
	}
	return obj.(*v1alpha1.AadDiagnosticSetting), nil
}
