/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/monitor/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MetricAlertLister helps list MetricAlerts.
// All objects returned here must be treated as read-only.
type MetricAlertLister interface {
	// List lists all MetricAlerts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MetricAlert, err error)
	// MetricAlerts returns an object that can list and get MetricAlerts.
	MetricAlerts(namespace string) MetricAlertNamespaceLister
	MetricAlertListerExpansion
}

// metricAlertLister implements the MetricAlertLister interface.
type metricAlertLister struct {
	indexer cache.Indexer
}

// NewMetricAlertLister returns a new MetricAlertLister.
func NewMetricAlertLister(indexer cache.Indexer) MetricAlertLister {
	return &metricAlertLister{indexer: indexer}
}

// List lists all MetricAlerts in the indexer.
func (s *metricAlertLister) List(selector labels.Selector) (ret []*v1alpha1.MetricAlert, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MetricAlert))
	})
	return ret, err
}

// MetricAlerts returns an object that can list and get MetricAlerts.
func (s *metricAlertLister) MetricAlerts(namespace string) MetricAlertNamespaceLister {
	return metricAlertNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MetricAlertNamespaceLister helps list and get MetricAlerts.
// All objects returned here must be treated as read-only.
type MetricAlertNamespaceLister interface {
	// List lists all MetricAlerts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MetricAlert, err error)
	// Get retrieves the MetricAlert from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MetricAlert, error)
	MetricAlertNamespaceListerExpansion
}

// metricAlertNamespaceLister implements the MetricAlertNamespaceLister
// interface.
type metricAlertNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MetricAlerts in the indexer for a given namespace.
func (s metricAlertNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MetricAlert, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MetricAlert))
	})
	return ret, err
}

// Get retrieves the MetricAlert from the indexer for a given namespace and name.
func (s metricAlertNamespaceLister) Get(name string) (*v1alpha1.MetricAlert, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("metricalert"), name)
	}
	return obj.(*v1alpha1.MetricAlert), nil
}
