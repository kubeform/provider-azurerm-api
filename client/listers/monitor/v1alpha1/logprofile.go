/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/monitor/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LogProfileLister helps list LogProfiles.
// All objects returned here must be treated as read-only.
type LogProfileLister interface {
	// List lists all LogProfiles in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LogProfile, err error)
	// LogProfiles returns an object that can list and get LogProfiles.
	LogProfiles(namespace string) LogProfileNamespaceLister
	LogProfileListerExpansion
}

// logProfileLister implements the LogProfileLister interface.
type logProfileLister struct {
	indexer cache.Indexer
}

// NewLogProfileLister returns a new LogProfileLister.
func NewLogProfileLister(indexer cache.Indexer) LogProfileLister {
	return &logProfileLister{indexer: indexer}
}

// List lists all LogProfiles in the indexer.
func (s *logProfileLister) List(selector labels.Selector) (ret []*v1alpha1.LogProfile, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LogProfile))
	})
	return ret, err
}

// LogProfiles returns an object that can list and get LogProfiles.
func (s *logProfileLister) LogProfiles(namespace string) LogProfileNamespaceLister {
	return logProfileNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LogProfileNamespaceLister helps list and get LogProfiles.
// All objects returned here must be treated as read-only.
type LogProfileNamespaceLister interface {
	// List lists all LogProfiles in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LogProfile, err error)
	// Get retrieves the LogProfile from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LogProfile, error)
	LogProfileNamespaceListerExpansion
}

// logProfileNamespaceLister implements the LogProfileNamespaceLister
// interface.
type logProfileNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LogProfiles in the indexer for a given namespace.
func (s logProfileNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LogProfile, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LogProfile))
	})
	return ret, err
}

// Get retrieves the LogProfile from the indexer for a given namespace and name.
func (s logProfileNamespaceLister) Get(name string) (*v1alpha1.LogProfile, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("logprofile"), name)
	}
	return obj.(*v1alpha1.LogProfile), nil
}
