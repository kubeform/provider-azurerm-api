/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/postgresql/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ActiveDirectoryAdministratorLister helps list ActiveDirectoryAdministrators.
// All objects returned here must be treated as read-only.
type ActiveDirectoryAdministratorLister interface {
	// List lists all ActiveDirectoryAdministrators in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ActiveDirectoryAdministrator, err error)
	// ActiveDirectoryAdministrators returns an object that can list and get ActiveDirectoryAdministrators.
	ActiveDirectoryAdministrators(namespace string) ActiveDirectoryAdministratorNamespaceLister
	ActiveDirectoryAdministratorListerExpansion
}

// activeDirectoryAdministratorLister implements the ActiveDirectoryAdministratorLister interface.
type activeDirectoryAdministratorLister struct {
	indexer cache.Indexer
}

// NewActiveDirectoryAdministratorLister returns a new ActiveDirectoryAdministratorLister.
func NewActiveDirectoryAdministratorLister(indexer cache.Indexer) ActiveDirectoryAdministratorLister {
	return &activeDirectoryAdministratorLister{indexer: indexer}
}

// List lists all ActiveDirectoryAdministrators in the indexer.
func (s *activeDirectoryAdministratorLister) List(selector labels.Selector) (ret []*v1alpha1.ActiveDirectoryAdministrator, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ActiveDirectoryAdministrator))
	})
	return ret, err
}

// ActiveDirectoryAdministrators returns an object that can list and get ActiveDirectoryAdministrators.
func (s *activeDirectoryAdministratorLister) ActiveDirectoryAdministrators(namespace string) ActiveDirectoryAdministratorNamespaceLister {
	return activeDirectoryAdministratorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ActiveDirectoryAdministratorNamespaceLister helps list and get ActiveDirectoryAdministrators.
// All objects returned here must be treated as read-only.
type ActiveDirectoryAdministratorNamespaceLister interface {
	// List lists all ActiveDirectoryAdministrators in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ActiveDirectoryAdministrator, err error)
	// Get retrieves the ActiveDirectoryAdministrator from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ActiveDirectoryAdministrator, error)
	ActiveDirectoryAdministratorNamespaceListerExpansion
}

// activeDirectoryAdministratorNamespaceLister implements the ActiveDirectoryAdministratorNamespaceLister
// interface.
type activeDirectoryAdministratorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ActiveDirectoryAdministrators in the indexer for a given namespace.
func (s activeDirectoryAdministratorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ActiveDirectoryAdministrator, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ActiveDirectoryAdministrator))
	})
	return ret, err
}

// Get retrieves the ActiveDirectoryAdministrator from the indexer for a given namespace and name.
func (s activeDirectoryAdministratorNamespaceLister) Get(name string) (*v1alpha1.ActiveDirectoryAdministrator, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("activedirectoryadministrator"), name)
	}
	return obj.(*v1alpha1.ActiveDirectoryAdministrator), nil
}
