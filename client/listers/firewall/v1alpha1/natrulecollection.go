/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/firewall/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NatRuleCollectionLister helps list NatRuleCollections.
// All objects returned here must be treated as read-only.
type NatRuleCollectionLister interface {
	// List lists all NatRuleCollections in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NatRuleCollection, err error)
	// NatRuleCollections returns an object that can list and get NatRuleCollections.
	NatRuleCollections(namespace string) NatRuleCollectionNamespaceLister
	NatRuleCollectionListerExpansion
}

// natRuleCollectionLister implements the NatRuleCollectionLister interface.
type natRuleCollectionLister struct {
	indexer cache.Indexer
}

// NewNatRuleCollectionLister returns a new NatRuleCollectionLister.
func NewNatRuleCollectionLister(indexer cache.Indexer) NatRuleCollectionLister {
	return &natRuleCollectionLister{indexer: indexer}
}

// List lists all NatRuleCollections in the indexer.
func (s *natRuleCollectionLister) List(selector labels.Selector) (ret []*v1alpha1.NatRuleCollection, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NatRuleCollection))
	})
	return ret, err
}

// NatRuleCollections returns an object that can list and get NatRuleCollections.
func (s *natRuleCollectionLister) NatRuleCollections(namespace string) NatRuleCollectionNamespaceLister {
	return natRuleCollectionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NatRuleCollectionNamespaceLister helps list and get NatRuleCollections.
// All objects returned here must be treated as read-only.
type NatRuleCollectionNamespaceLister interface {
	// List lists all NatRuleCollections in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NatRuleCollection, err error)
	// Get retrieves the NatRuleCollection from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NatRuleCollection, error)
	NatRuleCollectionNamespaceListerExpansion
}

// natRuleCollectionNamespaceLister implements the NatRuleCollectionNamespaceLister
// interface.
type natRuleCollectionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NatRuleCollections in the indexer for a given namespace.
func (s natRuleCollectionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NatRuleCollection, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NatRuleCollection))
	})
	return ret, err
}

// Get retrieves the NatRuleCollection from the indexer for a given namespace and name.
func (s natRuleCollectionNamespaceLister) Get(name string) (*v1alpha1.NatRuleCollection, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("natrulecollection"), name)
	}
	return obj.(*v1alpha1.NatRuleCollection), nil
}
