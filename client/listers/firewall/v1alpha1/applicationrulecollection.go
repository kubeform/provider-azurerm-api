/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/firewall/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApplicationRuleCollectionLister helps list ApplicationRuleCollections.
// All objects returned here must be treated as read-only.
type ApplicationRuleCollectionLister interface {
	// List lists all ApplicationRuleCollections in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApplicationRuleCollection, err error)
	// ApplicationRuleCollections returns an object that can list and get ApplicationRuleCollections.
	ApplicationRuleCollections(namespace string) ApplicationRuleCollectionNamespaceLister
	ApplicationRuleCollectionListerExpansion
}

// applicationRuleCollectionLister implements the ApplicationRuleCollectionLister interface.
type applicationRuleCollectionLister struct {
	indexer cache.Indexer
}

// NewApplicationRuleCollectionLister returns a new ApplicationRuleCollectionLister.
func NewApplicationRuleCollectionLister(indexer cache.Indexer) ApplicationRuleCollectionLister {
	return &applicationRuleCollectionLister{indexer: indexer}
}

// List lists all ApplicationRuleCollections in the indexer.
func (s *applicationRuleCollectionLister) List(selector labels.Selector) (ret []*v1alpha1.ApplicationRuleCollection, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApplicationRuleCollection))
	})
	return ret, err
}

// ApplicationRuleCollections returns an object that can list and get ApplicationRuleCollections.
func (s *applicationRuleCollectionLister) ApplicationRuleCollections(namespace string) ApplicationRuleCollectionNamespaceLister {
	return applicationRuleCollectionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApplicationRuleCollectionNamespaceLister helps list and get ApplicationRuleCollections.
// All objects returned here must be treated as read-only.
type ApplicationRuleCollectionNamespaceLister interface {
	// List lists all ApplicationRuleCollections in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApplicationRuleCollection, err error)
	// Get retrieves the ApplicationRuleCollection from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ApplicationRuleCollection, error)
	ApplicationRuleCollectionNamespaceListerExpansion
}

// applicationRuleCollectionNamespaceLister implements the ApplicationRuleCollectionNamespaceLister
// interface.
type applicationRuleCollectionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApplicationRuleCollections in the indexer for a given namespace.
func (s applicationRuleCollectionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApplicationRuleCollection, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApplicationRuleCollection))
	})
	return ret, err
}

// Get retrieves the ApplicationRuleCollection from the indexer for a given namespace and name.
func (s applicationRuleCollectionNamespaceLister) Get(name string) (*v1alpha1.ApplicationRuleCollection, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("applicationrulecollection"), name)
	}
	return obj.(*v1alpha1.ApplicationRuleCollection), nil
}
