/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/firewall/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PolicyRuleCollectionGroupLister helps list PolicyRuleCollectionGroups.
// All objects returned here must be treated as read-only.
type PolicyRuleCollectionGroupLister interface {
	// List lists all PolicyRuleCollectionGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PolicyRuleCollectionGroup, err error)
	// PolicyRuleCollectionGroups returns an object that can list and get PolicyRuleCollectionGroups.
	PolicyRuleCollectionGroups(namespace string) PolicyRuleCollectionGroupNamespaceLister
	PolicyRuleCollectionGroupListerExpansion
}

// policyRuleCollectionGroupLister implements the PolicyRuleCollectionGroupLister interface.
type policyRuleCollectionGroupLister struct {
	indexer cache.Indexer
}

// NewPolicyRuleCollectionGroupLister returns a new PolicyRuleCollectionGroupLister.
func NewPolicyRuleCollectionGroupLister(indexer cache.Indexer) PolicyRuleCollectionGroupLister {
	return &policyRuleCollectionGroupLister{indexer: indexer}
}

// List lists all PolicyRuleCollectionGroups in the indexer.
func (s *policyRuleCollectionGroupLister) List(selector labels.Selector) (ret []*v1alpha1.PolicyRuleCollectionGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PolicyRuleCollectionGroup))
	})
	return ret, err
}

// PolicyRuleCollectionGroups returns an object that can list and get PolicyRuleCollectionGroups.
func (s *policyRuleCollectionGroupLister) PolicyRuleCollectionGroups(namespace string) PolicyRuleCollectionGroupNamespaceLister {
	return policyRuleCollectionGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PolicyRuleCollectionGroupNamespaceLister helps list and get PolicyRuleCollectionGroups.
// All objects returned here must be treated as read-only.
type PolicyRuleCollectionGroupNamespaceLister interface {
	// List lists all PolicyRuleCollectionGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PolicyRuleCollectionGroup, err error)
	// Get retrieves the PolicyRuleCollectionGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PolicyRuleCollectionGroup, error)
	PolicyRuleCollectionGroupNamespaceListerExpansion
}

// policyRuleCollectionGroupNamespaceLister implements the PolicyRuleCollectionGroupNamespaceLister
// interface.
type policyRuleCollectionGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PolicyRuleCollectionGroups in the indexer for a given namespace.
func (s policyRuleCollectionGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PolicyRuleCollectionGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PolicyRuleCollectionGroup))
	})
	return ret, err
}

// Get retrieves the PolicyRuleCollectionGroup from the indexer for a given namespace and name.
func (s policyRuleCollectionGroupNamespaceLister) Get(name string) (*v1alpha1.PolicyRuleCollectionGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("policyrulecollectiongroup"), name)
	}
	return obj.(*v1alpha1.PolicyRuleCollectionGroup), nil
}
