/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/lb/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NatRuleLister helps list NatRules.
// All objects returned here must be treated as read-only.
type NatRuleLister interface {
	// List lists all NatRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NatRule, err error)
	// NatRules returns an object that can list and get NatRules.
	NatRules(namespace string) NatRuleNamespaceLister
	NatRuleListerExpansion
}

// natRuleLister implements the NatRuleLister interface.
type natRuleLister struct {
	indexer cache.Indexer
}

// NewNatRuleLister returns a new NatRuleLister.
func NewNatRuleLister(indexer cache.Indexer) NatRuleLister {
	return &natRuleLister{indexer: indexer}
}

// List lists all NatRules in the indexer.
func (s *natRuleLister) List(selector labels.Selector) (ret []*v1alpha1.NatRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NatRule))
	})
	return ret, err
}

// NatRules returns an object that can list and get NatRules.
func (s *natRuleLister) NatRules(namespace string) NatRuleNamespaceLister {
	return natRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NatRuleNamespaceLister helps list and get NatRules.
// All objects returned here must be treated as read-only.
type NatRuleNamespaceLister interface {
	// List lists all NatRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NatRule, err error)
	// Get retrieves the NatRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NatRule, error)
	NatRuleNamespaceListerExpansion
}

// natRuleNamespaceLister implements the NatRuleNamespaceLister
// interface.
type natRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NatRules in the indexer for a given namespace.
func (s natRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NatRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NatRule))
	})
	return ret, err
}

// Get retrieves the NatRule from the indexer for a given namespace and name.
func (s natRuleNamespaceLister) Get(name string) (*v1alpha1.NatRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("natrule"), name)
	}
	return obj.(*v1alpha1.NatRule), nil
}
