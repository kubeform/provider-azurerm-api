/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/lb/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BackendAddressPoolAddressLister helps list BackendAddressPoolAddresses.
// All objects returned here must be treated as read-only.
type BackendAddressPoolAddressLister interface {
	// List lists all BackendAddressPoolAddresses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BackendAddressPoolAddress, err error)
	// BackendAddressPoolAddresses returns an object that can list and get BackendAddressPoolAddresses.
	BackendAddressPoolAddresses(namespace string) BackendAddressPoolAddressNamespaceLister
	BackendAddressPoolAddressListerExpansion
}

// backendAddressPoolAddressLister implements the BackendAddressPoolAddressLister interface.
type backendAddressPoolAddressLister struct {
	indexer cache.Indexer
}

// NewBackendAddressPoolAddressLister returns a new BackendAddressPoolAddressLister.
func NewBackendAddressPoolAddressLister(indexer cache.Indexer) BackendAddressPoolAddressLister {
	return &backendAddressPoolAddressLister{indexer: indexer}
}

// List lists all BackendAddressPoolAddresses in the indexer.
func (s *backendAddressPoolAddressLister) List(selector labels.Selector) (ret []*v1alpha1.BackendAddressPoolAddress, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BackendAddressPoolAddress))
	})
	return ret, err
}

// BackendAddressPoolAddresses returns an object that can list and get BackendAddressPoolAddresses.
func (s *backendAddressPoolAddressLister) BackendAddressPoolAddresses(namespace string) BackendAddressPoolAddressNamespaceLister {
	return backendAddressPoolAddressNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BackendAddressPoolAddressNamespaceLister helps list and get BackendAddressPoolAddresses.
// All objects returned here must be treated as read-only.
type BackendAddressPoolAddressNamespaceLister interface {
	// List lists all BackendAddressPoolAddresses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BackendAddressPoolAddress, err error)
	// Get retrieves the BackendAddressPoolAddress from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BackendAddressPoolAddress, error)
	BackendAddressPoolAddressNamespaceListerExpansion
}

// backendAddressPoolAddressNamespaceLister implements the BackendAddressPoolAddressNamespaceLister
// interface.
type backendAddressPoolAddressNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BackendAddressPoolAddresses in the indexer for a given namespace.
func (s backendAddressPoolAddressNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BackendAddressPoolAddress, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BackendAddressPoolAddress))
	})
	return ret, err
}

// Get retrieves the BackendAddressPoolAddress from the indexer for a given namespace and name.
func (s backendAddressPoolAddressNamespaceLister) Get(name string) (*v1alpha1.BackendAddressPoolAddress, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("backendaddresspooladdress"), name)
	}
	return obj.(*v1alpha1.BackendAddressPoolAddress), nil
}
