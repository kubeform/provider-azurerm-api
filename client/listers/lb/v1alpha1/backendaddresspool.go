/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/lb/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BackendAddressPoolLister helps list BackendAddressPools.
// All objects returned here must be treated as read-only.
type BackendAddressPoolLister interface {
	// List lists all BackendAddressPools in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BackendAddressPool, err error)
	// BackendAddressPools returns an object that can list and get BackendAddressPools.
	BackendAddressPools(namespace string) BackendAddressPoolNamespaceLister
	BackendAddressPoolListerExpansion
}

// backendAddressPoolLister implements the BackendAddressPoolLister interface.
type backendAddressPoolLister struct {
	indexer cache.Indexer
}

// NewBackendAddressPoolLister returns a new BackendAddressPoolLister.
func NewBackendAddressPoolLister(indexer cache.Indexer) BackendAddressPoolLister {
	return &backendAddressPoolLister{indexer: indexer}
}

// List lists all BackendAddressPools in the indexer.
func (s *backendAddressPoolLister) List(selector labels.Selector) (ret []*v1alpha1.BackendAddressPool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BackendAddressPool))
	})
	return ret, err
}

// BackendAddressPools returns an object that can list and get BackendAddressPools.
func (s *backendAddressPoolLister) BackendAddressPools(namespace string) BackendAddressPoolNamespaceLister {
	return backendAddressPoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BackendAddressPoolNamespaceLister helps list and get BackendAddressPools.
// All objects returned here must be treated as read-only.
type BackendAddressPoolNamespaceLister interface {
	// List lists all BackendAddressPools in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BackendAddressPool, err error)
	// Get retrieves the BackendAddressPool from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BackendAddressPool, error)
	BackendAddressPoolNamespaceListerExpansion
}

// backendAddressPoolNamespaceLister implements the BackendAddressPoolNamespaceLister
// interface.
type backendAddressPoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BackendAddressPools in the indexer for a given namespace.
func (s backendAddressPoolNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BackendAddressPool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BackendAddressPool))
	})
	return ret, err
}

// Get retrieves the BackendAddressPool from the indexer for a given namespace and name.
func (s backendAddressPoolNamespaceLister) Get(name string) (*v1alpha1.BackendAddressPool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("backendaddresspool"), name)
	}
	return obj.(*v1alpha1.BackendAddressPool), nil
}
