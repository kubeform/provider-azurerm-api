/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/nat/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GatewayPublicIPAssociationLister helps list GatewayPublicIPAssociations.
// All objects returned here must be treated as read-only.
type GatewayPublicIPAssociationLister interface {
	// List lists all GatewayPublicIPAssociations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GatewayPublicIPAssociation, err error)
	// GatewayPublicIPAssociations returns an object that can list and get GatewayPublicIPAssociations.
	GatewayPublicIPAssociations(namespace string) GatewayPublicIPAssociationNamespaceLister
	GatewayPublicIPAssociationListerExpansion
}

// gatewayPublicIPAssociationLister implements the GatewayPublicIPAssociationLister interface.
type gatewayPublicIPAssociationLister struct {
	indexer cache.Indexer
}

// NewGatewayPublicIPAssociationLister returns a new GatewayPublicIPAssociationLister.
func NewGatewayPublicIPAssociationLister(indexer cache.Indexer) GatewayPublicIPAssociationLister {
	return &gatewayPublicIPAssociationLister{indexer: indexer}
}

// List lists all GatewayPublicIPAssociations in the indexer.
func (s *gatewayPublicIPAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.GatewayPublicIPAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GatewayPublicIPAssociation))
	})
	return ret, err
}

// GatewayPublicIPAssociations returns an object that can list and get GatewayPublicIPAssociations.
func (s *gatewayPublicIPAssociationLister) GatewayPublicIPAssociations(namespace string) GatewayPublicIPAssociationNamespaceLister {
	return gatewayPublicIPAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GatewayPublicIPAssociationNamespaceLister helps list and get GatewayPublicIPAssociations.
// All objects returned here must be treated as read-only.
type GatewayPublicIPAssociationNamespaceLister interface {
	// List lists all GatewayPublicIPAssociations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GatewayPublicIPAssociation, err error)
	// Get retrieves the GatewayPublicIPAssociation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GatewayPublicIPAssociation, error)
	GatewayPublicIPAssociationNamespaceListerExpansion
}

// gatewayPublicIPAssociationNamespaceLister implements the GatewayPublicIPAssociationNamespaceLister
// interface.
type gatewayPublicIPAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GatewayPublicIPAssociations in the indexer for a given namespace.
func (s gatewayPublicIPAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GatewayPublicIPAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GatewayPublicIPAssociation))
	})
	return ret, err
}

// Get retrieves the GatewayPublicIPAssociation from the indexer for a given namespace and name.
func (s gatewayPublicIPAssociationNamespaceLister) Get(name string) (*v1alpha1.GatewayPublicIPAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("gatewaypublicipassociation"), name)
	}
	return obj.(*v1alpha1.GatewayPublicIPAssociation), nil
}
