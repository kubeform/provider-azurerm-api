/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/iotsecurity/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DeviceGroupLister helps list DeviceGroups.
// All objects returned here must be treated as read-only.
type DeviceGroupLister interface {
	// List lists all DeviceGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DeviceGroup, err error)
	// DeviceGroups returns an object that can list and get DeviceGroups.
	DeviceGroups(namespace string) DeviceGroupNamespaceLister
	DeviceGroupListerExpansion
}

// deviceGroupLister implements the DeviceGroupLister interface.
type deviceGroupLister struct {
	indexer cache.Indexer
}

// NewDeviceGroupLister returns a new DeviceGroupLister.
func NewDeviceGroupLister(indexer cache.Indexer) DeviceGroupLister {
	return &deviceGroupLister{indexer: indexer}
}

// List lists all DeviceGroups in the indexer.
func (s *deviceGroupLister) List(selector labels.Selector) (ret []*v1alpha1.DeviceGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DeviceGroup))
	})
	return ret, err
}

// DeviceGroups returns an object that can list and get DeviceGroups.
func (s *deviceGroupLister) DeviceGroups(namespace string) DeviceGroupNamespaceLister {
	return deviceGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DeviceGroupNamespaceLister helps list and get DeviceGroups.
// All objects returned here must be treated as read-only.
type DeviceGroupNamespaceLister interface {
	// List lists all DeviceGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DeviceGroup, err error)
	// Get retrieves the DeviceGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DeviceGroup, error)
	DeviceGroupNamespaceListerExpansion
}

// deviceGroupNamespaceLister implements the DeviceGroupNamespaceLister
// interface.
type deviceGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DeviceGroups in the indexer for a given namespace.
func (s deviceGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DeviceGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DeviceGroup))
	})
	return ret, err
}

// Get retrieves the DeviceGroup from the indexer for a given namespace and name.
func (s deviceGroupNamespaceLister) Get(name string) (*v1alpha1.DeviceGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("devicegroup"), name)
	}
	return obj.(*v1alpha1.DeviceGroup), nil
}
