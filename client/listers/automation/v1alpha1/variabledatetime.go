/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/automation/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VariableDatetimeLister helps list VariableDatetimes.
// All objects returned here must be treated as read-only.
type VariableDatetimeLister interface {
	// List lists all VariableDatetimes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VariableDatetime, err error)
	// VariableDatetimes returns an object that can list and get VariableDatetimes.
	VariableDatetimes(namespace string) VariableDatetimeNamespaceLister
	VariableDatetimeListerExpansion
}

// variableDatetimeLister implements the VariableDatetimeLister interface.
type variableDatetimeLister struct {
	indexer cache.Indexer
}

// NewVariableDatetimeLister returns a new VariableDatetimeLister.
func NewVariableDatetimeLister(indexer cache.Indexer) VariableDatetimeLister {
	return &variableDatetimeLister{indexer: indexer}
}

// List lists all VariableDatetimes in the indexer.
func (s *variableDatetimeLister) List(selector labels.Selector) (ret []*v1alpha1.VariableDatetime, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VariableDatetime))
	})
	return ret, err
}

// VariableDatetimes returns an object that can list and get VariableDatetimes.
func (s *variableDatetimeLister) VariableDatetimes(namespace string) VariableDatetimeNamespaceLister {
	return variableDatetimeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VariableDatetimeNamespaceLister helps list and get VariableDatetimes.
// All objects returned here must be treated as read-only.
type VariableDatetimeNamespaceLister interface {
	// List lists all VariableDatetimes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VariableDatetime, err error)
	// Get retrieves the VariableDatetime from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VariableDatetime, error)
	VariableDatetimeNamespaceListerExpansion
}

// variableDatetimeNamespaceLister implements the VariableDatetimeNamespaceLister
// interface.
type variableDatetimeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VariableDatetimes in the indexer for a given namespace.
func (s variableDatetimeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VariableDatetime, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VariableDatetime))
	})
	return ret, err
}

// Get retrieves the VariableDatetime from the indexer for a given namespace and name.
func (s variableDatetimeNamespaceLister) Get(name string) (*v1alpha1.VariableDatetime, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("variabledatetime"), name)
	}
	return obj.(*v1alpha1.VariableDatetime), nil
}
