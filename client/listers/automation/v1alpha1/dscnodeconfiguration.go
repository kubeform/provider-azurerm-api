/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/automation/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DscNodeconfigurationLister helps list DscNodeconfigurations.
// All objects returned here must be treated as read-only.
type DscNodeconfigurationLister interface {
	// List lists all DscNodeconfigurations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DscNodeconfiguration, err error)
	// DscNodeconfigurations returns an object that can list and get DscNodeconfigurations.
	DscNodeconfigurations(namespace string) DscNodeconfigurationNamespaceLister
	DscNodeconfigurationListerExpansion
}

// dscNodeconfigurationLister implements the DscNodeconfigurationLister interface.
type dscNodeconfigurationLister struct {
	indexer cache.Indexer
}

// NewDscNodeconfigurationLister returns a new DscNodeconfigurationLister.
func NewDscNodeconfigurationLister(indexer cache.Indexer) DscNodeconfigurationLister {
	return &dscNodeconfigurationLister{indexer: indexer}
}

// List lists all DscNodeconfigurations in the indexer.
func (s *dscNodeconfigurationLister) List(selector labels.Selector) (ret []*v1alpha1.DscNodeconfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DscNodeconfiguration))
	})
	return ret, err
}

// DscNodeconfigurations returns an object that can list and get DscNodeconfigurations.
func (s *dscNodeconfigurationLister) DscNodeconfigurations(namespace string) DscNodeconfigurationNamespaceLister {
	return dscNodeconfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DscNodeconfigurationNamespaceLister helps list and get DscNodeconfigurations.
// All objects returned here must be treated as read-only.
type DscNodeconfigurationNamespaceLister interface {
	// List lists all DscNodeconfigurations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DscNodeconfiguration, err error)
	// Get retrieves the DscNodeconfiguration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DscNodeconfiguration, error)
	DscNodeconfigurationNamespaceListerExpansion
}

// dscNodeconfigurationNamespaceLister implements the DscNodeconfigurationNamespaceLister
// interface.
type dscNodeconfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DscNodeconfigurations in the indexer for a given namespace.
func (s dscNodeconfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DscNodeconfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DscNodeconfiguration))
	})
	return ret, err
}

// Get retrieves the DscNodeconfiguration from the indexer for a given namespace and name.
func (s dscNodeconfigurationNamespaceLister) Get(name string) (*v1alpha1.DscNodeconfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dscnodeconfiguration"), name)
	}
	return obj.(*v1alpha1.DscNodeconfiguration), nil
}
