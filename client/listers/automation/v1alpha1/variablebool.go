/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/automation/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VariableBoolLister helps list VariableBools.
// All objects returned here must be treated as read-only.
type VariableBoolLister interface {
	// List lists all VariableBools in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VariableBool, err error)
	// VariableBools returns an object that can list and get VariableBools.
	VariableBools(namespace string) VariableBoolNamespaceLister
	VariableBoolListerExpansion
}

// variableBoolLister implements the VariableBoolLister interface.
type variableBoolLister struct {
	indexer cache.Indexer
}

// NewVariableBoolLister returns a new VariableBoolLister.
func NewVariableBoolLister(indexer cache.Indexer) VariableBoolLister {
	return &variableBoolLister{indexer: indexer}
}

// List lists all VariableBools in the indexer.
func (s *variableBoolLister) List(selector labels.Selector) (ret []*v1alpha1.VariableBool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VariableBool))
	})
	return ret, err
}

// VariableBools returns an object that can list and get VariableBools.
func (s *variableBoolLister) VariableBools(namespace string) VariableBoolNamespaceLister {
	return variableBoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VariableBoolNamespaceLister helps list and get VariableBools.
// All objects returned here must be treated as read-only.
type VariableBoolNamespaceLister interface {
	// List lists all VariableBools in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VariableBool, err error)
	// Get retrieves the VariableBool from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VariableBool, error)
	VariableBoolNamespaceListerExpansion
}

// variableBoolNamespaceLister implements the VariableBoolNamespaceLister
// interface.
type variableBoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VariableBools in the indexer for a given namespace.
func (s variableBoolNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VariableBool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VariableBool))
	})
	return ret, err
}

// Get retrieves the VariableBool from the indexer for a given namespace and name.
func (s variableBoolNamespaceLister) Get(name string) (*v1alpha1.VariableBool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("variablebool"), name)
	}
	return obj.(*v1alpha1.VariableBool), nil
}
