/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/automation/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VariableStringLister helps list VariableStrings.
// All objects returned here must be treated as read-only.
type VariableStringLister interface {
	// List lists all VariableStrings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VariableString, err error)
	// VariableStrings returns an object that can list and get VariableStrings.
	VariableStrings(namespace string) VariableStringNamespaceLister
	VariableStringListerExpansion
}

// variableStringLister implements the VariableStringLister interface.
type variableStringLister struct {
	indexer cache.Indexer
}

// NewVariableStringLister returns a new VariableStringLister.
func NewVariableStringLister(indexer cache.Indexer) VariableStringLister {
	return &variableStringLister{indexer: indexer}
}

// List lists all VariableStrings in the indexer.
func (s *variableStringLister) List(selector labels.Selector) (ret []*v1alpha1.VariableString, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VariableString))
	})
	return ret, err
}

// VariableStrings returns an object that can list and get VariableStrings.
func (s *variableStringLister) VariableStrings(namespace string) VariableStringNamespaceLister {
	return variableStringNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VariableStringNamespaceLister helps list and get VariableStrings.
// All objects returned here must be treated as read-only.
type VariableStringNamespaceLister interface {
	// List lists all VariableStrings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VariableString, err error)
	// Get retrieves the VariableString from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VariableString, error)
	VariableStringNamespaceListerExpansion
}

// variableStringNamespaceLister implements the VariableStringNamespaceLister
// interface.
type variableStringNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VariableStrings in the indexer for a given namespace.
func (s variableStringNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VariableString, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VariableString))
	})
	return ret, err
}

// Get retrieves the VariableString from the indexer for a given namespace and name.
func (s variableStringNamespaceLister) Get(name string) (*v1alpha1.VariableString, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("variablestring"), name)
	}
	return obj.(*v1alpha1.VariableString), nil
}
