/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/automation/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConnectionCertificateLister helps list ConnectionCertificates.
// All objects returned here must be treated as read-only.
type ConnectionCertificateLister interface {
	// List lists all ConnectionCertificates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConnectionCertificate, err error)
	// ConnectionCertificates returns an object that can list and get ConnectionCertificates.
	ConnectionCertificates(namespace string) ConnectionCertificateNamespaceLister
	ConnectionCertificateListerExpansion
}

// connectionCertificateLister implements the ConnectionCertificateLister interface.
type connectionCertificateLister struct {
	indexer cache.Indexer
}

// NewConnectionCertificateLister returns a new ConnectionCertificateLister.
func NewConnectionCertificateLister(indexer cache.Indexer) ConnectionCertificateLister {
	return &connectionCertificateLister{indexer: indexer}
}

// List lists all ConnectionCertificates in the indexer.
func (s *connectionCertificateLister) List(selector labels.Selector) (ret []*v1alpha1.ConnectionCertificate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConnectionCertificate))
	})
	return ret, err
}

// ConnectionCertificates returns an object that can list and get ConnectionCertificates.
func (s *connectionCertificateLister) ConnectionCertificates(namespace string) ConnectionCertificateNamespaceLister {
	return connectionCertificateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConnectionCertificateNamespaceLister helps list and get ConnectionCertificates.
// All objects returned here must be treated as read-only.
type ConnectionCertificateNamespaceLister interface {
	// List lists all ConnectionCertificates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConnectionCertificate, err error)
	// Get retrieves the ConnectionCertificate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ConnectionCertificate, error)
	ConnectionCertificateNamespaceListerExpansion
}

// connectionCertificateNamespaceLister implements the ConnectionCertificateNamespaceLister
// interface.
type connectionCertificateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConnectionCertificates in the indexer for a given namespace.
func (s connectionCertificateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConnectionCertificate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConnectionCertificate))
	})
	return ret, err
}

// Get retrieves the ConnectionCertificate from the indexer for a given namespace and name.
func (s connectionCertificateNamespaceLister) Get(name string) (*v1alpha1.ConnectionCertificate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("connectioncertificate"), name)
	}
	return obj.(*v1alpha1.ConnectionCertificate), nil
}
