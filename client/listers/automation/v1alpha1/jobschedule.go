/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/automation/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// JobScheduleLister helps list JobSchedules.
// All objects returned here must be treated as read-only.
type JobScheduleLister interface {
	// List lists all JobSchedules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.JobSchedule, err error)
	// JobSchedules returns an object that can list and get JobSchedules.
	JobSchedules(namespace string) JobScheduleNamespaceLister
	JobScheduleListerExpansion
}

// jobScheduleLister implements the JobScheduleLister interface.
type jobScheduleLister struct {
	indexer cache.Indexer
}

// NewJobScheduleLister returns a new JobScheduleLister.
func NewJobScheduleLister(indexer cache.Indexer) JobScheduleLister {
	return &jobScheduleLister{indexer: indexer}
}

// List lists all JobSchedules in the indexer.
func (s *jobScheduleLister) List(selector labels.Selector) (ret []*v1alpha1.JobSchedule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.JobSchedule))
	})
	return ret, err
}

// JobSchedules returns an object that can list and get JobSchedules.
func (s *jobScheduleLister) JobSchedules(namespace string) JobScheduleNamespaceLister {
	return jobScheduleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// JobScheduleNamespaceLister helps list and get JobSchedules.
// All objects returned here must be treated as read-only.
type JobScheduleNamespaceLister interface {
	// List lists all JobSchedules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.JobSchedule, err error)
	// Get retrieves the JobSchedule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.JobSchedule, error)
	JobScheduleNamespaceListerExpansion
}

// jobScheduleNamespaceLister implements the JobScheduleNamespaceLister
// interface.
type jobScheduleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all JobSchedules in the indexer for a given namespace.
func (s jobScheduleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.JobSchedule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.JobSchedule))
	})
	return ret, err
}

// Get retrieves the JobSchedule from the indexer for a given namespace and name.
func (s jobScheduleNamespaceLister) Get(name string) (*v1alpha1.JobSchedule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("jobschedule"), name)
	}
	return obj.(*v1alpha1.JobSchedule), nil
}
