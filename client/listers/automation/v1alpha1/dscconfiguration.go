/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/automation/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DscConfigurationLister helps list DscConfigurations.
// All objects returned here must be treated as read-only.
type DscConfigurationLister interface {
	// List lists all DscConfigurations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DscConfiguration, err error)
	// DscConfigurations returns an object that can list and get DscConfigurations.
	DscConfigurations(namespace string) DscConfigurationNamespaceLister
	DscConfigurationListerExpansion
}

// dscConfigurationLister implements the DscConfigurationLister interface.
type dscConfigurationLister struct {
	indexer cache.Indexer
}

// NewDscConfigurationLister returns a new DscConfigurationLister.
func NewDscConfigurationLister(indexer cache.Indexer) DscConfigurationLister {
	return &dscConfigurationLister{indexer: indexer}
}

// List lists all DscConfigurations in the indexer.
func (s *dscConfigurationLister) List(selector labels.Selector) (ret []*v1alpha1.DscConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DscConfiguration))
	})
	return ret, err
}

// DscConfigurations returns an object that can list and get DscConfigurations.
func (s *dscConfigurationLister) DscConfigurations(namespace string) DscConfigurationNamespaceLister {
	return dscConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DscConfigurationNamespaceLister helps list and get DscConfigurations.
// All objects returned here must be treated as read-only.
type DscConfigurationNamespaceLister interface {
	// List lists all DscConfigurations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DscConfiguration, err error)
	// Get retrieves the DscConfiguration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DscConfiguration, error)
	DscConfigurationNamespaceListerExpansion
}

// dscConfigurationNamespaceLister implements the DscConfigurationNamespaceLister
// interface.
type dscConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DscConfigurations in the indexer for a given namespace.
func (s dscConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DscConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DscConfiguration))
	})
	return ret, err
}

// Get retrieves the DscConfiguration from the indexer for a given namespace and name.
func (s dscConfigurationNamespaceLister) Get(name string) (*v1alpha1.DscConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dscconfiguration"), name)
	}
	return obj.(*v1alpha1.DscConfiguration), nil
}
