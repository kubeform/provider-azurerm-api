/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/policy/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SetDefinitionLister helps list SetDefinitions.
// All objects returned here must be treated as read-only.
type SetDefinitionLister interface {
	// List lists all SetDefinitions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SetDefinition, err error)
	// SetDefinitions returns an object that can list and get SetDefinitions.
	SetDefinitions(namespace string) SetDefinitionNamespaceLister
	SetDefinitionListerExpansion
}

// setDefinitionLister implements the SetDefinitionLister interface.
type setDefinitionLister struct {
	indexer cache.Indexer
}

// NewSetDefinitionLister returns a new SetDefinitionLister.
func NewSetDefinitionLister(indexer cache.Indexer) SetDefinitionLister {
	return &setDefinitionLister{indexer: indexer}
}

// List lists all SetDefinitions in the indexer.
func (s *setDefinitionLister) List(selector labels.Selector) (ret []*v1alpha1.SetDefinition, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SetDefinition))
	})
	return ret, err
}

// SetDefinitions returns an object that can list and get SetDefinitions.
func (s *setDefinitionLister) SetDefinitions(namespace string) SetDefinitionNamespaceLister {
	return setDefinitionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SetDefinitionNamespaceLister helps list and get SetDefinitions.
// All objects returned here must be treated as read-only.
type SetDefinitionNamespaceLister interface {
	// List lists all SetDefinitions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SetDefinition, err error)
	// Get retrieves the SetDefinition from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SetDefinition, error)
	SetDefinitionNamespaceListerExpansion
}

// setDefinitionNamespaceLister implements the SetDefinitionNamespaceLister
// interface.
type setDefinitionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SetDefinitions in the indexer for a given namespace.
func (s setDefinitionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SetDefinition, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SetDefinition))
	})
	return ret, err
}

// Get retrieves the SetDefinition from the indexer for a given namespace and name.
func (s setDefinitionNamespaceLister) Get(name string) (*v1alpha1.SetDefinition, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("setdefinition"), name)
	}
	return obj.(*v1alpha1.SetDefinition), nil
}
