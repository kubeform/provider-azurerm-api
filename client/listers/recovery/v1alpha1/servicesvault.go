/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/recovery/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServicesVaultLister helps list ServicesVaults.
// All objects returned here must be treated as read-only.
type ServicesVaultLister interface {
	// List lists all ServicesVaults in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServicesVault, err error)
	// ServicesVaults returns an object that can list and get ServicesVaults.
	ServicesVaults(namespace string) ServicesVaultNamespaceLister
	ServicesVaultListerExpansion
}

// servicesVaultLister implements the ServicesVaultLister interface.
type servicesVaultLister struct {
	indexer cache.Indexer
}

// NewServicesVaultLister returns a new ServicesVaultLister.
func NewServicesVaultLister(indexer cache.Indexer) ServicesVaultLister {
	return &servicesVaultLister{indexer: indexer}
}

// List lists all ServicesVaults in the indexer.
func (s *servicesVaultLister) List(selector labels.Selector) (ret []*v1alpha1.ServicesVault, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServicesVault))
	})
	return ret, err
}

// ServicesVaults returns an object that can list and get ServicesVaults.
func (s *servicesVaultLister) ServicesVaults(namespace string) ServicesVaultNamespaceLister {
	return servicesVaultNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServicesVaultNamespaceLister helps list and get ServicesVaults.
// All objects returned here must be treated as read-only.
type ServicesVaultNamespaceLister interface {
	// List lists all ServicesVaults in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServicesVault, err error)
	// Get retrieves the ServicesVault from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServicesVault, error)
	ServicesVaultNamespaceListerExpansion
}

// servicesVaultNamespaceLister implements the ServicesVaultNamespaceLister
// interface.
type servicesVaultNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServicesVaults in the indexer for a given namespace.
func (s servicesVaultNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServicesVault, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServicesVault))
	})
	return ret, err
}

// Get retrieves the ServicesVault from the indexer for a given namespace and name.
func (s servicesVaultNamespaceLister) Get(name string) (*v1alpha1.ServicesVault, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servicesvault"), name)
	}
	return obj.(*v1alpha1.ServicesVault), nil
}
