/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/spring/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CloudAppMysqlAssociationLister helps list CloudAppMysqlAssociations.
// All objects returned here must be treated as read-only.
type CloudAppMysqlAssociationLister interface {
	// List lists all CloudAppMysqlAssociations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CloudAppMysqlAssociation, err error)
	// CloudAppMysqlAssociations returns an object that can list and get CloudAppMysqlAssociations.
	CloudAppMysqlAssociations(namespace string) CloudAppMysqlAssociationNamespaceLister
	CloudAppMysqlAssociationListerExpansion
}

// cloudAppMysqlAssociationLister implements the CloudAppMysqlAssociationLister interface.
type cloudAppMysqlAssociationLister struct {
	indexer cache.Indexer
}

// NewCloudAppMysqlAssociationLister returns a new CloudAppMysqlAssociationLister.
func NewCloudAppMysqlAssociationLister(indexer cache.Indexer) CloudAppMysqlAssociationLister {
	return &cloudAppMysqlAssociationLister{indexer: indexer}
}

// List lists all CloudAppMysqlAssociations in the indexer.
func (s *cloudAppMysqlAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.CloudAppMysqlAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CloudAppMysqlAssociation))
	})
	return ret, err
}

// CloudAppMysqlAssociations returns an object that can list and get CloudAppMysqlAssociations.
func (s *cloudAppMysqlAssociationLister) CloudAppMysqlAssociations(namespace string) CloudAppMysqlAssociationNamespaceLister {
	return cloudAppMysqlAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CloudAppMysqlAssociationNamespaceLister helps list and get CloudAppMysqlAssociations.
// All objects returned here must be treated as read-only.
type CloudAppMysqlAssociationNamespaceLister interface {
	// List lists all CloudAppMysqlAssociations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CloudAppMysqlAssociation, err error)
	// Get retrieves the CloudAppMysqlAssociation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CloudAppMysqlAssociation, error)
	CloudAppMysqlAssociationNamespaceListerExpansion
}

// cloudAppMysqlAssociationNamespaceLister implements the CloudAppMysqlAssociationNamespaceLister
// interface.
type cloudAppMysqlAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CloudAppMysqlAssociations in the indexer for a given namespace.
func (s cloudAppMysqlAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CloudAppMysqlAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CloudAppMysqlAssociation))
	})
	return ret, err
}

// Get retrieves the CloudAppMysqlAssociation from the indexer for a given namespace and name.
func (s cloudAppMysqlAssociationNamespaceLister) Get(name string) (*v1alpha1.CloudAppMysqlAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cloudappmysqlassociation"), name)
	}
	return obj.(*v1alpha1.CloudAppMysqlAssociation), nil
}
