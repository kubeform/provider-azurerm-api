/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/spring/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CloudActiveDeploymentLister helps list CloudActiveDeployments.
// All objects returned here must be treated as read-only.
type CloudActiveDeploymentLister interface {
	// List lists all CloudActiveDeployments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CloudActiveDeployment, err error)
	// CloudActiveDeployments returns an object that can list and get CloudActiveDeployments.
	CloudActiveDeployments(namespace string) CloudActiveDeploymentNamespaceLister
	CloudActiveDeploymentListerExpansion
}

// cloudActiveDeploymentLister implements the CloudActiveDeploymentLister interface.
type cloudActiveDeploymentLister struct {
	indexer cache.Indexer
}

// NewCloudActiveDeploymentLister returns a new CloudActiveDeploymentLister.
func NewCloudActiveDeploymentLister(indexer cache.Indexer) CloudActiveDeploymentLister {
	return &cloudActiveDeploymentLister{indexer: indexer}
}

// List lists all CloudActiveDeployments in the indexer.
func (s *cloudActiveDeploymentLister) List(selector labels.Selector) (ret []*v1alpha1.CloudActiveDeployment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CloudActiveDeployment))
	})
	return ret, err
}

// CloudActiveDeployments returns an object that can list and get CloudActiveDeployments.
func (s *cloudActiveDeploymentLister) CloudActiveDeployments(namespace string) CloudActiveDeploymentNamespaceLister {
	return cloudActiveDeploymentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CloudActiveDeploymentNamespaceLister helps list and get CloudActiveDeployments.
// All objects returned here must be treated as read-only.
type CloudActiveDeploymentNamespaceLister interface {
	// List lists all CloudActiveDeployments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CloudActiveDeployment, err error)
	// Get retrieves the CloudActiveDeployment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CloudActiveDeployment, error)
	CloudActiveDeploymentNamespaceListerExpansion
}

// cloudActiveDeploymentNamespaceLister implements the CloudActiveDeploymentNamespaceLister
// interface.
type cloudActiveDeploymentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CloudActiveDeployments in the indexer for a given namespace.
func (s cloudActiveDeploymentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CloudActiveDeployment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CloudActiveDeployment))
	})
	return ret, err
}

// Get retrieves the CloudActiveDeployment from the indexer for a given namespace and name.
func (s cloudActiveDeploymentNamespaceLister) Get(name string) (*v1alpha1.CloudActiveDeployment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cloudactivedeployment"), name)
	}
	return obj.(*v1alpha1.CloudActiveDeployment), nil
}
