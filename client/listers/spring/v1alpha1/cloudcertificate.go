/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/spring/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CloudCertificateLister helps list CloudCertificates.
// All objects returned here must be treated as read-only.
type CloudCertificateLister interface {
	// List lists all CloudCertificates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CloudCertificate, err error)
	// CloudCertificates returns an object that can list and get CloudCertificates.
	CloudCertificates(namespace string) CloudCertificateNamespaceLister
	CloudCertificateListerExpansion
}

// cloudCertificateLister implements the CloudCertificateLister interface.
type cloudCertificateLister struct {
	indexer cache.Indexer
}

// NewCloudCertificateLister returns a new CloudCertificateLister.
func NewCloudCertificateLister(indexer cache.Indexer) CloudCertificateLister {
	return &cloudCertificateLister{indexer: indexer}
}

// List lists all CloudCertificates in the indexer.
func (s *cloudCertificateLister) List(selector labels.Selector) (ret []*v1alpha1.CloudCertificate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CloudCertificate))
	})
	return ret, err
}

// CloudCertificates returns an object that can list and get CloudCertificates.
func (s *cloudCertificateLister) CloudCertificates(namespace string) CloudCertificateNamespaceLister {
	return cloudCertificateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CloudCertificateNamespaceLister helps list and get CloudCertificates.
// All objects returned here must be treated as read-only.
type CloudCertificateNamespaceLister interface {
	// List lists all CloudCertificates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CloudCertificate, err error)
	// Get retrieves the CloudCertificate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CloudCertificate, error)
	CloudCertificateNamespaceListerExpansion
}

// cloudCertificateNamespaceLister implements the CloudCertificateNamespaceLister
// interface.
type cloudCertificateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CloudCertificates in the indexer for a given namespace.
func (s cloudCertificateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CloudCertificate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CloudCertificate))
	})
	return ret, err
}

// Get retrieves the CloudCertificate from the indexer for a given namespace and name.
func (s cloudCertificateNamespaceLister) Get(name string) (*v1alpha1.CloudCertificate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cloudcertificate"), name)
	}
	return obj.(*v1alpha1.CloudCertificate), nil
}
