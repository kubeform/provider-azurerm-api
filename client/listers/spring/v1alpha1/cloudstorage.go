/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/spring/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CloudStorageLister helps list CloudStorages.
// All objects returned here must be treated as read-only.
type CloudStorageLister interface {
	// List lists all CloudStorages in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CloudStorage, err error)
	// CloudStorages returns an object that can list and get CloudStorages.
	CloudStorages(namespace string) CloudStorageNamespaceLister
	CloudStorageListerExpansion
}

// cloudStorageLister implements the CloudStorageLister interface.
type cloudStorageLister struct {
	indexer cache.Indexer
}

// NewCloudStorageLister returns a new CloudStorageLister.
func NewCloudStorageLister(indexer cache.Indexer) CloudStorageLister {
	return &cloudStorageLister{indexer: indexer}
}

// List lists all CloudStorages in the indexer.
func (s *cloudStorageLister) List(selector labels.Selector) (ret []*v1alpha1.CloudStorage, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CloudStorage))
	})
	return ret, err
}

// CloudStorages returns an object that can list and get CloudStorages.
func (s *cloudStorageLister) CloudStorages(namespace string) CloudStorageNamespaceLister {
	return cloudStorageNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CloudStorageNamespaceLister helps list and get CloudStorages.
// All objects returned here must be treated as read-only.
type CloudStorageNamespaceLister interface {
	// List lists all CloudStorages in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CloudStorage, err error)
	// Get retrieves the CloudStorage from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CloudStorage, error)
	CloudStorageNamespaceListerExpansion
}

// cloudStorageNamespaceLister implements the CloudStorageNamespaceLister
// interface.
type cloudStorageNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CloudStorages in the indexer for a given namespace.
func (s cloudStorageNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CloudStorage, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CloudStorage))
	})
	return ret, err
}

// Get retrieves the CloudStorage from the indexer for a given namespace and name.
func (s cloudStorageNamespaceLister) Get(name string) (*v1alpha1.CloudStorage, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cloudstorage"), name)
	}
	return obj.(*v1alpha1.CloudStorage), nil
}
