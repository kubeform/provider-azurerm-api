/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/video/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AnalyzerEdgeModuleLister helps list AnalyzerEdgeModules.
// All objects returned here must be treated as read-only.
type AnalyzerEdgeModuleLister interface {
	// List lists all AnalyzerEdgeModules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AnalyzerEdgeModule, err error)
	// AnalyzerEdgeModules returns an object that can list and get AnalyzerEdgeModules.
	AnalyzerEdgeModules(namespace string) AnalyzerEdgeModuleNamespaceLister
	AnalyzerEdgeModuleListerExpansion
}

// analyzerEdgeModuleLister implements the AnalyzerEdgeModuleLister interface.
type analyzerEdgeModuleLister struct {
	indexer cache.Indexer
}

// NewAnalyzerEdgeModuleLister returns a new AnalyzerEdgeModuleLister.
func NewAnalyzerEdgeModuleLister(indexer cache.Indexer) AnalyzerEdgeModuleLister {
	return &analyzerEdgeModuleLister{indexer: indexer}
}

// List lists all AnalyzerEdgeModules in the indexer.
func (s *analyzerEdgeModuleLister) List(selector labels.Selector) (ret []*v1alpha1.AnalyzerEdgeModule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AnalyzerEdgeModule))
	})
	return ret, err
}

// AnalyzerEdgeModules returns an object that can list and get AnalyzerEdgeModules.
func (s *analyzerEdgeModuleLister) AnalyzerEdgeModules(namespace string) AnalyzerEdgeModuleNamespaceLister {
	return analyzerEdgeModuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AnalyzerEdgeModuleNamespaceLister helps list and get AnalyzerEdgeModules.
// All objects returned here must be treated as read-only.
type AnalyzerEdgeModuleNamespaceLister interface {
	// List lists all AnalyzerEdgeModules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AnalyzerEdgeModule, err error)
	// Get retrieves the AnalyzerEdgeModule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AnalyzerEdgeModule, error)
	AnalyzerEdgeModuleNamespaceListerExpansion
}

// analyzerEdgeModuleNamespaceLister implements the AnalyzerEdgeModuleNamespaceLister
// interface.
type analyzerEdgeModuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AnalyzerEdgeModules in the indexer for a given namespace.
func (s analyzerEdgeModuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AnalyzerEdgeModule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AnalyzerEdgeModule))
	})
	return ret, err
}

// Get retrieves the AnalyzerEdgeModule from the indexer for a given namespace and name.
func (s analyzerEdgeModuleNamespaceLister) Get(name string) (*v1alpha1.AnalyzerEdgeModule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("analyzeredgemodule"), name)
	}
	return obj.(*v1alpha1.AnalyzerEdgeModule), nil
}
