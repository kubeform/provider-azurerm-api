/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/video/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AnalyzerLister helps list Analyzers.
// All objects returned here must be treated as read-only.
type AnalyzerLister interface {
	// List lists all Analyzers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Analyzer, err error)
	// Analyzers returns an object that can list and get Analyzers.
	Analyzers(namespace string) AnalyzerNamespaceLister
	AnalyzerListerExpansion
}

// analyzerLister implements the AnalyzerLister interface.
type analyzerLister struct {
	indexer cache.Indexer
}

// NewAnalyzerLister returns a new AnalyzerLister.
func NewAnalyzerLister(indexer cache.Indexer) AnalyzerLister {
	return &analyzerLister{indexer: indexer}
}

// List lists all Analyzers in the indexer.
func (s *analyzerLister) List(selector labels.Selector) (ret []*v1alpha1.Analyzer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Analyzer))
	})
	return ret, err
}

// Analyzers returns an object that can list and get Analyzers.
func (s *analyzerLister) Analyzers(namespace string) AnalyzerNamespaceLister {
	return analyzerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AnalyzerNamespaceLister helps list and get Analyzers.
// All objects returned here must be treated as read-only.
type AnalyzerNamespaceLister interface {
	// List lists all Analyzers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Analyzer, err error)
	// Get retrieves the Analyzer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Analyzer, error)
	AnalyzerNamespaceListerExpansion
}

// analyzerNamespaceLister implements the AnalyzerNamespaceLister
// interface.
type analyzerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Analyzers in the indexer for a given namespace.
func (s analyzerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Analyzer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Analyzer))
	})
	return ret, err
}

// Get retrieves the Analyzer from the indexer for a given namespace and name.
func (s analyzerNamespaceLister) Get(name string) (*v1alpha1.Analyzer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("analyzer"), name)
	}
	return obj.(*v1alpha1.Analyzer), nil
}
