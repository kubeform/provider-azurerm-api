/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/healthbot/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HealthbotLister helps list Healthbots.
// All objects returned here must be treated as read-only.
type HealthbotLister interface {
	// List lists all Healthbots in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Healthbot, err error)
	// Healthbots returns an object that can list and get Healthbots.
	Healthbots(namespace string) HealthbotNamespaceLister
	HealthbotListerExpansion
}

// healthbotLister implements the HealthbotLister interface.
type healthbotLister struct {
	indexer cache.Indexer
}

// NewHealthbotLister returns a new HealthbotLister.
func NewHealthbotLister(indexer cache.Indexer) HealthbotLister {
	return &healthbotLister{indexer: indexer}
}

// List lists all Healthbots in the indexer.
func (s *healthbotLister) List(selector labels.Selector) (ret []*v1alpha1.Healthbot, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Healthbot))
	})
	return ret, err
}

// Healthbots returns an object that can list and get Healthbots.
func (s *healthbotLister) Healthbots(namespace string) HealthbotNamespaceLister {
	return healthbotNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HealthbotNamespaceLister helps list and get Healthbots.
// All objects returned here must be treated as read-only.
type HealthbotNamespaceLister interface {
	// List lists all Healthbots in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Healthbot, err error)
	// Get retrieves the Healthbot from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Healthbot, error)
	HealthbotNamespaceListerExpansion
}

// healthbotNamespaceLister implements the HealthbotNamespaceLister
// interface.
type healthbotNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Healthbots in the indexer for a given namespace.
func (s healthbotNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Healthbot, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Healthbot))
	})
	return ret, err
}

// Get retrieves the Healthbot from the indexer for a given namespace and name.
func (s healthbotNamespaceLister) Get(name string) (*v1alpha1.Healthbot, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("healthbot"), name)
	}
	return obj.(*v1alpha1.Healthbot), nil
}
