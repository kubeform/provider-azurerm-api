/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/iottime/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SeriesInsightsAccessPolicyLister helps list SeriesInsightsAccessPolicies.
// All objects returned here must be treated as read-only.
type SeriesInsightsAccessPolicyLister interface {
	// List lists all SeriesInsightsAccessPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SeriesInsightsAccessPolicy, err error)
	// SeriesInsightsAccessPolicies returns an object that can list and get SeriesInsightsAccessPolicies.
	SeriesInsightsAccessPolicies(namespace string) SeriesInsightsAccessPolicyNamespaceLister
	SeriesInsightsAccessPolicyListerExpansion
}

// seriesInsightsAccessPolicyLister implements the SeriesInsightsAccessPolicyLister interface.
type seriesInsightsAccessPolicyLister struct {
	indexer cache.Indexer
}

// NewSeriesInsightsAccessPolicyLister returns a new SeriesInsightsAccessPolicyLister.
func NewSeriesInsightsAccessPolicyLister(indexer cache.Indexer) SeriesInsightsAccessPolicyLister {
	return &seriesInsightsAccessPolicyLister{indexer: indexer}
}

// List lists all SeriesInsightsAccessPolicies in the indexer.
func (s *seriesInsightsAccessPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.SeriesInsightsAccessPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SeriesInsightsAccessPolicy))
	})
	return ret, err
}

// SeriesInsightsAccessPolicies returns an object that can list and get SeriesInsightsAccessPolicies.
func (s *seriesInsightsAccessPolicyLister) SeriesInsightsAccessPolicies(namespace string) SeriesInsightsAccessPolicyNamespaceLister {
	return seriesInsightsAccessPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SeriesInsightsAccessPolicyNamespaceLister helps list and get SeriesInsightsAccessPolicies.
// All objects returned here must be treated as read-only.
type SeriesInsightsAccessPolicyNamespaceLister interface {
	// List lists all SeriesInsightsAccessPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SeriesInsightsAccessPolicy, err error)
	// Get retrieves the SeriesInsightsAccessPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SeriesInsightsAccessPolicy, error)
	SeriesInsightsAccessPolicyNamespaceListerExpansion
}

// seriesInsightsAccessPolicyNamespaceLister implements the SeriesInsightsAccessPolicyNamespaceLister
// interface.
type seriesInsightsAccessPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SeriesInsightsAccessPolicies in the indexer for a given namespace.
func (s seriesInsightsAccessPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SeriesInsightsAccessPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SeriesInsightsAccessPolicy))
	})
	return ret, err
}

// Get retrieves the SeriesInsightsAccessPolicy from the indexer for a given namespace and name.
func (s seriesInsightsAccessPolicyNamespaceLister) Get(name string) (*v1alpha1.SeriesInsightsAccessPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("seriesinsightsaccesspolicy"), name)
	}
	return obj.(*v1alpha1.SeriesInsightsAccessPolicy), nil
}
