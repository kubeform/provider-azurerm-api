/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/vmware/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PrivateCloudLister helps list PrivateClouds.
// All objects returned here must be treated as read-only.
type PrivateCloudLister interface {
	// List lists all PrivateClouds in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PrivateCloud, err error)
	// PrivateClouds returns an object that can list and get PrivateClouds.
	PrivateClouds(namespace string) PrivateCloudNamespaceLister
	PrivateCloudListerExpansion
}

// privateCloudLister implements the PrivateCloudLister interface.
type privateCloudLister struct {
	indexer cache.Indexer
}

// NewPrivateCloudLister returns a new PrivateCloudLister.
func NewPrivateCloudLister(indexer cache.Indexer) PrivateCloudLister {
	return &privateCloudLister{indexer: indexer}
}

// List lists all PrivateClouds in the indexer.
func (s *privateCloudLister) List(selector labels.Selector) (ret []*v1alpha1.PrivateCloud, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PrivateCloud))
	})
	return ret, err
}

// PrivateClouds returns an object that can list and get PrivateClouds.
func (s *privateCloudLister) PrivateClouds(namespace string) PrivateCloudNamespaceLister {
	return privateCloudNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PrivateCloudNamespaceLister helps list and get PrivateClouds.
// All objects returned here must be treated as read-only.
type PrivateCloudNamespaceLister interface {
	// List lists all PrivateClouds in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PrivateCloud, err error)
	// Get retrieves the PrivateCloud from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PrivateCloud, error)
	PrivateCloudNamespaceListerExpansion
}

// privateCloudNamespaceLister implements the PrivateCloudNamespaceLister
// interface.
type privateCloudNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PrivateClouds in the indexer for a given namespace.
func (s privateCloudNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PrivateCloud, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PrivateCloud))
	})
	return ret, err
}

// Get retrieves the PrivateCloud from the indexer for a given namespace and name.
func (s privateCloudNamespaceLister) Get(name string) (*v1alpha1.PrivateCloud, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("privatecloud"), name)
	}
	return obj.(*v1alpha1.PrivateCloud), nil
}
