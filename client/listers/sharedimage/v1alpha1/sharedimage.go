/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/sharedimage/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SharedImageLister helps list SharedImages.
// All objects returned here must be treated as read-only.
type SharedImageLister interface {
	// List lists all SharedImages in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SharedImage, err error)
	// SharedImages returns an object that can list and get SharedImages.
	SharedImages(namespace string) SharedImageNamespaceLister
	SharedImageListerExpansion
}

// sharedImageLister implements the SharedImageLister interface.
type sharedImageLister struct {
	indexer cache.Indexer
}

// NewSharedImageLister returns a new SharedImageLister.
func NewSharedImageLister(indexer cache.Indexer) SharedImageLister {
	return &sharedImageLister{indexer: indexer}
}

// List lists all SharedImages in the indexer.
func (s *sharedImageLister) List(selector labels.Selector) (ret []*v1alpha1.SharedImage, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SharedImage))
	})
	return ret, err
}

// SharedImages returns an object that can list and get SharedImages.
func (s *sharedImageLister) SharedImages(namespace string) SharedImageNamespaceLister {
	return sharedImageNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SharedImageNamespaceLister helps list and get SharedImages.
// All objects returned here must be treated as read-only.
type SharedImageNamespaceLister interface {
	// List lists all SharedImages in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SharedImage, err error)
	// Get retrieves the SharedImage from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SharedImage, error)
	SharedImageNamespaceListerExpansion
}

// sharedImageNamespaceLister implements the SharedImageNamespaceLister
// interface.
type sharedImageNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SharedImages in the indexer for a given namespace.
func (s sharedImageNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SharedImage, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SharedImage))
	})
	return ret, err
}

// Get retrieves the SharedImage from the indexer for a given namespace and name.
func (s sharedImageNamespaceLister) Get(name string) (*v1alpha1.SharedImage, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sharedimage"), name)
	}
	return obj.(*v1alpha1.SharedImage), nil
}
