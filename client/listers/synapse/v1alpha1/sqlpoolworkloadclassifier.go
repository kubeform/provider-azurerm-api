/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/synapse/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SqlPoolWorkloadClassifierLister helps list SqlPoolWorkloadClassifiers.
// All objects returned here must be treated as read-only.
type SqlPoolWorkloadClassifierLister interface {
	// List lists all SqlPoolWorkloadClassifiers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SqlPoolWorkloadClassifier, err error)
	// SqlPoolWorkloadClassifiers returns an object that can list and get SqlPoolWorkloadClassifiers.
	SqlPoolWorkloadClassifiers(namespace string) SqlPoolWorkloadClassifierNamespaceLister
	SqlPoolWorkloadClassifierListerExpansion
}

// sqlPoolWorkloadClassifierLister implements the SqlPoolWorkloadClassifierLister interface.
type sqlPoolWorkloadClassifierLister struct {
	indexer cache.Indexer
}

// NewSqlPoolWorkloadClassifierLister returns a new SqlPoolWorkloadClassifierLister.
func NewSqlPoolWorkloadClassifierLister(indexer cache.Indexer) SqlPoolWorkloadClassifierLister {
	return &sqlPoolWorkloadClassifierLister{indexer: indexer}
}

// List lists all SqlPoolWorkloadClassifiers in the indexer.
func (s *sqlPoolWorkloadClassifierLister) List(selector labels.Selector) (ret []*v1alpha1.SqlPoolWorkloadClassifier, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SqlPoolWorkloadClassifier))
	})
	return ret, err
}

// SqlPoolWorkloadClassifiers returns an object that can list and get SqlPoolWorkloadClassifiers.
func (s *sqlPoolWorkloadClassifierLister) SqlPoolWorkloadClassifiers(namespace string) SqlPoolWorkloadClassifierNamespaceLister {
	return sqlPoolWorkloadClassifierNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SqlPoolWorkloadClassifierNamespaceLister helps list and get SqlPoolWorkloadClassifiers.
// All objects returned here must be treated as read-only.
type SqlPoolWorkloadClassifierNamespaceLister interface {
	// List lists all SqlPoolWorkloadClassifiers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SqlPoolWorkloadClassifier, err error)
	// Get retrieves the SqlPoolWorkloadClassifier from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SqlPoolWorkloadClassifier, error)
	SqlPoolWorkloadClassifierNamespaceListerExpansion
}

// sqlPoolWorkloadClassifierNamespaceLister implements the SqlPoolWorkloadClassifierNamespaceLister
// interface.
type sqlPoolWorkloadClassifierNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SqlPoolWorkloadClassifiers in the indexer for a given namespace.
func (s sqlPoolWorkloadClassifierNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SqlPoolWorkloadClassifier, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SqlPoolWorkloadClassifier))
	})
	return ret, err
}

// Get retrieves the SqlPoolWorkloadClassifier from the indexer for a given namespace and name.
func (s sqlPoolWorkloadClassifierNamespaceLister) Get(name string) (*v1alpha1.SqlPoolWorkloadClassifier, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sqlpoolworkloadclassifier"), name)
	}
	return obj.(*v1alpha1.SqlPoolWorkloadClassifier), nil
}
