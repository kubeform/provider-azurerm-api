/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/synapse/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SqlPoolLister helps list SqlPools.
// All objects returned here must be treated as read-only.
type SqlPoolLister interface {
	// List lists all SqlPools in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SqlPool, err error)
	// SqlPools returns an object that can list and get SqlPools.
	SqlPools(namespace string) SqlPoolNamespaceLister
	SqlPoolListerExpansion
}

// sqlPoolLister implements the SqlPoolLister interface.
type sqlPoolLister struct {
	indexer cache.Indexer
}

// NewSqlPoolLister returns a new SqlPoolLister.
func NewSqlPoolLister(indexer cache.Indexer) SqlPoolLister {
	return &sqlPoolLister{indexer: indexer}
}

// List lists all SqlPools in the indexer.
func (s *sqlPoolLister) List(selector labels.Selector) (ret []*v1alpha1.SqlPool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SqlPool))
	})
	return ret, err
}

// SqlPools returns an object that can list and get SqlPools.
func (s *sqlPoolLister) SqlPools(namespace string) SqlPoolNamespaceLister {
	return sqlPoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SqlPoolNamespaceLister helps list and get SqlPools.
// All objects returned here must be treated as read-only.
type SqlPoolNamespaceLister interface {
	// List lists all SqlPools in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SqlPool, err error)
	// Get retrieves the SqlPool from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SqlPool, error)
	SqlPoolNamespaceListerExpansion
}

// sqlPoolNamespaceLister implements the SqlPoolNamespaceLister
// interface.
type sqlPoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SqlPools in the indexer for a given namespace.
func (s sqlPoolNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SqlPool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SqlPool))
	})
	return ret, err
}

// Get retrieves the SqlPool from the indexer for a given namespace and name.
func (s sqlPoolNamespaceLister) Get(name string) (*v1alpha1.SqlPool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sqlpool"), name)
	}
	return obj.(*v1alpha1.SqlPool), nil
}
