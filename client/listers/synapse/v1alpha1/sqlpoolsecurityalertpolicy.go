/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/synapse/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SqlPoolSecurityAlertPolicyLister helps list SqlPoolSecurityAlertPolicies.
// All objects returned here must be treated as read-only.
type SqlPoolSecurityAlertPolicyLister interface {
	// List lists all SqlPoolSecurityAlertPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SqlPoolSecurityAlertPolicy, err error)
	// SqlPoolSecurityAlertPolicies returns an object that can list and get SqlPoolSecurityAlertPolicies.
	SqlPoolSecurityAlertPolicies(namespace string) SqlPoolSecurityAlertPolicyNamespaceLister
	SqlPoolSecurityAlertPolicyListerExpansion
}

// sqlPoolSecurityAlertPolicyLister implements the SqlPoolSecurityAlertPolicyLister interface.
type sqlPoolSecurityAlertPolicyLister struct {
	indexer cache.Indexer
}

// NewSqlPoolSecurityAlertPolicyLister returns a new SqlPoolSecurityAlertPolicyLister.
func NewSqlPoolSecurityAlertPolicyLister(indexer cache.Indexer) SqlPoolSecurityAlertPolicyLister {
	return &sqlPoolSecurityAlertPolicyLister{indexer: indexer}
}

// List lists all SqlPoolSecurityAlertPolicies in the indexer.
func (s *sqlPoolSecurityAlertPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.SqlPoolSecurityAlertPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SqlPoolSecurityAlertPolicy))
	})
	return ret, err
}

// SqlPoolSecurityAlertPolicies returns an object that can list and get SqlPoolSecurityAlertPolicies.
func (s *sqlPoolSecurityAlertPolicyLister) SqlPoolSecurityAlertPolicies(namespace string) SqlPoolSecurityAlertPolicyNamespaceLister {
	return sqlPoolSecurityAlertPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SqlPoolSecurityAlertPolicyNamespaceLister helps list and get SqlPoolSecurityAlertPolicies.
// All objects returned here must be treated as read-only.
type SqlPoolSecurityAlertPolicyNamespaceLister interface {
	// List lists all SqlPoolSecurityAlertPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SqlPoolSecurityAlertPolicy, err error)
	// Get retrieves the SqlPoolSecurityAlertPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SqlPoolSecurityAlertPolicy, error)
	SqlPoolSecurityAlertPolicyNamespaceListerExpansion
}

// sqlPoolSecurityAlertPolicyNamespaceLister implements the SqlPoolSecurityAlertPolicyNamespaceLister
// interface.
type sqlPoolSecurityAlertPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SqlPoolSecurityAlertPolicies in the indexer for a given namespace.
func (s sqlPoolSecurityAlertPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SqlPoolSecurityAlertPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SqlPoolSecurityAlertPolicy))
	})
	return ret, err
}

// Get retrieves the SqlPoolSecurityAlertPolicy from the indexer for a given namespace and name.
func (s sqlPoolSecurityAlertPolicyNamespaceLister) Get(name string) (*v1alpha1.SqlPoolSecurityAlertPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sqlpoolsecurityalertpolicy"), name)
	}
	return obj.(*v1alpha1.SqlPoolSecurityAlertPolicy), nil
}
