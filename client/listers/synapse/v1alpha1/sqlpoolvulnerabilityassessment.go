/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/synapse/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SqlPoolVulnerabilityAssessmentLister helps list SqlPoolVulnerabilityAssessments.
// All objects returned here must be treated as read-only.
type SqlPoolVulnerabilityAssessmentLister interface {
	// List lists all SqlPoolVulnerabilityAssessments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SqlPoolVulnerabilityAssessment, err error)
	// SqlPoolVulnerabilityAssessments returns an object that can list and get SqlPoolVulnerabilityAssessments.
	SqlPoolVulnerabilityAssessments(namespace string) SqlPoolVulnerabilityAssessmentNamespaceLister
	SqlPoolVulnerabilityAssessmentListerExpansion
}

// sqlPoolVulnerabilityAssessmentLister implements the SqlPoolVulnerabilityAssessmentLister interface.
type sqlPoolVulnerabilityAssessmentLister struct {
	indexer cache.Indexer
}

// NewSqlPoolVulnerabilityAssessmentLister returns a new SqlPoolVulnerabilityAssessmentLister.
func NewSqlPoolVulnerabilityAssessmentLister(indexer cache.Indexer) SqlPoolVulnerabilityAssessmentLister {
	return &sqlPoolVulnerabilityAssessmentLister{indexer: indexer}
}

// List lists all SqlPoolVulnerabilityAssessments in the indexer.
func (s *sqlPoolVulnerabilityAssessmentLister) List(selector labels.Selector) (ret []*v1alpha1.SqlPoolVulnerabilityAssessment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SqlPoolVulnerabilityAssessment))
	})
	return ret, err
}

// SqlPoolVulnerabilityAssessments returns an object that can list and get SqlPoolVulnerabilityAssessments.
func (s *sqlPoolVulnerabilityAssessmentLister) SqlPoolVulnerabilityAssessments(namespace string) SqlPoolVulnerabilityAssessmentNamespaceLister {
	return sqlPoolVulnerabilityAssessmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SqlPoolVulnerabilityAssessmentNamespaceLister helps list and get SqlPoolVulnerabilityAssessments.
// All objects returned here must be treated as read-only.
type SqlPoolVulnerabilityAssessmentNamespaceLister interface {
	// List lists all SqlPoolVulnerabilityAssessments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SqlPoolVulnerabilityAssessment, err error)
	// Get retrieves the SqlPoolVulnerabilityAssessment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SqlPoolVulnerabilityAssessment, error)
	SqlPoolVulnerabilityAssessmentNamespaceListerExpansion
}

// sqlPoolVulnerabilityAssessmentNamespaceLister implements the SqlPoolVulnerabilityAssessmentNamespaceLister
// interface.
type sqlPoolVulnerabilityAssessmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SqlPoolVulnerabilityAssessments in the indexer for a given namespace.
func (s sqlPoolVulnerabilityAssessmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SqlPoolVulnerabilityAssessment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SqlPoolVulnerabilityAssessment))
	})
	return ret, err
}

// Get retrieves the SqlPoolVulnerabilityAssessment from the indexer for a given namespace and name.
func (s sqlPoolVulnerabilityAssessmentNamespaceLister) Get(name string) (*v1alpha1.SqlPoolVulnerabilityAssessment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sqlpoolvulnerabilityassessment"), name)
	}
	return obj.(*v1alpha1.SqlPoolVulnerabilityAssessment), nil
}
