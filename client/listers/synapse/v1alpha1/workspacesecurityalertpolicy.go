/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/synapse/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WorkspaceSecurityAlertPolicyLister helps list WorkspaceSecurityAlertPolicies.
// All objects returned here must be treated as read-only.
type WorkspaceSecurityAlertPolicyLister interface {
	// List lists all WorkspaceSecurityAlertPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WorkspaceSecurityAlertPolicy, err error)
	// WorkspaceSecurityAlertPolicies returns an object that can list and get WorkspaceSecurityAlertPolicies.
	WorkspaceSecurityAlertPolicies(namespace string) WorkspaceSecurityAlertPolicyNamespaceLister
	WorkspaceSecurityAlertPolicyListerExpansion
}

// workspaceSecurityAlertPolicyLister implements the WorkspaceSecurityAlertPolicyLister interface.
type workspaceSecurityAlertPolicyLister struct {
	indexer cache.Indexer
}

// NewWorkspaceSecurityAlertPolicyLister returns a new WorkspaceSecurityAlertPolicyLister.
func NewWorkspaceSecurityAlertPolicyLister(indexer cache.Indexer) WorkspaceSecurityAlertPolicyLister {
	return &workspaceSecurityAlertPolicyLister{indexer: indexer}
}

// List lists all WorkspaceSecurityAlertPolicies in the indexer.
func (s *workspaceSecurityAlertPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.WorkspaceSecurityAlertPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WorkspaceSecurityAlertPolicy))
	})
	return ret, err
}

// WorkspaceSecurityAlertPolicies returns an object that can list and get WorkspaceSecurityAlertPolicies.
func (s *workspaceSecurityAlertPolicyLister) WorkspaceSecurityAlertPolicies(namespace string) WorkspaceSecurityAlertPolicyNamespaceLister {
	return workspaceSecurityAlertPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WorkspaceSecurityAlertPolicyNamespaceLister helps list and get WorkspaceSecurityAlertPolicies.
// All objects returned here must be treated as read-only.
type WorkspaceSecurityAlertPolicyNamespaceLister interface {
	// List lists all WorkspaceSecurityAlertPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WorkspaceSecurityAlertPolicy, err error)
	// Get retrieves the WorkspaceSecurityAlertPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.WorkspaceSecurityAlertPolicy, error)
	WorkspaceSecurityAlertPolicyNamespaceListerExpansion
}

// workspaceSecurityAlertPolicyNamespaceLister implements the WorkspaceSecurityAlertPolicyNamespaceLister
// interface.
type workspaceSecurityAlertPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WorkspaceSecurityAlertPolicies in the indexer for a given namespace.
func (s workspaceSecurityAlertPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.WorkspaceSecurityAlertPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WorkspaceSecurityAlertPolicy))
	})
	return ret, err
}

// Get retrieves the WorkspaceSecurityAlertPolicy from the indexer for a given namespace and name.
func (s workspaceSecurityAlertPolicyNamespaceLister) Get(name string) (*v1alpha1.WorkspaceSecurityAlertPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("workspacesecurityalertpolicy"), name)
	}
	return obj.(*v1alpha1.WorkspaceSecurityAlertPolicy), nil
}
