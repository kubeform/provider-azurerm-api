/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/synapse/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PrivateLinkHubLister helps list PrivateLinkHubs.
// All objects returned here must be treated as read-only.
type PrivateLinkHubLister interface {
	// List lists all PrivateLinkHubs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PrivateLinkHub, err error)
	// PrivateLinkHubs returns an object that can list and get PrivateLinkHubs.
	PrivateLinkHubs(namespace string) PrivateLinkHubNamespaceLister
	PrivateLinkHubListerExpansion
}

// privateLinkHubLister implements the PrivateLinkHubLister interface.
type privateLinkHubLister struct {
	indexer cache.Indexer
}

// NewPrivateLinkHubLister returns a new PrivateLinkHubLister.
func NewPrivateLinkHubLister(indexer cache.Indexer) PrivateLinkHubLister {
	return &privateLinkHubLister{indexer: indexer}
}

// List lists all PrivateLinkHubs in the indexer.
func (s *privateLinkHubLister) List(selector labels.Selector) (ret []*v1alpha1.PrivateLinkHub, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PrivateLinkHub))
	})
	return ret, err
}

// PrivateLinkHubs returns an object that can list and get PrivateLinkHubs.
func (s *privateLinkHubLister) PrivateLinkHubs(namespace string) PrivateLinkHubNamespaceLister {
	return privateLinkHubNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PrivateLinkHubNamespaceLister helps list and get PrivateLinkHubs.
// All objects returned here must be treated as read-only.
type PrivateLinkHubNamespaceLister interface {
	// List lists all PrivateLinkHubs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PrivateLinkHub, err error)
	// Get retrieves the PrivateLinkHub from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PrivateLinkHub, error)
	PrivateLinkHubNamespaceListerExpansion
}

// privateLinkHubNamespaceLister implements the PrivateLinkHubNamespaceLister
// interface.
type privateLinkHubNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PrivateLinkHubs in the indexer for a given namespace.
func (s privateLinkHubNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PrivateLinkHub, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PrivateLinkHub))
	})
	return ret, err
}

// Get retrieves the PrivateLinkHub from the indexer for a given namespace and name.
func (s privateLinkHubNamespaceLister) Get(name string) (*v1alpha1.PrivateLinkHub, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("privatelinkhub"), name)
	}
	return obj.(*v1alpha1.PrivateLinkHub), nil
}
