/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/synapse/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SqlPoolExtendedAuditingPolicyLister helps list SqlPoolExtendedAuditingPolicies.
// All objects returned here must be treated as read-only.
type SqlPoolExtendedAuditingPolicyLister interface {
	// List lists all SqlPoolExtendedAuditingPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SqlPoolExtendedAuditingPolicy, err error)
	// SqlPoolExtendedAuditingPolicies returns an object that can list and get SqlPoolExtendedAuditingPolicies.
	SqlPoolExtendedAuditingPolicies(namespace string) SqlPoolExtendedAuditingPolicyNamespaceLister
	SqlPoolExtendedAuditingPolicyListerExpansion
}

// sqlPoolExtendedAuditingPolicyLister implements the SqlPoolExtendedAuditingPolicyLister interface.
type sqlPoolExtendedAuditingPolicyLister struct {
	indexer cache.Indexer
}

// NewSqlPoolExtendedAuditingPolicyLister returns a new SqlPoolExtendedAuditingPolicyLister.
func NewSqlPoolExtendedAuditingPolicyLister(indexer cache.Indexer) SqlPoolExtendedAuditingPolicyLister {
	return &sqlPoolExtendedAuditingPolicyLister{indexer: indexer}
}

// List lists all SqlPoolExtendedAuditingPolicies in the indexer.
func (s *sqlPoolExtendedAuditingPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.SqlPoolExtendedAuditingPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SqlPoolExtendedAuditingPolicy))
	})
	return ret, err
}

// SqlPoolExtendedAuditingPolicies returns an object that can list and get SqlPoolExtendedAuditingPolicies.
func (s *sqlPoolExtendedAuditingPolicyLister) SqlPoolExtendedAuditingPolicies(namespace string) SqlPoolExtendedAuditingPolicyNamespaceLister {
	return sqlPoolExtendedAuditingPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SqlPoolExtendedAuditingPolicyNamespaceLister helps list and get SqlPoolExtendedAuditingPolicies.
// All objects returned here must be treated as read-only.
type SqlPoolExtendedAuditingPolicyNamespaceLister interface {
	// List lists all SqlPoolExtendedAuditingPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SqlPoolExtendedAuditingPolicy, err error)
	// Get retrieves the SqlPoolExtendedAuditingPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SqlPoolExtendedAuditingPolicy, error)
	SqlPoolExtendedAuditingPolicyNamespaceListerExpansion
}

// sqlPoolExtendedAuditingPolicyNamespaceLister implements the SqlPoolExtendedAuditingPolicyNamespaceLister
// interface.
type sqlPoolExtendedAuditingPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SqlPoolExtendedAuditingPolicies in the indexer for a given namespace.
func (s sqlPoolExtendedAuditingPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SqlPoolExtendedAuditingPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SqlPoolExtendedAuditingPolicy))
	})
	return ret, err
}

// Get retrieves the SqlPoolExtendedAuditingPolicy from the indexer for a given namespace and name.
func (s sqlPoolExtendedAuditingPolicyNamespaceLister) Get(name string) (*v1alpha1.SqlPoolExtendedAuditingPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sqlpoolextendedauditingpolicy"), name)
	}
	return obj.(*v1alpha1.SqlPoolExtendedAuditingPolicy), nil
}
