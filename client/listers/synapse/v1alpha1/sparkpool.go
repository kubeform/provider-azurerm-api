/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/synapse/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SparkPoolLister helps list SparkPools.
// All objects returned here must be treated as read-only.
type SparkPoolLister interface {
	// List lists all SparkPools in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SparkPool, err error)
	// SparkPools returns an object that can list and get SparkPools.
	SparkPools(namespace string) SparkPoolNamespaceLister
	SparkPoolListerExpansion
}

// sparkPoolLister implements the SparkPoolLister interface.
type sparkPoolLister struct {
	indexer cache.Indexer
}

// NewSparkPoolLister returns a new SparkPoolLister.
func NewSparkPoolLister(indexer cache.Indexer) SparkPoolLister {
	return &sparkPoolLister{indexer: indexer}
}

// List lists all SparkPools in the indexer.
func (s *sparkPoolLister) List(selector labels.Selector) (ret []*v1alpha1.SparkPool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SparkPool))
	})
	return ret, err
}

// SparkPools returns an object that can list and get SparkPools.
func (s *sparkPoolLister) SparkPools(namespace string) SparkPoolNamespaceLister {
	return sparkPoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SparkPoolNamespaceLister helps list and get SparkPools.
// All objects returned here must be treated as read-only.
type SparkPoolNamespaceLister interface {
	// List lists all SparkPools in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SparkPool, err error)
	// Get retrieves the SparkPool from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SparkPool, error)
	SparkPoolNamespaceListerExpansion
}

// sparkPoolNamespaceLister implements the SparkPoolNamespaceLister
// interface.
type sparkPoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SparkPools in the indexer for a given namespace.
func (s sparkPoolNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SparkPool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SparkPool))
	})
	return ret, err
}

// Get retrieves the SparkPool from the indexer for a given namespace and name.
func (s sparkPoolNamespaceLister) Get(name string) (*v1alpha1.SparkPool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sparkpool"), name)
	}
	return obj.(*v1alpha1.SparkPool), nil
}
