/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/synapse/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SqlPoolWorkloadGroupLister helps list SqlPoolWorkloadGroups.
// All objects returned here must be treated as read-only.
type SqlPoolWorkloadGroupLister interface {
	// List lists all SqlPoolWorkloadGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SqlPoolWorkloadGroup, err error)
	// SqlPoolWorkloadGroups returns an object that can list and get SqlPoolWorkloadGroups.
	SqlPoolWorkloadGroups(namespace string) SqlPoolWorkloadGroupNamespaceLister
	SqlPoolWorkloadGroupListerExpansion
}

// sqlPoolWorkloadGroupLister implements the SqlPoolWorkloadGroupLister interface.
type sqlPoolWorkloadGroupLister struct {
	indexer cache.Indexer
}

// NewSqlPoolWorkloadGroupLister returns a new SqlPoolWorkloadGroupLister.
func NewSqlPoolWorkloadGroupLister(indexer cache.Indexer) SqlPoolWorkloadGroupLister {
	return &sqlPoolWorkloadGroupLister{indexer: indexer}
}

// List lists all SqlPoolWorkloadGroups in the indexer.
func (s *sqlPoolWorkloadGroupLister) List(selector labels.Selector) (ret []*v1alpha1.SqlPoolWorkloadGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SqlPoolWorkloadGroup))
	})
	return ret, err
}

// SqlPoolWorkloadGroups returns an object that can list and get SqlPoolWorkloadGroups.
func (s *sqlPoolWorkloadGroupLister) SqlPoolWorkloadGroups(namespace string) SqlPoolWorkloadGroupNamespaceLister {
	return sqlPoolWorkloadGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SqlPoolWorkloadGroupNamespaceLister helps list and get SqlPoolWorkloadGroups.
// All objects returned here must be treated as read-only.
type SqlPoolWorkloadGroupNamespaceLister interface {
	// List lists all SqlPoolWorkloadGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SqlPoolWorkloadGroup, err error)
	// Get retrieves the SqlPoolWorkloadGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SqlPoolWorkloadGroup, error)
	SqlPoolWorkloadGroupNamespaceListerExpansion
}

// sqlPoolWorkloadGroupNamespaceLister implements the SqlPoolWorkloadGroupNamespaceLister
// interface.
type sqlPoolWorkloadGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SqlPoolWorkloadGroups in the indexer for a given namespace.
func (s sqlPoolWorkloadGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SqlPoolWorkloadGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SqlPoolWorkloadGroup))
	})
	return ret, err
}

// Get retrieves the SqlPoolWorkloadGroup from the indexer for a given namespace and name.
func (s sqlPoolWorkloadGroupNamespaceLister) Get(name string) (*v1alpha1.SqlPoolWorkloadGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sqlpoolworkloadgroup"), name)
	}
	return obj.(*v1alpha1.SqlPoolWorkloadGroup), nil
}
