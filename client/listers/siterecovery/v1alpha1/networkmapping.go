/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/siterecovery/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NetworkMappingLister helps list NetworkMappings.
// All objects returned here must be treated as read-only.
type NetworkMappingLister interface {
	// List lists all NetworkMappings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkMapping, err error)
	// NetworkMappings returns an object that can list and get NetworkMappings.
	NetworkMappings(namespace string) NetworkMappingNamespaceLister
	NetworkMappingListerExpansion
}

// networkMappingLister implements the NetworkMappingLister interface.
type networkMappingLister struct {
	indexer cache.Indexer
}

// NewNetworkMappingLister returns a new NetworkMappingLister.
func NewNetworkMappingLister(indexer cache.Indexer) NetworkMappingLister {
	return &networkMappingLister{indexer: indexer}
}

// List lists all NetworkMappings in the indexer.
func (s *networkMappingLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkMapping, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkMapping))
	})
	return ret, err
}

// NetworkMappings returns an object that can list and get NetworkMappings.
func (s *networkMappingLister) NetworkMappings(namespace string) NetworkMappingNamespaceLister {
	return networkMappingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NetworkMappingNamespaceLister helps list and get NetworkMappings.
// All objects returned here must be treated as read-only.
type NetworkMappingNamespaceLister interface {
	// List lists all NetworkMappings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkMapping, err error)
	// Get retrieves the NetworkMapping from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NetworkMapping, error)
	NetworkMappingNamespaceListerExpansion
}

// networkMappingNamespaceLister implements the NetworkMappingNamespaceLister
// interface.
type networkMappingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NetworkMappings in the indexer for a given namespace.
func (s networkMappingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkMapping, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkMapping))
	})
	return ret, err
}

// Get retrieves the NetworkMapping from the indexer for a given namespace and name.
func (s networkMappingNamespaceLister) Get(name string) (*v1alpha1.NetworkMapping, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("networkmapping"), name)
	}
	return obj.(*v1alpha1.NetworkMapping), nil
}
