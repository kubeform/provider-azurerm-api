/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/siterecovery/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FabricLister helps list Fabrics.
// All objects returned here must be treated as read-only.
type FabricLister interface {
	// List lists all Fabrics in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Fabric, err error)
	// Fabrics returns an object that can list and get Fabrics.
	Fabrics(namespace string) FabricNamespaceLister
	FabricListerExpansion
}

// fabricLister implements the FabricLister interface.
type fabricLister struct {
	indexer cache.Indexer
}

// NewFabricLister returns a new FabricLister.
func NewFabricLister(indexer cache.Indexer) FabricLister {
	return &fabricLister{indexer: indexer}
}

// List lists all Fabrics in the indexer.
func (s *fabricLister) List(selector labels.Selector) (ret []*v1alpha1.Fabric, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Fabric))
	})
	return ret, err
}

// Fabrics returns an object that can list and get Fabrics.
func (s *fabricLister) Fabrics(namespace string) FabricNamespaceLister {
	return fabricNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FabricNamespaceLister helps list and get Fabrics.
// All objects returned here must be treated as read-only.
type FabricNamespaceLister interface {
	// List lists all Fabrics in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Fabric, err error)
	// Get retrieves the Fabric from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Fabric, error)
	FabricNamespaceListerExpansion
}

// fabricNamespaceLister implements the FabricNamespaceLister
// interface.
type fabricNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Fabrics in the indexer for a given namespace.
func (s fabricNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Fabric, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Fabric))
	})
	return ret, err
}

// Get retrieves the Fabric from the indexer for a given namespace and name.
func (s fabricNamespaceLister) Get(name string) (*v1alpha1.Fabric, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("fabric"), name)
	}
	return obj.(*v1alpha1.Fabric), nil
}
