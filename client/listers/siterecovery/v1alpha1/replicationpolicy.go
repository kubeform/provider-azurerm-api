/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/siterecovery/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ReplicationPolicyLister helps list ReplicationPolicies.
// All objects returned here must be treated as read-only.
type ReplicationPolicyLister interface {
	// List lists all ReplicationPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ReplicationPolicy, err error)
	// ReplicationPolicies returns an object that can list and get ReplicationPolicies.
	ReplicationPolicies(namespace string) ReplicationPolicyNamespaceLister
	ReplicationPolicyListerExpansion
}

// replicationPolicyLister implements the ReplicationPolicyLister interface.
type replicationPolicyLister struct {
	indexer cache.Indexer
}

// NewReplicationPolicyLister returns a new ReplicationPolicyLister.
func NewReplicationPolicyLister(indexer cache.Indexer) ReplicationPolicyLister {
	return &replicationPolicyLister{indexer: indexer}
}

// List lists all ReplicationPolicies in the indexer.
func (s *replicationPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.ReplicationPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ReplicationPolicy))
	})
	return ret, err
}

// ReplicationPolicies returns an object that can list and get ReplicationPolicies.
func (s *replicationPolicyLister) ReplicationPolicies(namespace string) ReplicationPolicyNamespaceLister {
	return replicationPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ReplicationPolicyNamespaceLister helps list and get ReplicationPolicies.
// All objects returned here must be treated as read-only.
type ReplicationPolicyNamespaceLister interface {
	// List lists all ReplicationPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ReplicationPolicy, err error)
	// Get retrieves the ReplicationPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ReplicationPolicy, error)
	ReplicationPolicyNamespaceListerExpansion
}

// replicationPolicyNamespaceLister implements the ReplicationPolicyNamespaceLister
// interface.
type replicationPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ReplicationPolicies in the indexer for a given namespace.
func (s replicationPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ReplicationPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ReplicationPolicy))
	})
	return ret, err
}

// Get retrieves the ReplicationPolicy from the indexer for a given namespace and name.
func (s replicationPolicyNamespaceLister) Get(name string) (*v1alpha1.ReplicationPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("replicationpolicy"), name)
	}
	return obj.(*v1alpha1.ReplicationPolicy), nil
}
