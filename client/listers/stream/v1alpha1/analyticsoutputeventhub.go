/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/stream/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AnalyticsOutputEventhubLister helps list AnalyticsOutputEventhubs.
// All objects returned here must be treated as read-only.
type AnalyticsOutputEventhubLister interface {
	// List lists all AnalyticsOutputEventhubs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AnalyticsOutputEventhub, err error)
	// AnalyticsOutputEventhubs returns an object that can list and get AnalyticsOutputEventhubs.
	AnalyticsOutputEventhubs(namespace string) AnalyticsOutputEventhubNamespaceLister
	AnalyticsOutputEventhubListerExpansion
}

// analyticsOutputEventhubLister implements the AnalyticsOutputEventhubLister interface.
type analyticsOutputEventhubLister struct {
	indexer cache.Indexer
}

// NewAnalyticsOutputEventhubLister returns a new AnalyticsOutputEventhubLister.
func NewAnalyticsOutputEventhubLister(indexer cache.Indexer) AnalyticsOutputEventhubLister {
	return &analyticsOutputEventhubLister{indexer: indexer}
}

// List lists all AnalyticsOutputEventhubs in the indexer.
func (s *analyticsOutputEventhubLister) List(selector labels.Selector) (ret []*v1alpha1.AnalyticsOutputEventhub, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AnalyticsOutputEventhub))
	})
	return ret, err
}

// AnalyticsOutputEventhubs returns an object that can list and get AnalyticsOutputEventhubs.
func (s *analyticsOutputEventhubLister) AnalyticsOutputEventhubs(namespace string) AnalyticsOutputEventhubNamespaceLister {
	return analyticsOutputEventhubNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AnalyticsOutputEventhubNamespaceLister helps list and get AnalyticsOutputEventhubs.
// All objects returned here must be treated as read-only.
type AnalyticsOutputEventhubNamespaceLister interface {
	// List lists all AnalyticsOutputEventhubs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AnalyticsOutputEventhub, err error)
	// Get retrieves the AnalyticsOutputEventhub from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AnalyticsOutputEventhub, error)
	AnalyticsOutputEventhubNamespaceListerExpansion
}

// analyticsOutputEventhubNamespaceLister implements the AnalyticsOutputEventhubNamespaceLister
// interface.
type analyticsOutputEventhubNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AnalyticsOutputEventhubs in the indexer for a given namespace.
func (s analyticsOutputEventhubNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AnalyticsOutputEventhub, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AnalyticsOutputEventhub))
	})
	return ret, err
}

// Get retrieves the AnalyticsOutputEventhub from the indexer for a given namespace and name.
func (s analyticsOutputEventhubNamespaceLister) Get(name string) (*v1alpha1.AnalyticsOutputEventhub, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("analyticsoutputeventhub"), name)
	}
	return obj.(*v1alpha1.AnalyticsOutputEventhub), nil
}
