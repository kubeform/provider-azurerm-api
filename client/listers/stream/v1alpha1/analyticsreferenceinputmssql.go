/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/stream/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AnalyticsReferenceInputMssqlLister helps list AnalyticsReferenceInputMssqls.
// All objects returned here must be treated as read-only.
type AnalyticsReferenceInputMssqlLister interface {
	// List lists all AnalyticsReferenceInputMssqls in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AnalyticsReferenceInputMssql, err error)
	// AnalyticsReferenceInputMssqls returns an object that can list and get AnalyticsReferenceInputMssqls.
	AnalyticsReferenceInputMssqls(namespace string) AnalyticsReferenceInputMssqlNamespaceLister
	AnalyticsReferenceInputMssqlListerExpansion
}

// analyticsReferenceInputMssqlLister implements the AnalyticsReferenceInputMssqlLister interface.
type analyticsReferenceInputMssqlLister struct {
	indexer cache.Indexer
}

// NewAnalyticsReferenceInputMssqlLister returns a new AnalyticsReferenceInputMssqlLister.
func NewAnalyticsReferenceInputMssqlLister(indexer cache.Indexer) AnalyticsReferenceInputMssqlLister {
	return &analyticsReferenceInputMssqlLister{indexer: indexer}
}

// List lists all AnalyticsReferenceInputMssqls in the indexer.
func (s *analyticsReferenceInputMssqlLister) List(selector labels.Selector) (ret []*v1alpha1.AnalyticsReferenceInputMssql, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AnalyticsReferenceInputMssql))
	})
	return ret, err
}

// AnalyticsReferenceInputMssqls returns an object that can list and get AnalyticsReferenceInputMssqls.
func (s *analyticsReferenceInputMssqlLister) AnalyticsReferenceInputMssqls(namespace string) AnalyticsReferenceInputMssqlNamespaceLister {
	return analyticsReferenceInputMssqlNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AnalyticsReferenceInputMssqlNamespaceLister helps list and get AnalyticsReferenceInputMssqls.
// All objects returned here must be treated as read-only.
type AnalyticsReferenceInputMssqlNamespaceLister interface {
	// List lists all AnalyticsReferenceInputMssqls in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AnalyticsReferenceInputMssql, err error)
	// Get retrieves the AnalyticsReferenceInputMssql from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AnalyticsReferenceInputMssql, error)
	AnalyticsReferenceInputMssqlNamespaceListerExpansion
}

// analyticsReferenceInputMssqlNamespaceLister implements the AnalyticsReferenceInputMssqlNamespaceLister
// interface.
type analyticsReferenceInputMssqlNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AnalyticsReferenceInputMssqls in the indexer for a given namespace.
func (s analyticsReferenceInputMssqlNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AnalyticsReferenceInputMssql, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AnalyticsReferenceInputMssql))
	})
	return ret, err
}

// Get retrieves the AnalyticsReferenceInputMssql from the indexer for a given namespace and name.
func (s analyticsReferenceInputMssqlNamespaceLister) Get(name string) (*v1alpha1.AnalyticsReferenceInputMssql, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("analyticsreferenceinputmssql"), name)
	}
	return obj.(*v1alpha1.AnalyticsReferenceInputMssql), nil
}
