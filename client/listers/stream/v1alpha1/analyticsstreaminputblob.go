/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/stream/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AnalyticsStreamInputBlobLister helps list AnalyticsStreamInputBlobs.
// All objects returned here must be treated as read-only.
type AnalyticsStreamInputBlobLister interface {
	// List lists all AnalyticsStreamInputBlobs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AnalyticsStreamInputBlob, err error)
	// AnalyticsStreamInputBlobs returns an object that can list and get AnalyticsStreamInputBlobs.
	AnalyticsStreamInputBlobs(namespace string) AnalyticsStreamInputBlobNamespaceLister
	AnalyticsStreamInputBlobListerExpansion
}

// analyticsStreamInputBlobLister implements the AnalyticsStreamInputBlobLister interface.
type analyticsStreamInputBlobLister struct {
	indexer cache.Indexer
}

// NewAnalyticsStreamInputBlobLister returns a new AnalyticsStreamInputBlobLister.
func NewAnalyticsStreamInputBlobLister(indexer cache.Indexer) AnalyticsStreamInputBlobLister {
	return &analyticsStreamInputBlobLister{indexer: indexer}
}

// List lists all AnalyticsStreamInputBlobs in the indexer.
func (s *analyticsStreamInputBlobLister) List(selector labels.Selector) (ret []*v1alpha1.AnalyticsStreamInputBlob, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AnalyticsStreamInputBlob))
	})
	return ret, err
}

// AnalyticsStreamInputBlobs returns an object that can list and get AnalyticsStreamInputBlobs.
func (s *analyticsStreamInputBlobLister) AnalyticsStreamInputBlobs(namespace string) AnalyticsStreamInputBlobNamespaceLister {
	return analyticsStreamInputBlobNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AnalyticsStreamInputBlobNamespaceLister helps list and get AnalyticsStreamInputBlobs.
// All objects returned here must be treated as read-only.
type AnalyticsStreamInputBlobNamespaceLister interface {
	// List lists all AnalyticsStreamInputBlobs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AnalyticsStreamInputBlob, err error)
	// Get retrieves the AnalyticsStreamInputBlob from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AnalyticsStreamInputBlob, error)
	AnalyticsStreamInputBlobNamespaceListerExpansion
}

// analyticsStreamInputBlobNamespaceLister implements the AnalyticsStreamInputBlobNamespaceLister
// interface.
type analyticsStreamInputBlobNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AnalyticsStreamInputBlobs in the indexer for a given namespace.
func (s analyticsStreamInputBlobNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AnalyticsStreamInputBlob, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AnalyticsStreamInputBlob))
	})
	return ret, err
}

// Get retrieves the AnalyticsStreamInputBlob from the indexer for a given namespace and name.
func (s analyticsStreamInputBlobNamespaceLister) Get(name string) (*v1alpha1.AnalyticsStreamInputBlob, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("analyticsstreaminputblob"), name)
	}
	return obj.(*v1alpha1.AnalyticsStreamInputBlob), nil
}
