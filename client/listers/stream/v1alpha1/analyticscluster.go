/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/stream/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AnalyticsClusterLister helps list AnalyticsClusters.
// All objects returned here must be treated as read-only.
type AnalyticsClusterLister interface {
	// List lists all AnalyticsClusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AnalyticsCluster, err error)
	// AnalyticsClusters returns an object that can list and get AnalyticsClusters.
	AnalyticsClusters(namespace string) AnalyticsClusterNamespaceLister
	AnalyticsClusterListerExpansion
}

// analyticsClusterLister implements the AnalyticsClusterLister interface.
type analyticsClusterLister struct {
	indexer cache.Indexer
}

// NewAnalyticsClusterLister returns a new AnalyticsClusterLister.
func NewAnalyticsClusterLister(indexer cache.Indexer) AnalyticsClusterLister {
	return &analyticsClusterLister{indexer: indexer}
}

// List lists all AnalyticsClusters in the indexer.
func (s *analyticsClusterLister) List(selector labels.Selector) (ret []*v1alpha1.AnalyticsCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AnalyticsCluster))
	})
	return ret, err
}

// AnalyticsClusters returns an object that can list and get AnalyticsClusters.
func (s *analyticsClusterLister) AnalyticsClusters(namespace string) AnalyticsClusterNamespaceLister {
	return analyticsClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AnalyticsClusterNamespaceLister helps list and get AnalyticsClusters.
// All objects returned here must be treated as read-only.
type AnalyticsClusterNamespaceLister interface {
	// List lists all AnalyticsClusters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AnalyticsCluster, err error)
	// Get retrieves the AnalyticsCluster from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AnalyticsCluster, error)
	AnalyticsClusterNamespaceListerExpansion
}

// analyticsClusterNamespaceLister implements the AnalyticsClusterNamespaceLister
// interface.
type analyticsClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AnalyticsClusters in the indexer for a given namespace.
func (s analyticsClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AnalyticsCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AnalyticsCluster))
	})
	return ret, err
}

// Get retrieves the AnalyticsCluster from the indexer for a given namespace and name.
func (s analyticsClusterNamespaceLister) Get(name string) (*v1alpha1.AnalyticsCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("analyticscluster"), name)
	}
	return obj.(*v1alpha1.AnalyticsCluster), nil
}
