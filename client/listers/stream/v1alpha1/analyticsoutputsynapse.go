/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/stream/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AnalyticsOutputSynapseLister helps list AnalyticsOutputSynapses.
// All objects returned here must be treated as read-only.
type AnalyticsOutputSynapseLister interface {
	// List lists all AnalyticsOutputSynapses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AnalyticsOutputSynapse, err error)
	// AnalyticsOutputSynapses returns an object that can list and get AnalyticsOutputSynapses.
	AnalyticsOutputSynapses(namespace string) AnalyticsOutputSynapseNamespaceLister
	AnalyticsOutputSynapseListerExpansion
}

// analyticsOutputSynapseLister implements the AnalyticsOutputSynapseLister interface.
type analyticsOutputSynapseLister struct {
	indexer cache.Indexer
}

// NewAnalyticsOutputSynapseLister returns a new AnalyticsOutputSynapseLister.
func NewAnalyticsOutputSynapseLister(indexer cache.Indexer) AnalyticsOutputSynapseLister {
	return &analyticsOutputSynapseLister{indexer: indexer}
}

// List lists all AnalyticsOutputSynapses in the indexer.
func (s *analyticsOutputSynapseLister) List(selector labels.Selector) (ret []*v1alpha1.AnalyticsOutputSynapse, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AnalyticsOutputSynapse))
	})
	return ret, err
}

// AnalyticsOutputSynapses returns an object that can list and get AnalyticsOutputSynapses.
func (s *analyticsOutputSynapseLister) AnalyticsOutputSynapses(namespace string) AnalyticsOutputSynapseNamespaceLister {
	return analyticsOutputSynapseNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AnalyticsOutputSynapseNamespaceLister helps list and get AnalyticsOutputSynapses.
// All objects returned here must be treated as read-only.
type AnalyticsOutputSynapseNamespaceLister interface {
	// List lists all AnalyticsOutputSynapses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AnalyticsOutputSynapse, err error)
	// Get retrieves the AnalyticsOutputSynapse from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AnalyticsOutputSynapse, error)
	AnalyticsOutputSynapseNamespaceListerExpansion
}

// analyticsOutputSynapseNamespaceLister implements the AnalyticsOutputSynapseNamespaceLister
// interface.
type analyticsOutputSynapseNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AnalyticsOutputSynapses in the indexer for a given namespace.
func (s analyticsOutputSynapseNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AnalyticsOutputSynapse, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AnalyticsOutputSynapse))
	})
	return ret, err
}

// Get retrieves the AnalyticsOutputSynapse from the indexer for a given namespace and name.
func (s analyticsOutputSynapseNamespaceLister) Get(name string) (*v1alpha1.AnalyticsOutputSynapse, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("analyticsoutputsynapse"), name)
	}
	return obj.(*v1alpha1.AnalyticsOutputSynapse), nil
}
