/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/stream/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AnalyticsStreamInputIothubLister helps list AnalyticsStreamInputIothubs.
// All objects returned here must be treated as read-only.
type AnalyticsStreamInputIothubLister interface {
	// List lists all AnalyticsStreamInputIothubs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AnalyticsStreamInputIothub, err error)
	// AnalyticsStreamInputIothubs returns an object that can list and get AnalyticsStreamInputIothubs.
	AnalyticsStreamInputIothubs(namespace string) AnalyticsStreamInputIothubNamespaceLister
	AnalyticsStreamInputIothubListerExpansion
}

// analyticsStreamInputIothubLister implements the AnalyticsStreamInputIothubLister interface.
type analyticsStreamInputIothubLister struct {
	indexer cache.Indexer
}

// NewAnalyticsStreamInputIothubLister returns a new AnalyticsStreamInputIothubLister.
func NewAnalyticsStreamInputIothubLister(indexer cache.Indexer) AnalyticsStreamInputIothubLister {
	return &analyticsStreamInputIothubLister{indexer: indexer}
}

// List lists all AnalyticsStreamInputIothubs in the indexer.
func (s *analyticsStreamInputIothubLister) List(selector labels.Selector) (ret []*v1alpha1.AnalyticsStreamInputIothub, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AnalyticsStreamInputIothub))
	})
	return ret, err
}

// AnalyticsStreamInputIothubs returns an object that can list and get AnalyticsStreamInputIothubs.
func (s *analyticsStreamInputIothubLister) AnalyticsStreamInputIothubs(namespace string) AnalyticsStreamInputIothubNamespaceLister {
	return analyticsStreamInputIothubNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AnalyticsStreamInputIothubNamespaceLister helps list and get AnalyticsStreamInputIothubs.
// All objects returned here must be treated as read-only.
type AnalyticsStreamInputIothubNamespaceLister interface {
	// List lists all AnalyticsStreamInputIothubs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AnalyticsStreamInputIothub, err error)
	// Get retrieves the AnalyticsStreamInputIothub from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AnalyticsStreamInputIothub, error)
	AnalyticsStreamInputIothubNamespaceListerExpansion
}

// analyticsStreamInputIothubNamespaceLister implements the AnalyticsStreamInputIothubNamespaceLister
// interface.
type analyticsStreamInputIothubNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AnalyticsStreamInputIothubs in the indexer for a given namespace.
func (s analyticsStreamInputIothubNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AnalyticsStreamInputIothub, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AnalyticsStreamInputIothub))
	})
	return ret, err
}

// Get retrieves the AnalyticsStreamInputIothub from the indexer for a given namespace and name.
func (s analyticsStreamInputIothubNamespaceLister) Get(name string) (*v1alpha1.AnalyticsStreamInputIothub, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("analyticsstreaminputiothub"), name)
	}
	return obj.(*v1alpha1.AnalyticsStreamInputIothub), nil
}
