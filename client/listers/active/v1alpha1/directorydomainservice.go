/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/active/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DirectoryDomainServiceLister helps list DirectoryDomainServices.
// All objects returned here must be treated as read-only.
type DirectoryDomainServiceLister interface {
	// List lists all DirectoryDomainServices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DirectoryDomainService, err error)
	// DirectoryDomainServices returns an object that can list and get DirectoryDomainServices.
	DirectoryDomainServices(namespace string) DirectoryDomainServiceNamespaceLister
	DirectoryDomainServiceListerExpansion
}

// directoryDomainServiceLister implements the DirectoryDomainServiceLister interface.
type directoryDomainServiceLister struct {
	indexer cache.Indexer
}

// NewDirectoryDomainServiceLister returns a new DirectoryDomainServiceLister.
func NewDirectoryDomainServiceLister(indexer cache.Indexer) DirectoryDomainServiceLister {
	return &directoryDomainServiceLister{indexer: indexer}
}

// List lists all DirectoryDomainServices in the indexer.
func (s *directoryDomainServiceLister) List(selector labels.Selector) (ret []*v1alpha1.DirectoryDomainService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DirectoryDomainService))
	})
	return ret, err
}

// DirectoryDomainServices returns an object that can list and get DirectoryDomainServices.
func (s *directoryDomainServiceLister) DirectoryDomainServices(namespace string) DirectoryDomainServiceNamespaceLister {
	return directoryDomainServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DirectoryDomainServiceNamespaceLister helps list and get DirectoryDomainServices.
// All objects returned here must be treated as read-only.
type DirectoryDomainServiceNamespaceLister interface {
	// List lists all DirectoryDomainServices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DirectoryDomainService, err error)
	// Get retrieves the DirectoryDomainService from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DirectoryDomainService, error)
	DirectoryDomainServiceNamespaceListerExpansion
}

// directoryDomainServiceNamespaceLister implements the DirectoryDomainServiceNamespaceLister
// interface.
type directoryDomainServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DirectoryDomainServices in the indexer for a given namespace.
func (s directoryDomainServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DirectoryDomainService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DirectoryDomainService))
	})
	return ret, err
}

// Get retrieves the DirectoryDomainService from the indexer for a given namespace and name.
func (s directoryDomainServiceNamespaceLister) Get(name string) (*v1alpha1.DirectoryDomainService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("directorydomainservice"), name)
	}
	return obj.(*v1alpha1.DirectoryDomainService), nil
}
