/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/resource/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GroupCostManagementExportLister helps list GroupCostManagementExports.
// All objects returned here must be treated as read-only.
type GroupCostManagementExportLister interface {
	// List lists all GroupCostManagementExports in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GroupCostManagementExport, err error)
	// GroupCostManagementExports returns an object that can list and get GroupCostManagementExports.
	GroupCostManagementExports(namespace string) GroupCostManagementExportNamespaceLister
	GroupCostManagementExportListerExpansion
}

// groupCostManagementExportLister implements the GroupCostManagementExportLister interface.
type groupCostManagementExportLister struct {
	indexer cache.Indexer
}

// NewGroupCostManagementExportLister returns a new GroupCostManagementExportLister.
func NewGroupCostManagementExportLister(indexer cache.Indexer) GroupCostManagementExportLister {
	return &groupCostManagementExportLister{indexer: indexer}
}

// List lists all GroupCostManagementExports in the indexer.
func (s *groupCostManagementExportLister) List(selector labels.Selector) (ret []*v1alpha1.GroupCostManagementExport, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GroupCostManagementExport))
	})
	return ret, err
}

// GroupCostManagementExports returns an object that can list and get GroupCostManagementExports.
func (s *groupCostManagementExportLister) GroupCostManagementExports(namespace string) GroupCostManagementExportNamespaceLister {
	return groupCostManagementExportNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GroupCostManagementExportNamespaceLister helps list and get GroupCostManagementExports.
// All objects returned here must be treated as read-only.
type GroupCostManagementExportNamespaceLister interface {
	// List lists all GroupCostManagementExports in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GroupCostManagementExport, err error)
	// Get retrieves the GroupCostManagementExport from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GroupCostManagementExport, error)
	GroupCostManagementExportNamespaceListerExpansion
}

// groupCostManagementExportNamespaceLister implements the GroupCostManagementExportNamespaceLister
// interface.
type groupCostManagementExportNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GroupCostManagementExports in the indexer for a given namespace.
func (s groupCostManagementExportNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GroupCostManagementExport, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GroupCostManagementExport))
	})
	return ret, err
}

// Get retrieves the GroupCostManagementExport from the indexer for a given namespace and name.
func (s groupCostManagementExportNamespaceLister) Get(name string) (*v1alpha1.GroupCostManagementExport, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("groupcostmanagementexport"), name)
	}
	return obj.(*v1alpha1.GroupCostManagementExport), nil
}
