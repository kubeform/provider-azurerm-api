/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/resource/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProviderRegistrationLister helps list ProviderRegistrations.
// All objects returned here must be treated as read-only.
type ProviderRegistrationLister interface {
	// List lists all ProviderRegistrations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProviderRegistration, err error)
	// ProviderRegistrations returns an object that can list and get ProviderRegistrations.
	ProviderRegistrations(namespace string) ProviderRegistrationNamespaceLister
	ProviderRegistrationListerExpansion
}

// providerRegistrationLister implements the ProviderRegistrationLister interface.
type providerRegistrationLister struct {
	indexer cache.Indexer
}

// NewProviderRegistrationLister returns a new ProviderRegistrationLister.
func NewProviderRegistrationLister(indexer cache.Indexer) ProviderRegistrationLister {
	return &providerRegistrationLister{indexer: indexer}
}

// List lists all ProviderRegistrations in the indexer.
func (s *providerRegistrationLister) List(selector labels.Selector) (ret []*v1alpha1.ProviderRegistration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProviderRegistration))
	})
	return ret, err
}

// ProviderRegistrations returns an object that can list and get ProviderRegistrations.
func (s *providerRegistrationLister) ProviderRegistrations(namespace string) ProviderRegistrationNamespaceLister {
	return providerRegistrationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProviderRegistrationNamespaceLister helps list and get ProviderRegistrations.
// All objects returned here must be treated as read-only.
type ProviderRegistrationNamespaceLister interface {
	// List lists all ProviderRegistrations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProviderRegistration, err error)
	// Get retrieves the ProviderRegistration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ProviderRegistration, error)
	ProviderRegistrationNamespaceListerExpansion
}

// providerRegistrationNamespaceLister implements the ProviderRegistrationNamespaceLister
// interface.
type providerRegistrationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProviderRegistrations in the indexer for a given namespace.
func (s providerRegistrationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ProviderRegistration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProviderRegistration))
	})
	return ret, err
}

// Get retrieves the ProviderRegistration from the indexer for a given namespace and name.
func (s providerRegistrationNamespaceLister) Get(name string) (*v1alpha1.ProviderRegistration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("providerregistration"), name)
	}
	return obj.(*v1alpha1.ProviderRegistration), nil
}
