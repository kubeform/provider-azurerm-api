/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/consumption/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BudgetSubscriptionLister helps list BudgetSubscriptions.
// All objects returned here must be treated as read-only.
type BudgetSubscriptionLister interface {
	// List lists all BudgetSubscriptions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BudgetSubscription, err error)
	// BudgetSubscriptions returns an object that can list and get BudgetSubscriptions.
	BudgetSubscriptions(namespace string) BudgetSubscriptionNamespaceLister
	BudgetSubscriptionListerExpansion
}

// budgetSubscriptionLister implements the BudgetSubscriptionLister interface.
type budgetSubscriptionLister struct {
	indexer cache.Indexer
}

// NewBudgetSubscriptionLister returns a new BudgetSubscriptionLister.
func NewBudgetSubscriptionLister(indexer cache.Indexer) BudgetSubscriptionLister {
	return &budgetSubscriptionLister{indexer: indexer}
}

// List lists all BudgetSubscriptions in the indexer.
func (s *budgetSubscriptionLister) List(selector labels.Selector) (ret []*v1alpha1.BudgetSubscription, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BudgetSubscription))
	})
	return ret, err
}

// BudgetSubscriptions returns an object that can list and get BudgetSubscriptions.
func (s *budgetSubscriptionLister) BudgetSubscriptions(namespace string) BudgetSubscriptionNamespaceLister {
	return budgetSubscriptionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BudgetSubscriptionNamespaceLister helps list and get BudgetSubscriptions.
// All objects returned here must be treated as read-only.
type BudgetSubscriptionNamespaceLister interface {
	// List lists all BudgetSubscriptions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BudgetSubscription, err error)
	// Get retrieves the BudgetSubscription from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BudgetSubscription, error)
	BudgetSubscriptionNamespaceListerExpansion
}

// budgetSubscriptionNamespaceLister implements the BudgetSubscriptionNamespaceLister
// interface.
type budgetSubscriptionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BudgetSubscriptions in the indexer for a given namespace.
func (s budgetSubscriptionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BudgetSubscription, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BudgetSubscription))
	})
	return ret, err
}

// Get retrieves the BudgetSubscription from the indexer for a given namespace and name.
func (s budgetSubscriptionNamespaceLister) Get(name string) (*v1alpha1.BudgetSubscription, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("budgetsubscription"), name)
	}
	return obj.(*v1alpha1.BudgetSubscription), nil
}
