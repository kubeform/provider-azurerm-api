/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/hpc/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CacheAccessPolicyLister helps list CacheAccessPolicies.
// All objects returned here must be treated as read-only.
type CacheAccessPolicyLister interface {
	// List lists all CacheAccessPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CacheAccessPolicy, err error)
	// CacheAccessPolicies returns an object that can list and get CacheAccessPolicies.
	CacheAccessPolicies(namespace string) CacheAccessPolicyNamespaceLister
	CacheAccessPolicyListerExpansion
}

// cacheAccessPolicyLister implements the CacheAccessPolicyLister interface.
type cacheAccessPolicyLister struct {
	indexer cache.Indexer
}

// NewCacheAccessPolicyLister returns a new CacheAccessPolicyLister.
func NewCacheAccessPolicyLister(indexer cache.Indexer) CacheAccessPolicyLister {
	return &cacheAccessPolicyLister{indexer: indexer}
}

// List lists all CacheAccessPolicies in the indexer.
func (s *cacheAccessPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.CacheAccessPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CacheAccessPolicy))
	})
	return ret, err
}

// CacheAccessPolicies returns an object that can list and get CacheAccessPolicies.
func (s *cacheAccessPolicyLister) CacheAccessPolicies(namespace string) CacheAccessPolicyNamespaceLister {
	return cacheAccessPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CacheAccessPolicyNamespaceLister helps list and get CacheAccessPolicies.
// All objects returned here must be treated as read-only.
type CacheAccessPolicyNamespaceLister interface {
	// List lists all CacheAccessPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CacheAccessPolicy, err error)
	// Get retrieves the CacheAccessPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CacheAccessPolicy, error)
	CacheAccessPolicyNamespaceListerExpansion
}

// cacheAccessPolicyNamespaceLister implements the CacheAccessPolicyNamespaceLister
// interface.
type cacheAccessPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CacheAccessPolicies in the indexer for a given namespace.
func (s cacheAccessPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CacheAccessPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CacheAccessPolicy))
	})
	return ret, err
}

// Get retrieves the CacheAccessPolicy from the indexer for a given namespace and name.
func (s cacheAccessPolicyNamespaceLister) Get(name string) (*v1alpha1.CacheAccessPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cacheaccesspolicy"), name)
	}
	return obj.(*v1alpha1.CacheAccessPolicy), nil
}
