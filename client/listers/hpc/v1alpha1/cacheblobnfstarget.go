/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/hpc/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CacheBlobNfsTargetLister helps list CacheBlobNfsTargets.
// All objects returned here must be treated as read-only.
type CacheBlobNfsTargetLister interface {
	// List lists all CacheBlobNfsTargets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CacheBlobNfsTarget, err error)
	// CacheBlobNfsTargets returns an object that can list and get CacheBlobNfsTargets.
	CacheBlobNfsTargets(namespace string) CacheBlobNfsTargetNamespaceLister
	CacheBlobNfsTargetListerExpansion
}

// cacheBlobNfsTargetLister implements the CacheBlobNfsTargetLister interface.
type cacheBlobNfsTargetLister struct {
	indexer cache.Indexer
}

// NewCacheBlobNfsTargetLister returns a new CacheBlobNfsTargetLister.
func NewCacheBlobNfsTargetLister(indexer cache.Indexer) CacheBlobNfsTargetLister {
	return &cacheBlobNfsTargetLister{indexer: indexer}
}

// List lists all CacheBlobNfsTargets in the indexer.
func (s *cacheBlobNfsTargetLister) List(selector labels.Selector) (ret []*v1alpha1.CacheBlobNfsTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CacheBlobNfsTarget))
	})
	return ret, err
}

// CacheBlobNfsTargets returns an object that can list and get CacheBlobNfsTargets.
func (s *cacheBlobNfsTargetLister) CacheBlobNfsTargets(namespace string) CacheBlobNfsTargetNamespaceLister {
	return cacheBlobNfsTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CacheBlobNfsTargetNamespaceLister helps list and get CacheBlobNfsTargets.
// All objects returned here must be treated as read-only.
type CacheBlobNfsTargetNamespaceLister interface {
	// List lists all CacheBlobNfsTargets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CacheBlobNfsTarget, err error)
	// Get retrieves the CacheBlobNfsTarget from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CacheBlobNfsTarget, error)
	CacheBlobNfsTargetNamespaceListerExpansion
}

// cacheBlobNfsTargetNamespaceLister implements the CacheBlobNfsTargetNamespaceLister
// interface.
type cacheBlobNfsTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CacheBlobNfsTargets in the indexer for a given namespace.
func (s cacheBlobNfsTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CacheBlobNfsTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CacheBlobNfsTarget))
	})
	return ret, err
}

// Get retrieves the CacheBlobNfsTarget from the indexer for a given namespace and name.
func (s cacheBlobNfsTargetNamespaceLister) Get(name string) (*v1alpha1.CacheBlobNfsTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cacheblobnfstarget"), name)
	}
	return obj.(*v1alpha1.CacheBlobNfsTarget), nil
}
