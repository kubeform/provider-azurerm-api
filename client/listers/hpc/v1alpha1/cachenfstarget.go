/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/hpc/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CacheNfsTargetLister helps list CacheNfsTargets.
// All objects returned here must be treated as read-only.
type CacheNfsTargetLister interface {
	// List lists all CacheNfsTargets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CacheNfsTarget, err error)
	// CacheNfsTargets returns an object that can list and get CacheNfsTargets.
	CacheNfsTargets(namespace string) CacheNfsTargetNamespaceLister
	CacheNfsTargetListerExpansion
}

// cacheNfsTargetLister implements the CacheNfsTargetLister interface.
type cacheNfsTargetLister struct {
	indexer cache.Indexer
}

// NewCacheNfsTargetLister returns a new CacheNfsTargetLister.
func NewCacheNfsTargetLister(indexer cache.Indexer) CacheNfsTargetLister {
	return &cacheNfsTargetLister{indexer: indexer}
}

// List lists all CacheNfsTargets in the indexer.
func (s *cacheNfsTargetLister) List(selector labels.Selector) (ret []*v1alpha1.CacheNfsTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CacheNfsTarget))
	})
	return ret, err
}

// CacheNfsTargets returns an object that can list and get CacheNfsTargets.
func (s *cacheNfsTargetLister) CacheNfsTargets(namespace string) CacheNfsTargetNamespaceLister {
	return cacheNfsTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CacheNfsTargetNamespaceLister helps list and get CacheNfsTargets.
// All objects returned here must be treated as read-only.
type CacheNfsTargetNamespaceLister interface {
	// List lists all CacheNfsTargets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CacheNfsTarget, err error)
	// Get retrieves the CacheNfsTarget from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CacheNfsTarget, error)
	CacheNfsTargetNamespaceListerExpansion
}

// cacheNfsTargetNamespaceLister implements the CacheNfsTargetNamespaceLister
// interface.
type cacheNfsTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CacheNfsTargets in the indexer for a given namespace.
func (s cacheNfsTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CacheNfsTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CacheNfsTarget))
	})
	return ret, err
}

// Get retrieves the CacheNfsTarget from the indexer for a given namespace and name.
func (s cacheNfsTargetNamespaceLister) Get(name string) (*v1alpha1.CacheNfsTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cachenfstarget"), name)
	}
	return obj.(*v1alpha1.CacheNfsTarget), nil
}
