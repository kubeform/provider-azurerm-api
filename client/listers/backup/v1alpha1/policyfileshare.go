/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/backup/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PolicyFileShareLister helps list PolicyFileShares.
// All objects returned here must be treated as read-only.
type PolicyFileShareLister interface {
	// List lists all PolicyFileShares in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PolicyFileShare, err error)
	// PolicyFileShares returns an object that can list and get PolicyFileShares.
	PolicyFileShares(namespace string) PolicyFileShareNamespaceLister
	PolicyFileShareListerExpansion
}

// policyFileShareLister implements the PolicyFileShareLister interface.
type policyFileShareLister struct {
	indexer cache.Indexer
}

// NewPolicyFileShareLister returns a new PolicyFileShareLister.
func NewPolicyFileShareLister(indexer cache.Indexer) PolicyFileShareLister {
	return &policyFileShareLister{indexer: indexer}
}

// List lists all PolicyFileShares in the indexer.
func (s *policyFileShareLister) List(selector labels.Selector) (ret []*v1alpha1.PolicyFileShare, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PolicyFileShare))
	})
	return ret, err
}

// PolicyFileShares returns an object that can list and get PolicyFileShares.
func (s *policyFileShareLister) PolicyFileShares(namespace string) PolicyFileShareNamespaceLister {
	return policyFileShareNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PolicyFileShareNamespaceLister helps list and get PolicyFileShares.
// All objects returned here must be treated as read-only.
type PolicyFileShareNamespaceLister interface {
	// List lists all PolicyFileShares in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PolicyFileShare, err error)
	// Get retrieves the PolicyFileShare from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PolicyFileShare, error)
	PolicyFileShareNamespaceListerExpansion
}

// policyFileShareNamespaceLister implements the PolicyFileShareNamespaceLister
// interface.
type policyFileShareNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PolicyFileShares in the indexer for a given namespace.
func (s policyFileShareNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PolicyFileShare, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PolicyFileShare))
	})
	return ret, err
}

// Get retrieves the PolicyFileShare from the indexer for a given namespace and name.
func (s policyFileShareNamespaceLister) Get(name string) (*v1alpha1.PolicyFileShare, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("policyfileshare"), name)
	}
	return obj.(*v1alpha1.PolicyFileShare), nil
}
