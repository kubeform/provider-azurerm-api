/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/backup/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProtectedVmLister helps list ProtectedVms.
// All objects returned here must be treated as read-only.
type ProtectedVmLister interface {
	// List lists all ProtectedVms in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProtectedVm, err error)
	// ProtectedVms returns an object that can list and get ProtectedVms.
	ProtectedVms(namespace string) ProtectedVmNamespaceLister
	ProtectedVmListerExpansion
}

// protectedVmLister implements the ProtectedVmLister interface.
type protectedVmLister struct {
	indexer cache.Indexer
}

// NewProtectedVmLister returns a new ProtectedVmLister.
func NewProtectedVmLister(indexer cache.Indexer) ProtectedVmLister {
	return &protectedVmLister{indexer: indexer}
}

// List lists all ProtectedVms in the indexer.
func (s *protectedVmLister) List(selector labels.Selector) (ret []*v1alpha1.ProtectedVm, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProtectedVm))
	})
	return ret, err
}

// ProtectedVms returns an object that can list and get ProtectedVms.
func (s *protectedVmLister) ProtectedVms(namespace string) ProtectedVmNamespaceLister {
	return protectedVmNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProtectedVmNamespaceLister helps list and get ProtectedVms.
// All objects returned here must be treated as read-only.
type ProtectedVmNamespaceLister interface {
	// List lists all ProtectedVms in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProtectedVm, err error)
	// Get retrieves the ProtectedVm from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ProtectedVm, error)
	ProtectedVmNamespaceListerExpansion
}

// protectedVmNamespaceLister implements the ProtectedVmNamespaceLister
// interface.
type protectedVmNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProtectedVms in the indexer for a given namespace.
func (s protectedVmNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ProtectedVm, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProtectedVm))
	})
	return ret, err
}

// Get retrieves the ProtectedVm from the indexer for a given namespace and name.
func (s protectedVmNamespaceLister) Get(name string) (*v1alpha1.ProtectedVm, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("protectedvm"), name)
	}
	return obj.(*v1alpha1.ProtectedVm), nil
}
