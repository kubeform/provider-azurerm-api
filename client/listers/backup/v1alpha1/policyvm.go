/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/backup/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PolicyVmLister helps list PolicyVms.
// All objects returned here must be treated as read-only.
type PolicyVmLister interface {
	// List lists all PolicyVms in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PolicyVm, err error)
	// PolicyVms returns an object that can list and get PolicyVms.
	PolicyVms(namespace string) PolicyVmNamespaceLister
	PolicyVmListerExpansion
}

// policyVmLister implements the PolicyVmLister interface.
type policyVmLister struct {
	indexer cache.Indexer
}

// NewPolicyVmLister returns a new PolicyVmLister.
func NewPolicyVmLister(indexer cache.Indexer) PolicyVmLister {
	return &policyVmLister{indexer: indexer}
}

// List lists all PolicyVms in the indexer.
func (s *policyVmLister) List(selector labels.Selector) (ret []*v1alpha1.PolicyVm, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PolicyVm))
	})
	return ret, err
}

// PolicyVms returns an object that can list and get PolicyVms.
func (s *policyVmLister) PolicyVms(namespace string) PolicyVmNamespaceLister {
	return policyVmNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PolicyVmNamespaceLister helps list and get PolicyVms.
// All objects returned here must be treated as read-only.
type PolicyVmNamespaceLister interface {
	// List lists all PolicyVms in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PolicyVm, err error)
	// Get retrieves the PolicyVm from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PolicyVm, error)
	PolicyVmNamespaceListerExpansion
}

// policyVmNamespaceLister implements the PolicyVmNamespaceLister
// interface.
type policyVmNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PolicyVms in the indexer for a given namespace.
func (s policyVmNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PolicyVm, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PolicyVm))
	})
	return ret, err
}

// Get retrieves the PolicyVm from the indexer for a given namespace and name.
func (s policyVmNamespaceLister) Get(name string) (*v1alpha1.PolicyVm, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("policyvm"), name)
	}
	return obj.(*v1alpha1.PolicyVm), nil
}
