/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/cognitive/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AccountCustomerManagedKeyLister helps list AccountCustomerManagedKeys.
// All objects returned here must be treated as read-only.
type AccountCustomerManagedKeyLister interface {
	// List lists all AccountCustomerManagedKeys in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AccountCustomerManagedKey, err error)
	// AccountCustomerManagedKeys returns an object that can list and get AccountCustomerManagedKeys.
	AccountCustomerManagedKeys(namespace string) AccountCustomerManagedKeyNamespaceLister
	AccountCustomerManagedKeyListerExpansion
}

// accountCustomerManagedKeyLister implements the AccountCustomerManagedKeyLister interface.
type accountCustomerManagedKeyLister struct {
	indexer cache.Indexer
}

// NewAccountCustomerManagedKeyLister returns a new AccountCustomerManagedKeyLister.
func NewAccountCustomerManagedKeyLister(indexer cache.Indexer) AccountCustomerManagedKeyLister {
	return &accountCustomerManagedKeyLister{indexer: indexer}
}

// List lists all AccountCustomerManagedKeys in the indexer.
func (s *accountCustomerManagedKeyLister) List(selector labels.Selector) (ret []*v1alpha1.AccountCustomerManagedKey, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AccountCustomerManagedKey))
	})
	return ret, err
}

// AccountCustomerManagedKeys returns an object that can list and get AccountCustomerManagedKeys.
func (s *accountCustomerManagedKeyLister) AccountCustomerManagedKeys(namespace string) AccountCustomerManagedKeyNamespaceLister {
	return accountCustomerManagedKeyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AccountCustomerManagedKeyNamespaceLister helps list and get AccountCustomerManagedKeys.
// All objects returned here must be treated as read-only.
type AccountCustomerManagedKeyNamespaceLister interface {
	// List lists all AccountCustomerManagedKeys in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AccountCustomerManagedKey, err error)
	// Get retrieves the AccountCustomerManagedKey from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AccountCustomerManagedKey, error)
	AccountCustomerManagedKeyNamespaceListerExpansion
}

// accountCustomerManagedKeyNamespaceLister implements the AccountCustomerManagedKeyNamespaceLister
// interface.
type accountCustomerManagedKeyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AccountCustomerManagedKeys in the indexer for a given namespace.
func (s accountCustomerManagedKeyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AccountCustomerManagedKey, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AccountCustomerManagedKey))
	})
	return ret, err
}

// Get retrieves the AccountCustomerManagedKey from the indexer for a given namespace and name.
func (s accountCustomerManagedKeyNamespaceLister) Get(name string) (*v1alpha1.AccountCustomerManagedKey, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("accountcustomermanagedkey"), name)
	}
	return obj.(*v1alpha1.AccountCustomerManagedKey), nil
}
