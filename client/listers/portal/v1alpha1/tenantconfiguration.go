/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/portal/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TenantConfigurationLister helps list TenantConfigurations.
// All objects returned here must be treated as read-only.
type TenantConfigurationLister interface {
	// List lists all TenantConfigurations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TenantConfiguration, err error)
	// TenantConfigurations returns an object that can list and get TenantConfigurations.
	TenantConfigurations(namespace string) TenantConfigurationNamespaceLister
	TenantConfigurationListerExpansion
}

// tenantConfigurationLister implements the TenantConfigurationLister interface.
type tenantConfigurationLister struct {
	indexer cache.Indexer
}

// NewTenantConfigurationLister returns a new TenantConfigurationLister.
func NewTenantConfigurationLister(indexer cache.Indexer) TenantConfigurationLister {
	return &tenantConfigurationLister{indexer: indexer}
}

// List lists all TenantConfigurations in the indexer.
func (s *tenantConfigurationLister) List(selector labels.Selector) (ret []*v1alpha1.TenantConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TenantConfiguration))
	})
	return ret, err
}

// TenantConfigurations returns an object that can list and get TenantConfigurations.
func (s *tenantConfigurationLister) TenantConfigurations(namespace string) TenantConfigurationNamespaceLister {
	return tenantConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TenantConfigurationNamespaceLister helps list and get TenantConfigurations.
// All objects returned here must be treated as read-only.
type TenantConfigurationNamespaceLister interface {
	// List lists all TenantConfigurations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TenantConfiguration, err error)
	// Get retrieves the TenantConfiguration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TenantConfiguration, error)
	TenantConfigurationNamespaceListerExpansion
}

// tenantConfigurationNamespaceLister implements the TenantConfigurationNamespaceLister
// interface.
type tenantConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TenantConfigurations in the indexer for a given namespace.
func (s tenantConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TenantConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TenantConfiguration))
	})
	return ret, err
}

// Get retrieves the TenantConfiguration from the indexer for a given namespace and name.
func (s tenantConfigurationNamespaceLister) Get(name string) (*v1alpha1.TenantConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tenantconfiguration"), name)
	}
	return obj.(*v1alpha1.TenantConfiguration), nil
}
