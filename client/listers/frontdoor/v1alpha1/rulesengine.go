/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/frontdoor/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RulesEngineLister helps list RulesEngines.
// All objects returned here must be treated as read-only.
type RulesEngineLister interface {
	// List lists all RulesEngines in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RulesEngine, err error)
	// RulesEngines returns an object that can list and get RulesEngines.
	RulesEngines(namespace string) RulesEngineNamespaceLister
	RulesEngineListerExpansion
}

// rulesEngineLister implements the RulesEngineLister interface.
type rulesEngineLister struct {
	indexer cache.Indexer
}

// NewRulesEngineLister returns a new RulesEngineLister.
func NewRulesEngineLister(indexer cache.Indexer) RulesEngineLister {
	return &rulesEngineLister{indexer: indexer}
}

// List lists all RulesEngines in the indexer.
func (s *rulesEngineLister) List(selector labels.Selector) (ret []*v1alpha1.RulesEngine, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RulesEngine))
	})
	return ret, err
}

// RulesEngines returns an object that can list and get RulesEngines.
func (s *rulesEngineLister) RulesEngines(namespace string) RulesEngineNamespaceLister {
	return rulesEngineNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RulesEngineNamespaceLister helps list and get RulesEngines.
// All objects returned here must be treated as read-only.
type RulesEngineNamespaceLister interface {
	// List lists all RulesEngines in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RulesEngine, err error)
	// Get retrieves the RulesEngine from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RulesEngine, error)
	RulesEngineNamespaceListerExpansion
}

// rulesEngineNamespaceLister implements the RulesEngineNamespaceLister
// interface.
type rulesEngineNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RulesEngines in the indexer for a given namespace.
func (s rulesEngineNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RulesEngine, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RulesEngine))
	})
	return ret, err
}

// Get retrieves the RulesEngine from the indexer for a given namespace and name.
func (s rulesEngineNamespaceLister) Get(name string) (*v1alpha1.RulesEngine, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("rulesengine"), name)
	}
	return obj.(*v1alpha1.RulesEngine), nil
}
