/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/digital/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TwinsEndpointEventhubLister helps list TwinsEndpointEventhubs.
// All objects returned here must be treated as read-only.
type TwinsEndpointEventhubLister interface {
	// List lists all TwinsEndpointEventhubs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TwinsEndpointEventhub, err error)
	// TwinsEndpointEventhubs returns an object that can list and get TwinsEndpointEventhubs.
	TwinsEndpointEventhubs(namespace string) TwinsEndpointEventhubNamespaceLister
	TwinsEndpointEventhubListerExpansion
}

// twinsEndpointEventhubLister implements the TwinsEndpointEventhubLister interface.
type twinsEndpointEventhubLister struct {
	indexer cache.Indexer
}

// NewTwinsEndpointEventhubLister returns a new TwinsEndpointEventhubLister.
func NewTwinsEndpointEventhubLister(indexer cache.Indexer) TwinsEndpointEventhubLister {
	return &twinsEndpointEventhubLister{indexer: indexer}
}

// List lists all TwinsEndpointEventhubs in the indexer.
func (s *twinsEndpointEventhubLister) List(selector labels.Selector) (ret []*v1alpha1.TwinsEndpointEventhub, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TwinsEndpointEventhub))
	})
	return ret, err
}

// TwinsEndpointEventhubs returns an object that can list and get TwinsEndpointEventhubs.
func (s *twinsEndpointEventhubLister) TwinsEndpointEventhubs(namespace string) TwinsEndpointEventhubNamespaceLister {
	return twinsEndpointEventhubNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TwinsEndpointEventhubNamespaceLister helps list and get TwinsEndpointEventhubs.
// All objects returned here must be treated as read-only.
type TwinsEndpointEventhubNamespaceLister interface {
	// List lists all TwinsEndpointEventhubs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TwinsEndpointEventhub, err error)
	// Get retrieves the TwinsEndpointEventhub from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TwinsEndpointEventhub, error)
	TwinsEndpointEventhubNamespaceListerExpansion
}

// twinsEndpointEventhubNamespaceLister implements the TwinsEndpointEventhubNamespaceLister
// interface.
type twinsEndpointEventhubNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TwinsEndpointEventhubs in the indexer for a given namespace.
func (s twinsEndpointEventhubNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TwinsEndpointEventhub, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TwinsEndpointEventhub))
	})
	return ret, err
}

// Get retrieves the TwinsEndpointEventhub from the indexer for a given namespace and name.
func (s twinsEndpointEventhubNamespaceLister) Get(name string) (*v1alpha1.TwinsEndpointEventhub, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("twinsendpointeventhub"), name)
	}
	return obj.(*v1alpha1.TwinsEndpointEventhub), nil
}
