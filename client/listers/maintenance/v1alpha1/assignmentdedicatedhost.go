/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/maintenance/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AssignmentDedicatedHostLister helps list AssignmentDedicatedHosts.
// All objects returned here must be treated as read-only.
type AssignmentDedicatedHostLister interface {
	// List lists all AssignmentDedicatedHosts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AssignmentDedicatedHost, err error)
	// AssignmentDedicatedHosts returns an object that can list and get AssignmentDedicatedHosts.
	AssignmentDedicatedHosts(namespace string) AssignmentDedicatedHostNamespaceLister
	AssignmentDedicatedHostListerExpansion
}

// assignmentDedicatedHostLister implements the AssignmentDedicatedHostLister interface.
type assignmentDedicatedHostLister struct {
	indexer cache.Indexer
}

// NewAssignmentDedicatedHostLister returns a new AssignmentDedicatedHostLister.
func NewAssignmentDedicatedHostLister(indexer cache.Indexer) AssignmentDedicatedHostLister {
	return &assignmentDedicatedHostLister{indexer: indexer}
}

// List lists all AssignmentDedicatedHosts in the indexer.
func (s *assignmentDedicatedHostLister) List(selector labels.Selector) (ret []*v1alpha1.AssignmentDedicatedHost, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AssignmentDedicatedHost))
	})
	return ret, err
}

// AssignmentDedicatedHosts returns an object that can list and get AssignmentDedicatedHosts.
func (s *assignmentDedicatedHostLister) AssignmentDedicatedHosts(namespace string) AssignmentDedicatedHostNamespaceLister {
	return assignmentDedicatedHostNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AssignmentDedicatedHostNamespaceLister helps list and get AssignmentDedicatedHosts.
// All objects returned here must be treated as read-only.
type AssignmentDedicatedHostNamespaceLister interface {
	// List lists all AssignmentDedicatedHosts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AssignmentDedicatedHost, err error)
	// Get retrieves the AssignmentDedicatedHost from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AssignmentDedicatedHost, error)
	AssignmentDedicatedHostNamespaceListerExpansion
}

// assignmentDedicatedHostNamespaceLister implements the AssignmentDedicatedHostNamespaceLister
// interface.
type assignmentDedicatedHostNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AssignmentDedicatedHosts in the indexer for a given namespace.
func (s assignmentDedicatedHostNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AssignmentDedicatedHost, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AssignmentDedicatedHost))
	})
	return ret, err
}

// Get retrieves the AssignmentDedicatedHost from the indexer for a given namespace and name.
func (s assignmentDedicatedHostNamespaceLister) Get(name string) (*v1alpha1.AssignmentDedicatedHost, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("assignmentdedicatedhost"), name)
	}
	return obj.(*v1alpha1.AssignmentDedicatedHost), nil
}
