/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/devtest/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LinuxVirtualMachineLister helps list LinuxVirtualMachines.
// All objects returned here must be treated as read-only.
type LinuxVirtualMachineLister interface {
	// List lists all LinuxVirtualMachines in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LinuxVirtualMachine, err error)
	// LinuxVirtualMachines returns an object that can list and get LinuxVirtualMachines.
	LinuxVirtualMachines(namespace string) LinuxVirtualMachineNamespaceLister
	LinuxVirtualMachineListerExpansion
}

// linuxVirtualMachineLister implements the LinuxVirtualMachineLister interface.
type linuxVirtualMachineLister struct {
	indexer cache.Indexer
}

// NewLinuxVirtualMachineLister returns a new LinuxVirtualMachineLister.
func NewLinuxVirtualMachineLister(indexer cache.Indexer) LinuxVirtualMachineLister {
	return &linuxVirtualMachineLister{indexer: indexer}
}

// List lists all LinuxVirtualMachines in the indexer.
func (s *linuxVirtualMachineLister) List(selector labels.Selector) (ret []*v1alpha1.LinuxVirtualMachine, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LinuxVirtualMachine))
	})
	return ret, err
}

// LinuxVirtualMachines returns an object that can list and get LinuxVirtualMachines.
func (s *linuxVirtualMachineLister) LinuxVirtualMachines(namespace string) LinuxVirtualMachineNamespaceLister {
	return linuxVirtualMachineNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LinuxVirtualMachineNamespaceLister helps list and get LinuxVirtualMachines.
// All objects returned here must be treated as read-only.
type LinuxVirtualMachineNamespaceLister interface {
	// List lists all LinuxVirtualMachines in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LinuxVirtualMachine, err error)
	// Get retrieves the LinuxVirtualMachine from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LinuxVirtualMachine, error)
	LinuxVirtualMachineNamespaceListerExpansion
}

// linuxVirtualMachineNamespaceLister implements the LinuxVirtualMachineNamespaceLister
// interface.
type linuxVirtualMachineNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LinuxVirtualMachines in the indexer for a given namespace.
func (s linuxVirtualMachineNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LinuxVirtualMachine, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LinuxVirtualMachine))
	})
	return ret, err
}

// Get retrieves the LinuxVirtualMachine from the indexer for a given namespace and name.
func (s linuxVirtualMachineNamespaceLister) Get(name string) (*v1alpha1.LinuxVirtualMachine, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("linuxvirtualmachine"), name)
	}
	return obj.(*v1alpha1.LinuxVirtualMachine), nil
}
