/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/devtest/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WindowsVirtualMachineLister helps list WindowsVirtualMachines.
// All objects returned here must be treated as read-only.
type WindowsVirtualMachineLister interface {
	// List lists all WindowsVirtualMachines in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WindowsVirtualMachine, err error)
	// WindowsVirtualMachines returns an object that can list and get WindowsVirtualMachines.
	WindowsVirtualMachines(namespace string) WindowsVirtualMachineNamespaceLister
	WindowsVirtualMachineListerExpansion
}

// windowsVirtualMachineLister implements the WindowsVirtualMachineLister interface.
type windowsVirtualMachineLister struct {
	indexer cache.Indexer
}

// NewWindowsVirtualMachineLister returns a new WindowsVirtualMachineLister.
func NewWindowsVirtualMachineLister(indexer cache.Indexer) WindowsVirtualMachineLister {
	return &windowsVirtualMachineLister{indexer: indexer}
}

// List lists all WindowsVirtualMachines in the indexer.
func (s *windowsVirtualMachineLister) List(selector labels.Selector) (ret []*v1alpha1.WindowsVirtualMachine, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WindowsVirtualMachine))
	})
	return ret, err
}

// WindowsVirtualMachines returns an object that can list and get WindowsVirtualMachines.
func (s *windowsVirtualMachineLister) WindowsVirtualMachines(namespace string) WindowsVirtualMachineNamespaceLister {
	return windowsVirtualMachineNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WindowsVirtualMachineNamespaceLister helps list and get WindowsVirtualMachines.
// All objects returned here must be treated as read-only.
type WindowsVirtualMachineNamespaceLister interface {
	// List lists all WindowsVirtualMachines in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WindowsVirtualMachine, err error)
	// Get retrieves the WindowsVirtualMachine from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.WindowsVirtualMachine, error)
	WindowsVirtualMachineNamespaceListerExpansion
}

// windowsVirtualMachineNamespaceLister implements the WindowsVirtualMachineNamespaceLister
// interface.
type windowsVirtualMachineNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WindowsVirtualMachines in the indexer for a given namespace.
func (s windowsVirtualMachineNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.WindowsVirtualMachine, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WindowsVirtualMachine))
	})
	return ret, err
}

// Get retrieves the WindowsVirtualMachine from the indexer for a given namespace and name.
func (s windowsVirtualMachineNamespaceLister) Get(name string) (*v1alpha1.WindowsVirtualMachine, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("windowsvirtualmachine"), name)
	}
	return obj.(*v1alpha1.WindowsVirtualMachine), nil
}
