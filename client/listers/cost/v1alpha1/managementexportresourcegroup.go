/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/cost/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ManagementExportResourceGroupLister helps list ManagementExportResourceGroups.
// All objects returned here must be treated as read-only.
type ManagementExportResourceGroupLister interface {
	// List lists all ManagementExportResourceGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagementExportResourceGroup, err error)
	// ManagementExportResourceGroups returns an object that can list and get ManagementExportResourceGroups.
	ManagementExportResourceGroups(namespace string) ManagementExportResourceGroupNamespaceLister
	ManagementExportResourceGroupListerExpansion
}

// managementExportResourceGroupLister implements the ManagementExportResourceGroupLister interface.
type managementExportResourceGroupLister struct {
	indexer cache.Indexer
}

// NewManagementExportResourceGroupLister returns a new ManagementExportResourceGroupLister.
func NewManagementExportResourceGroupLister(indexer cache.Indexer) ManagementExportResourceGroupLister {
	return &managementExportResourceGroupLister{indexer: indexer}
}

// List lists all ManagementExportResourceGroups in the indexer.
func (s *managementExportResourceGroupLister) List(selector labels.Selector) (ret []*v1alpha1.ManagementExportResourceGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagementExportResourceGroup))
	})
	return ret, err
}

// ManagementExportResourceGroups returns an object that can list and get ManagementExportResourceGroups.
func (s *managementExportResourceGroupLister) ManagementExportResourceGroups(namespace string) ManagementExportResourceGroupNamespaceLister {
	return managementExportResourceGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManagementExportResourceGroupNamespaceLister helps list and get ManagementExportResourceGroups.
// All objects returned here must be treated as read-only.
type ManagementExportResourceGroupNamespaceLister interface {
	// List lists all ManagementExportResourceGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagementExportResourceGroup, err error)
	// Get retrieves the ManagementExportResourceGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ManagementExportResourceGroup, error)
	ManagementExportResourceGroupNamespaceListerExpansion
}

// managementExportResourceGroupNamespaceLister implements the ManagementExportResourceGroupNamespaceLister
// interface.
type managementExportResourceGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManagementExportResourceGroups in the indexer for a given namespace.
func (s managementExportResourceGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ManagementExportResourceGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagementExportResourceGroup))
	})
	return ret, err
}

// Get retrieves the ManagementExportResourceGroup from the indexer for a given namespace and name.
func (s managementExportResourceGroupNamespaceLister) Get(name string) (*v1alpha1.ManagementExportResourceGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("managementexportresourcegroup"), name)
	}
	return obj.(*v1alpha1.ManagementExportResourceGroup), nil
}
