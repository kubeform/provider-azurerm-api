/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/media/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LiveEventOutputLister helps list LiveEventOutputs.
// All objects returned here must be treated as read-only.
type LiveEventOutputLister interface {
	// List lists all LiveEventOutputs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LiveEventOutput, err error)
	// LiveEventOutputs returns an object that can list and get LiveEventOutputs.
	LiveEventOutputs(namespace string) LiveEventOutputNamespaceLister
	LiveEventOutputListerExpansion
}

// liveEventOutputLister implements the LiveEventOutputLister interface.
type liveEventOutputLister struct {
	indexer cache.Indexer
}

// NewLiveEventOutputLister returns a new LiveEventOutputLister.
func NewLiveEventOutputLister(indexer cache.Indexer) LiveEventOutputLister {
	return &liveEventOutputLister{indexer: indexer}
}

// List lists all LiveEventOutputs in the indexer.
func (s *liveEventOutputLister) List(selector labels.Selector) (ret []*v1alpha1.LiveEventOutput, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LiveEventOutput))
	})
	return ret, err
}

// LiveEventOutputs returns an object that can list and get LiveEventOutputs.
func (s *liveEventOutputLister) LiveEventOutputs(namespace string) LiveEventOutputNamespaceLister {
	return liveEventOutputNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LiveEventOutputNamespaceLister helps list and get LiveEventOutputs.
// All objects returned here must be treated as read-only.
type LiveEventOutputNamespaceLister interface {
	// List lists all LiveEventOutputs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LiveEventOutput, err error)
	// Get retrieves the LiveEventOutput from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LiveEventOutput, error)
	LiveEventOutputNamespaceListerExpansion
}

// liveEventOutputNamespaceLister implements the LiveEventOutputNamespaceLister
// interface.
type liveEventOutputNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LiveEventOutputs in the indexer for a given namespace.
func (s liveEventOutputNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LiveEventOutput, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LiveEventOutput))
	})
	return ret, err
}

// Get retrieves the LiveEventOutput from the indexer for a given namespace and name.
func (s liveEventOutputNamespaceLister) Get(name string) (*v1alpha1.LiveEventOutput, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("liveeventoutput"), name)
	}
	return obj.(*v1alpha1.LiveEventOutput), nil
}
