/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/media/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AssetLister helps list Assets.
// All objects returned here must be treated as read-only.
type AssetLister interface {
	// List lists all Assets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Asset, err error)
	// Assets returns an object that can list and get Assets.
	Assets(namespace string) AssetNamespaceLister
	AssetListerExpansion
}

// assetLister implements the AssetLister interface.
type assetLister struct {
	indexer cache.Indexer
}

// NewAssetLister returns a new AssetLister.
func NewAssetLister(indexer cache.Indexer) AssetLister {
	return &assetLister{indexer: indexer}
}

// List lists all Assets in the indexer.
func (s *assetLister) List(selector labels.Selector) (ret []*v1alpha1.Asset, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Asset))
	})
	return ret, err
}

// Assets returns an object that can list and get Assets.
func (s *assetLister) Assets(namespace string) AssetNamespaceLister {
	return assetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AssetNamespaceLister helps list and get Assets.
// All objects returned here must be treated as read-only.
type AssetNamespaceLister interface {
	// List lists all Assets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Asset, err error)
	// Get retrieves the Asset from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Asset, error)
	AssetNamespaceListerExpansion
}

// assetNamespaceLister implements the AssetNamespaceLister
// interface.
type assetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Assets in the indexer for a given namespace.
func (s assetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Asset, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Asset))
	})
	return ret, err
}

// Get retrieves the Asset from the indexer for a given namespace and name.
func (s assetNamespaceLister) Get(name string) (*v1alpha1.Asset, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("asset"), name)
	}
	return obj.(*v1alpha1.Asset), nil
}
