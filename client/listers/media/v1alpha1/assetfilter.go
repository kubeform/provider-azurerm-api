/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/media/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AssetFilterLister helps list AssetFilters.
// All objects returned here must be treated as read-only.
type AssetFilterLister interface {
	// List lists all AssetFilters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AssetFilter, err error)
	// AssetFilters returns an object that can list and get AssetFilters.
	AssetFilters(namespace string) AssetFilterNamespaceLister
	AssetFilterListerExpansion
}

// assetFilterLister implements the AssetFilterLister interface.
type assetFilterLister struct {
	indexer cache.Indexer
}

// NewAssetFilterLister returns a new AssetFilterLister.
func NewAssetFilterLister(indexer cache.Indexer) AssetFilterLister {
	return &assetFilterLister{indexer: indexer}
}

// List lists all AssetFilters in the indexer.
func (s *assetFilterLister) List(selector labels.Selector) (ret []*v1alpha1.AssetFilter, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AssetFilter))
	})
	return ret, err
}

// AssetFilters returns an object that can list and get AssetFilters.
func (s *assetFilterLister) AssetFilters(namespace string) AssetFilterNamespaceLister {
	return assetFilterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AssetFilterNamespaceLister helps list and get AssetFilters.
// All objects returned here must be treated as read-only.
type AssetFilterNamespaceLister interface {
	// List lists all AssetFilters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AssetFilter, err error)
	// Get retrieves the AssetFilter from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AssetFilter, error)
	AssetFilterNamespaceListerExpansion
}

// assetFilterNamespaceLister implements the AssetFilterNamespaceLister
// interface.
type assetFilterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AssetFilters in the indexer for a given namespace.
func (s assetFilterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AssetFilter, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AssetFilter))
	})
	return ret, err
}

// Get retrieves the AssetFilter from the indexer for a given namespace and name.
func (s assetFilterNamespaceLister) Get(name string) (*v1alpha1.AssetFilter, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("assetfilter"), name)
	}
	return obj.(*v1alpha1.AssetFilter), nil
}
