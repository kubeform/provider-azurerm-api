/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/dns/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MxRecordLister helps list MxRecords.
// All objects returned here must be treated as read-only.
type MxRecordLister interface {
	// List lists all MxRecords in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MxRecord, err error)
	// MxRecords returns an object that can list and get MxRecords.
	MxRecords(namespace string) MxRecordNamespaceLister
	MxRecordListerExpansion
}

// mxRecordLister implements the MxRecordLister interface.
type mxRecordLister struct {
	indexer cache.Indexer
}

// NewMxRecordLister returns a new MxRecordLister.
func NewMxRecordLister(indexer cache.Indexer) MxRecordLister {
	return &mxRecordLister{indexer: indexer}
}

// List lists all MxRecords in the indexer.
func (s *mxRecordLister) List(selector labels.Selector) (ret []*v1alpha1.MxRecord, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MxRecord))
	})
	return ret, err
}

// MxRecords returns an object that can list and get MxRecords.
func (s *mxRecordLister) MxRecords(namespace string) MxRecordNamespaceLister {
	return mxRecordNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MxRecordNamespaceLister helps list and get MxRecords.
// All objects returned here must be treated as read-only.
type MxRecordNamespaceLister interface {
	// List lists all MxRecords in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MxRecord, err error)
	// Get retrieves the MxRecord from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MxRecord, error)
	MxRecordNamespaceListerExpansion
}

// mxRecordNamespaceLister implements the MxRecordNamespaceLister
// interface.
type mxRecordNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MxRecords in the indexer for a given namespace.
func (s mxRecordNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MxRecord, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MxRecord))
	})
	return ret, err
}

// Get retrieves the MxRecord from the indexer for a given namespace and name.
func (s mxRecordNamespaceLister) Get(name string) (*v1alpha1.MxRecord, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("mxrecord"), name)
	}
	return obj.(*v1alpha1.MxRecord), nil
}
