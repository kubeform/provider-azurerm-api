/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/dns/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CnameRecordLister helps list CnameRecords.
// All objects returned here must be treated as read-only.
type CnameRecordLister interface {
	// List lists all CnameRecords in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CnameRecord, err error)
	// CnameRecords returns an object that can list and get CnameRecords.
	CnameRecords(namespace string) CnameRecordNamespaceLister
	CnameRecordListerExpansion
}

// cnameRecordLister implements the CnameRecordLister interface.
type cnameRecordLister struct {
	indexer cache.Indexer
}

// NewCnameRecordLister returns a new CnameRecordLister.
func NewCnameRecordLister(indexer cache.Indexer) CnameRecordLister {
	return &cnameRecordLister{indexer: indexer}
}

// List lists all CnameRecords in the indexer.
func (s *cnameRecordLister) List(selector labels.Selector) (ret []*v1alpha1.CnameRecord, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CnameRecord))
	})
	return ret, err
}

// CnameRecords returns an object that can list and get CnameRecords.
func (s *cnameRecordLister) CnameRecords(namespace string) CnameRecordNamespaceLister {
	return cnameRecordNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CnameRecordNamespaceLister helps list and get CnameRecords.
// All objects returned here must be treated as read-only.
type CnameRecordNamespaceLister interface {
	// List lists all CnameRecords in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CnameRecord, err error)
	// Get retrieves the CnameRecord from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CnameRecord, error)
	CnameRecordNamespaceListerExpansion
}

// cnameRecordNamespaceLister implements the CnameRecordNamespaceLister
// interface.
type cnameRecordNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CnameRecords in the indexer for a given namespace.
func (s cnameRecordNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CnameRecord, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CnameRecord))
	})
	return ret, err
}

// Get retrieves the CnameRecord from the indexer for a given namespace and name.
func (s cnameRecordNamespaceLister) Get(name string) (*v1alpha1.CnameRecord, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cnamerecord"), name)
	}
	return obj.(*v1alpha1.CnameRecord), nil
}
