/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/dns/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AaaaRecordLister helps list AaaaRecords.
// All objects returned here must be treated as read-only.
type AaaaRecordLister interface {
	// List lists all AaaaRecords in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AaaaRecord, err error)
	// AaaaRecords returns an object that can list and get AaaaRecords.
	AaaaRecords(namespace string) AaaaRecordNamespaceLister
	AaaaRecordListerExpansion
}

// aaaaRecordLister implements the AaaaRecordLister interface.
type aaaaRecordLister struct {
	indexer cache.Indexer
}

// NewAaaaRecordLister returns a new AaaaRecordLister.
func NewAaaaRecordLister(indexer cache.Indexer) AaaaRecordLister {
	return &aaaaRecordLister{indexer: indexer}
}

// List lists all AaaaRecords in the indexer.
func (s *aaaaRecordLister) List(selector labels.Selector) (ret []*v1alpha1.AaaaRecord, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AaaaRecord))
	})
	return ret, err
}

// AaaaRecords returns an object that can list and get AaaaRecords.
func (s *aaaaRecordLister) AaaaRecords(namespace string) AaaaRecordNamespaceLister {
	return aaaaRecordNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AaaaRecordNamespaceLister helps list and get AaaaRecords.
// All objects returned here must be treated as read-only.
type AaaaRecordNamespaceLister interface {
	// List lists all AaaaRecords in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AaaaRecord, err error)
	// Get retrieves the AaaaRecord from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AaaaRecord, error)
	AaaaRecordNamespaceListerExpansion
}

// aaaaRecordNamespaceLister implements the AaaaRecordNamespaceLister
// interface.
type aaaaRecordNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AaaaRecords in the indexer for a given namespace.
func (s aaaaRecordNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AaaaRecord, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AaaaRecord))
	})
	return ret, err
}

// Get retrieves the AaaaRecord from the indexer for a given namespace and name.
func (s aaaaRecordNamespaceLister) Get(name string) (*v1alpha1.AaaaRecord, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("aaaarecord"), name)
	}
	return obj.(*v1alpha1.AaaaRecord), nil
}
