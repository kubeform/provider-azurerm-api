/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/dns/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CaaRecordLister helps list CaaRecords.
// All objects returned here must be treated as read-only.
type CaaRecordLister interface {
	// List lists all CaaRecords in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CaaRecord, err error)
	// CaaRecords returns an object that can list and get CaaRecords.
	CaaRecords(namespace string) CaaRecordNamespaceLister
	CaaRecordListerExpansion
}

// caaRecordLister implements the CaaRecordLister interface.
type caaRecordLister struct {
	indexer cache.Indexer
}

// NewCaaRecordLister returns a new CaaRecordLister.
func NewCaaRecordLister(indexer cache.Indexer) CaaRecordLister {
	return &caaRecordLister{indexer: indexer}
}

// List lists all CaaRecords in the indexer.
func (s *caaRecordLister) List(selector labels.Selector) (ret []*v1alpha1.CaaRecord, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CaaRecord))
	})
	return ret, err
}

// CaaRecords returns an object that can list and get CaaRecords.
func (s *caaRecordLister) CaaRecords(namespace string) CaaRecordNamespaceLister {
	return caaRecordNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CaaRecordNamespaceLister helps list and get CaaRecords.
// All objects returned here must be treated as read-only.
type CaaRecordNamespaceLister interface {
	// List lists all CaaRecords in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CaaRecord, err error)
	// Get retrieves the CaaRecord from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CaaRecord, error)
	CaaRecordNamespaceListerExpansion
}

// caaRecordNamespaceLister implements the CaaRecordNamespaceLister
// interface.
type caaRecordNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CaaRecords in the indexer for a given namespace.
func (s caaRecordNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CaaRecord, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CaaRecord))
	})
	return ret, err
}

// Get retrieves the CaaRecord from the indexer for a given namespace and name.
func (s caaRecordNamespaceLister) Get(name string) (*v1alpha1.CaaRecord, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("caarecord"), name)
	}
	return obj.(*v1alpha1.CaaRecord), nil
}
