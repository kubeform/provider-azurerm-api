/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/dns/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NsRecordLister helps list NsRecords.
// All objects returned here must be treated as read-only.
type NsRecordLister interface {
	// List lists all NsRecords in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NsRecord, err error)
	// NsRecords returns an object that can list and get NsRecords.
	NsRecords(namespace string) NsRecordNamespaceLister
	NsRecordListerExpansion
}

// nsRecordLister implements the NsRecordLister interface.
type nsRecordLister struct {
	indexer cache.Indexer
}

// NewNsRecordLister returns a new NsRecordLister.
func NewNsRecordLister(indexer cache.Indexer) NsRecordLister {
	return &nsRecordLister{indexer: indexer}
}

// List lists all NsRecords in the indexer.
func (s *nsRecordLister) List(selector labels.Selector) (ret []*v1alpha1.NsRecord, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NsRecord))
	})
	return ret, err
}

// NsRecords returns an object that can list and get NsRecords.
func (s *nsRecordLister) NsRecords(namespace string) NsRecordNamespaceLister {
	return nsRecordNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NsRecordNamespaceLister helps list and get NsRecords.
// All objects returned here must be treated as read-only.
type NsRecordNamespaceLister interface {
	// List lists all NsRecords in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NsRecord, err error)
	// Get retrieves the NsRecord from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NsRecord, error)
	NsRecordNamespaceListerExpansion
}

// nsRecordNamespaceLister implements the NsRecordNamespaceLister
// interface.
type nsRecordNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NsRecords in the indexer for a given namespace.
func (s nsRecordNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NsRecord, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NsRecord))
	})
	return ret, err
}

// Get retrieves the NsRecord from the indexer for a given namespace and name.
func (s nsRecordNamespaceLister) Get(name string) (*v1alpha1.NsRecord, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("nsrecord"), name)
	}
	return obj.(*v1alpha1.NsRecord), nil
}
