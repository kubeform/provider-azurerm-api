/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/dns/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SrvRecordLister helps list SrvRecords.
// All objects returned here must be treated as read-only.
type SrvRecordLister interface {
	// List lists all SrvRecords in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SrvRecord, err error)
	// SrvRecords returns an object that can list and get SrvRecords.
	SrvRecords(namespace string) SrvRecordNamespaceLister
	SrvRecordListerExpansion
}

// srvRecordLister implements the SrvRecordLister interface.
type srvRecordLister struct {
	indexer cache.Indexer
}

// NewSrvRecordLister returns a new SrvRecordLister.
func NewSrvRecordLister(indexer cache.Indexer) SrvRecordLister {
	return &srvRecordLister{indexer: indexer}
}

// List lists all SrvRecords in the indexer.
func (s *srvRecordLister) List(selector labels.Selector) (ret []*v1alpha1.SrvRecord, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SrvRecord))
	})
	return ret, err
}

// SrvRecords returns an object that can list and get SrvRecords.
func (s *srvRecordLister) SrvRecords(namespace string) SrvRecordNamespaceLister {
	return srvRecordNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SrvRecordNamespaceLister helps list and get SrvRecords.
// All objects returned here must be treated as read-only.
type SrvRecordNamespaceLister interface {
	// List lists all SrvRecords in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SrvRecord, err error)
	// Get retrieves the SrvRecord from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SrvRecord, error)
	SrvRecordNamespaceListerExpansion
}

// srvRecordNamespaceLister implements the SrvRecordNamespaceLister
// interface.
type srvRecordNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SrvRecords in the indexer for a given namespace.
func (s srvRecordNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SrvRecord, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SrvRecord))
	})
	return ret, err
}

// Get retrieves the SrvRecord from the indexer for a given namespace and name.
func (s srvRecordNamespaceLister) Get(name string) (*v1alpha1.SrvRecord, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("srvrecord"), name)
	}
	return obj.(*v1alpha1.SrvRecord), nil
}
