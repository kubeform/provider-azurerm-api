/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/dns/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PtrRecordLister helps list PtrRecords.
// All objects returned here must be treated as read-only.
type PtrRecordLister interface {
	// List lists all PtrRecords in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PtrRecord, err error)
	// PtrRecords returns an object that can list and get PtrRecords.
	PtrRecords(namespace string) PtrRecordNamespaceLister
	PtrRecordListerExpansion
}

// ptrRecordLister implements the PtrRecordLister interface.
type ptrRecordLister struct {
	indexer cache.Indexer
}

// NewPtrRecordLister returns a new PtrRecordLister.
func NewPtrRecordLister(indexer cache.Indexer) PtrRecordLister {
	return &ptrRecordLister{indexer: indexer}
}

// List lists all PtrRecords in the indexer.
func (s *ptrRecordLister) List(selector labels.Selector) (ret []*v1alpha1.PtrRecord, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PtrRecord))
	})
	return ret, err
}

// PtrRecords returns an object that can list and get PtrRecords.
func (s *ptrRecordLister) PtrRecords(namespace string) PtrRecordNamespaceLister {
	return ptrRecordNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PtrRecordNamespaceLister helps list and get PtrRecords.
// All objects returned here must be treated as read-only.
type PtrRecordNamespaceLister interface {
	// List lists all PtrRecords in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PtrRecord, err error)
	// Get retrieves the PtrRecord from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PtrRecord, error)
	PtrRecordNamespaceListerExpansion
}

// ptrRecordNamespaceLister implements the PtrRecordNamespaceLister
// interface.
type ptrRecordNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PtrRecords in the indexer for a given namespace.
func (s ptrRecordNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PtrRecord, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PtrRecord))
	})
	return ret, err
}

// Get retrieves the PtrRecord from the indexer for a given namespace and name.
func (s ptrRecordNamespaceLister) Get(name string) (*v1alpha1.PtrRecord, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ptrrecord"), name)
	}
	return obj.(*v1alpha1.PtrRecord), nil
}
