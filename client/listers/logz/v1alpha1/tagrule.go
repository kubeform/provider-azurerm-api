/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/logz/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TagRuleLister helps list TagRules.
// All objects returned here must be treated as read-only.
type TagRuleLister interface {
	// List lists all TagRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TagRule, err error)
	// TagRules returns an object that can list and get TagRules.
	TagRules(namespace string) TagRuleNamespaceLister
	TagRuleListerExpansion
}

// tagRuleLister implements the TagRuleLister interface.
type tagRuleLister struct {
	indexer cache.Indexer
}

// NewTagRuleLister returns a new TagRuleLister.
func NewTagRuleLister(indexer cache.Indexer) TagRuleLister {
	return &tagRuleLister{indexer: indexer}
}

// List lists all TagRules in the indexer.
func (s *tagRuleLister) List(selector labels.Selector) (ret []*v1alpha1.TagRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TagRule))
	})
	return ret, err
}

// TagRules returns an object that can list and get TagRules.
func (s *tagRuleLister) TagRules(namespace string) TagRuleNamespaceLister {
	return tagRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TagRuleNamespaceLister helps list and get TagRules.
// All objects returned here must be treated as read-only.
type TagRuleNamespaceLister interface {
	// List lists all TagRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TagRule, err error)
	// Get retrieves the TagRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TagRule, error)
	TagRuleNamespaceListerExpansion
}

// tagRuleNamespaceLister implements the TagRuleNamespaceLister
// interface.
type tagRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TagRules in the indexer for a given namespace.
func (s tagRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TagRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TagRule))
	})
	return ret, err
}

// Get retrieves the TagRule from the indexer for a given namespace and name.
func (s tagRuleNamespaceLister) Get(name string) (*v1alpha1.TagRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tagrule"), name)
	}
	return obj.(*v1alpha1.TagRule), nil
}
