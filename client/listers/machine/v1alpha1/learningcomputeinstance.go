/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/machine/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LearningComputeInstanceLister helps list LearningComputeInstances.
// All objects returned here must be treated as read-only.
type LearningComputeInstanceLister interface {
	// List lists all LearningComputeInstances in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LearningComputeInstance, err error)
	// LearningComputeInstances returns an object that can list and get LearningComputeInstances.
	LearningComputeInstances(namespace string) LearningComputeInstanceNamespaceLister
	LearningComputeInstanceListerExpansion
}

// learningComputeInstanceLister implements the LearningComputeInstanceLister interface.
type learningComputeInstanceLister struct {
	indexer cache.Indexer
}

// NewLearningComputeInstanceLister returns a new LearningComputeInstanceLister.
func NewLearningComputeInstanceLister(indexer cache.Indexer) LearningComputeInstanceLister {
	return &learningComputeInstanceLister{indexer: indexer}
}

// List lists all LearningComputeInstances in the indexer.
func (s *learningComputeInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.LearningComputeInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LearningComputeInstance))
	})
	return ret, err
}

// LearningComputeInstances returns an object that can list and get LearningComputeInstances.
func (s *learningComputeInstanceLister) LearningComputeInstances(namespace string) LearningComputeInstanceNamespaceLister {
	return learningComputeInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LearningComputeInstanceNamespaceLister helps list and get LearningComputeInstances.
// All objects returned here must be treated as read-only.
type LearningComputeInstanceNamespaceLister interface {
	// List lists all LearningComputeInstances in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LearningComputeInstance, err error)
	// Get retrieves the LearningComputeInstance from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LearningComputeInstance, error)
	LearningComputeInstanceNamespaceListerExpansion
}

// learningComputeInstanceNamespaceLister implements the LearningComputeInstanceNamespaceLister
// interface.
type learningComputeInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LearningComputeInstances in the indexer for a given namespace.
func (s learningComputeInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LearningComputeInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LearningComputeInstance))
	})
	return ret, err
}

// Get retrieves the LearningComputeInstance from the indexer for a given namespace and name.
func (s learningComputeInstanceNamespaceLister) Get(name string) (*v1alpha1.LearningComputeInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("learningcomputeinstance"), name)
	}
	return obj.(*v1alpha1.LearningComputeInstance), nil
}
