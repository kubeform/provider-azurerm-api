/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/machine/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LearningComputeClusterLister helps list LearningComputeClusters.
// All objects returned here must be treated as read-only.
type LearningComputeClusterLister interface {
	// List lists all LearningComputeClusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LearningComputeCluster, err error)
	// LearningComputeClusters returns an object that can list and get LearningComputeClusters.
	LearningComputeClusters(namespace string) LearningComputeClusterNamespaceLister
	LearningComputeClusterListerExpansion
}

// learningComputeClusterLister implements the LearningComputeClusterLister interface.
type learningComputeClusterLister struct {
	indexer cache.Indexer
}

// NewLearningComputeClusterLister returns a new LearningComputeClusterLister.
func NewLearningComputeClusterLister(indexer cache.Indexer) LearningComputeClusterLister {
	return &learningComputeClusterLister{indexer: indexer}
}

// List lists all LearningComputeClusters in the indexer.
func (s *learningComputeClusterLister) List(selector labels.Selector) (ret []*v1alpha1.LearningComputeCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LearningComputeCluster))
	})
	return ret, err
}

// LearningComputeClusters returns an object that can list and get LearningComputeClusters.
func (s *learningComputeClusterLister) LearningComputeClusters(namespace string) LearningComputeClusterNamespaceLister {
	return learningComputeClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LearningComputeClusterNamespaceLister helps list and get LearningComputeClusters.
// All objects returned here must be treated as read-only.
type LearningComputeClusterNamespaceLister interface {
	// List lists all LearningComputeClusters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LearningComputeCluster, err error)
	// Get retrieves the LearningComputeCluster from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LearningComputeCluster, error)
	LearningComputeClusterNamespaceListerExpansion
}

// learningComputeClusterNamespaceLister implements the LearningComputeClusterNamespaceLister
// interface.
type learningComputeClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LearningComputeClusters in the indexer for a given namespace.
func (s learningComputeClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LearningComputeCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LearningComputeCluster))
	})
	return ret, err
}

// Get retrieves the LearningComputeCluster from the indexer for a given namespace and name.
func (s learningComputeClusterNamespaceLister) Get(name string) (*v1alpha1.LearningComputeCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("learningcomputecluster"), name)
	}
	return obj.(*v1alpha1.LearningComputeCluster), nil
}
