/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/machine/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LearningWorkspaceLister helps list LearningWorkspaces.
// All objects returned here must be treated as read-only.
type LearningWorkspaceLister interface {
	// List lists all LearningWorkspaces in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LearningWorkspace, err error)
	// LearningWorkspaces returns an object that can list and get LearningWorkspaces.
	LearningWorkspaces(namespace string) LearningWorkspaceNamespaceLister
	LearningWorkspaceListerExpansion
}

// learningWorkspaceLister implements the LearningWorkspaceLister interface.
type learningWorkspaceLister struct {
	indexer cache.Indexer
}

// NewLearningWorkspaceLister returns a new LearningWorkspaceLister.
func NewLearningWorkspaceLister(indexer cache.Indexer) LearningWorkspaceLister {
	return &learningWorkspaceLister{indexer: indexer}
}

// List lists all LearningWorkspaces in the indexer.
func (s *learningWorkspaceLister) List(selector labels.Selector) (ret []*v1alpha1.LearningWorkspace, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LearningWorkspace))
	})
	return ret, err
}

// LearningWorkspaces returns an object that can list and get LearningWorkspaces.
func (s *learningWorkspaceLister) LearningWorkspaces(namespace string) LearningWorkspaceNamespaceLister {
	return learningWorkspaceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LearningWorkspaceNamespaceLister helps list and get LearningWorkspaces.
// All objects returned here must be treated as read-only.
type LearningWorkspaceNamespaceLister interface {
	// List lists all LearningWorkspaces in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LearningWorkspace, err error)
	// Get retrieves the LearningWorkspace from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LearningWorkspace, error)
	LearningWorkspaceNamespaceListerExpansion
}

// learningWorkspaceNamespaceLister implements the LearningWorkspaceNamespaceLister
// interface.
type learningWorkspaceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LearningWorkspaces in the indexer for a given namespace.
func (s learningWorkspaceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LearningWorkspace, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LearningWorkspace))
	})
	return ret, err
}

// Get retrieves the LearningWorkspace from the indexer for a given namespace and name.
func (s learningWorkspaceNamespaceLister) Get(name string) (*v1alpha1.LearningWorkspace, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("learningworkspace"), name)
	}
	return obj.(*v1alpha1.LearningWorkspace), nil
}
