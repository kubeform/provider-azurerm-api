/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/machine/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LearningSynapseSparkLister helps list LearningSynapseSparks.
// All objects returned here must be treated as read-only.
type LearningSynapseSparkLister interface {
	// List lists all LearningSynapseSparks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LearningSynapseSpark, err error)
	// LearningSynapseSparks returns an object that can list and get LearningSynapseSparks.
	LearningSynapseSparks(namespace string) LearningSynapseSparkNamespaceLister
	LearningSynapseSparkListerExpansion
}

// learningSynapseSparkLister implements the LearningSynapseSparkLister interface.
type learningSynapseSparkLister struct {
	indexer cache.Indexer
}

// NewLearningSynapseSparkLister returns a new LearningSynapseSparkLister.
func NewLearningSynapseSparkLister(indexer cache.Indexer) LearningSynapseSparkLister {
	return &learningSynapseSparkLister{indexer: indexer}
}

// List lists all LearningSynapseSparks in the indexer.
func (s *learningSynapseSparkLister) List(selector labels.Selector) (ret []*v1alpha1.LearningSynapseSpark, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LearningSynapseSpark))
	})
	return ret, err
}

// LearningSynapseSparks returns an object that can list and get LearningSynapseSparks.
func (s *learningSynapseSparkLister) LearningSynapseSparks(namespace string) LearningSynapseSparkNamespaceLister {
	return learningSynapseSparkNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LearningSynapseSparkNamespaceLister helps list and get LearningSynapseSparks.
// All objects returned here must be treated as read-only.
type LearningSynapseSparkNamespaceLister interface {
	// List lists all LearningSynapseSparks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LearningSynapseSpark, err error)
	// Get retrieves the LearningSynapseSpark from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LearningSynapseSpark, error)
	LearningSynapseSparkNamespaceListerExpansion
}

// learningSynapseSparkNamespaceLister implements the LearningSynapseSparkNamespaceLister
// interface.
type learningSynapseSparkNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LearningSynapseSparks in the indexer for a given namespace.
func (s learningSynapseSparkNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LearningSynapseSpark, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LearningSynapseSpark))
	})
	return ret, err
}

// Get retrieves the LearningSynapseSpark from the indexer for a given namespace and name.
func (s learningSynapseSparkNamespaceLister) Get(name string) (*v1alpha1.LearningSynapseSpark, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("learningsynapsespark"), name)
	}
	return obj.(*v1alpha1.LearningSynapseSpark), nil
}
