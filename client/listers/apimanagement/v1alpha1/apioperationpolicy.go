/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/apimanagement/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApiOperationPolicyLister helps list ApiOperationPolicies.
// All objects returned here must be treated as read-only.
type ApiOperationPolicyLister interface {
	// List lists all ApiOperationPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApiOperationPolicy, err error)
	// ApiOperationPolicies returns an object that can list and get ApiOperationPolicies.
	ApiOperationPolicies(namespace string) ApiOperationPolicyNamespaceLister
	ApiOperationPolicyListerExpansion
}

// apiOperationPolicyLister implements the ApiOperationPolicyLister interface.
type apiOperationPolicyLister struct {
	indexer cache.Indexer
}

// NewApiOperationPolicyLister returns a new ApiOperationPolicyLister.
func NewApiOperationPolicyLister(indexer cache.Indexer) ApiOperationPolicyLister {
	return &apiOperationPolicyLister{indexer: indexer}
}

// List lists all ApiOperationPolicies in the indexer.
func (s *apiOperationPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.ApiOperationPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiOperationPolicy))
	})
	return ret, err
}

// ApiOperationPolicies returns an object that can list and get ApiOperationPolicies.
func (s *apiOperationPolicyLister) ApiOperationPolicies(namespace string) ApiOperationPolicyNamespaceLister {
	return apiOperationPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApiOperationPolicyNamespaceLister helps list and get ApiOperationPolicies.
// All objects returned here must be treated as read-only.
type ApiOperationPolicyNamespaceLister interface {
	// List lists all ApiOperationPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApiOperationPolicy, err error)
	// Get retrieves the ApiOperationPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ApiOperationPolicy, error)
	ApiOperationPolicyNamespaceListerExpansion
}

// apiOperationPolicyNamespaceLister implements the ApiOperationPolicyNamespaceLister
// interface.
type apiOperationPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApiOperationPolicies in the indexer for a given namespace.
func (s apiOperationPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApiOperationPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiOperationPolicy))
	})
	return ret, err
}

// Get retrieves the ApiOperationPolicy from the indexer for a given namespace and name.
func (s apiOperationPolicyNamespaceLister) Get(name string) (*v1alpha1.ApiOperationPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("apioperationpolicy"), name)
	}
	return obj.(*v1alpha1.ApiOperationPolicy), nil
}
