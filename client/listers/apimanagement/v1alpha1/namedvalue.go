/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/apimanagement/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NamedValueLister helps list NamedValues.
// All objects returned here must be treated as read-only.
type NamedValueLister interface {
	// List lists all NamedValues in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NamedValue, err error)
	// NamedValues returns an object that can list and get NamedValues.
	NamedValues(namespace string) NamedValueNamespaceLister
	NamedValueListerExpansion
}

// namedValueLister implements the NamedValueLister interface.
type namedValueLister struct {
	indexer cache.Indexer
}

// NewNamedValueLister returns a new NamedValueLister.
func NewNamedValueLister(indexer cache.Indexer) NamedValueLister {
	return &namedValueLister{indexer: indexer}
}

// List lists all NamedValues in the indexer.
func (s *namedValueLister) List(selector labels.Selector) (ret []*v1alpha1.NamedValue, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NamedValue))
	})
	return ret, err
}

// NamedValues returns an object that can list and get NamedValues.
func (s *namedValueLister) NamedValues(namespace string) NamedValueNamespaceLister {
	return namedValueNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NamedValueNamespaceLister helps list and get NamedValues.
// All objects returned here must be treated as read-only.
type NamedValueNamespaceLister interface {
	// List lists all NamedValues in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NamedValue, err error)
	// Get retrieves the NamedValue from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NamedValue, error)
	NamedValueNamespaceListerExpansion
}

// namedValueNamespaceLister implements the NamedValueNamespaceLister
// interface.
type namedValueNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NamedValues in the indexer for a given namespace.
func (s namedValueNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NamedValue, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NamedValue))
	})
	return ret, err
}

// Get retrieves the NamedValue from the indexer for a given namespace and name.
func (s namedValueNamespaceLister) Get(name string) (*v1alpha1.NamedValue, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("namedvalue"), name)
	}
	return obj.(*v1alpha1.NamedValue), nil
}
