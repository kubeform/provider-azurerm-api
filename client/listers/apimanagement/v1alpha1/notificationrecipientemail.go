/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/apimanagement/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NotificationRecipientEmailLister helps list NotificationRecipientEmails.
// All objects returned here must be treated as read-only.
type NotificationRecipientEmailLister interface {
	// List lists all NotificationRecipientEmails in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NotificationRecipientEmail, err error)
	// NotificationRecipientEmails returns an object that can list and get NotificationRecipientEmails.
	NotificationRecipientEmails(namespace string) NotificationRecipientEmailNamespaceLister
	NotificationRecipientEmailListerExpansion
}

// notificationRecipientEmailLister implements the NotificationRecipientEmailLister interface.
type notificationRecipientEmailLister struct {
	indexer cache.Indexer
}

// NewNotificationRecipientEmailLister returns a new NotificationRecipientEmailLister.
func NewNotificationRecipientEmailLister(indexer cache.Indexer) NotificationRecipientEmailLister {
	return &notificationRecipientEmailLister{indexer: indexer}
}

// List lists all NotificationRecipientEmails in the indexer.
func (s *notificationRecipientEmailLister) List(selector labels.Selector) (ret []*v1alpha1.NotificationRecipientEmail, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NotificationRecipientEmail))
	})
	return ret, err
}

// NotificationRecipientEmails returns an object that can list and get NotificationRecipientEmails.
func (s *notificationRecipientEmailLister) NotificationRecipientEmails(namespace string) NotificationRecipientEmailNamespaceLister {
	return notificationRecipientEmailNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NotificationRecipientEmailNamespaceLister helps list and get NotificationRecipientEmails.
// All objects returned here must be treated as read-only.
type NotificationRecipientEmailNamespaceLister interface {
	// List lists all NotificationRecipientEmails in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NotificationRecipientEmail, err error)
	// Get retrieves the NotificationRecipientEmail from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NotificationRecipientEmail, error)
	NotificationRecipientEmailNamespaceListerExpansion
}

// notificationRecipientEmailNamespaceLister implements the NotificationRecipientEmailNamespaceLister
// interface.
type notificationRecipientEmailNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NotificationRecipientEmails in the indexer for a given namespace.
func (s notificationRecipientEmailNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NotificationRecipientEmail, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NotificationRecipientEmail))
	})
	return ret, err
}

// Get retrieves the NotificationRecipientEmail from the indexer for a given namespace and name.
func (s notificationRecipientEmailNamespaceLister) Get(name string) (*v1alpha1.NotificationRecipientEmail, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("notificationrecipientemail"), name)
	}
	return obj.(*v1alpha1.NotificationRecipientEmail), nil
}
