/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/apimanagement/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GroupUserLister helps list GroupUsers.
// All objects returned here must be treated as read-only.
type GroupUserLister interface {
	// List lists all GroupUsers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GroupUser, err error)
	// GroupUsers returns an object that can list and get GroupUsers.
	GroupUsers(namespace string) GroupUserNamespaceLister
	GroupUserListerExpansion
}

// groupUserLister implements the GroupUserLister interface.
type groupUserLister struct {
	indexer cache.Indexer
}

// NewGroupUserLister returns a new GroupUserLister.
func NewGroupUserLister(indexer cache.Indexer) GroupUserLister {
	return &groupUserLister{indexer: indexer}
}

// List lists all GroupUsers in the indexer.
func (s *groupUserLister) List(selector labels.Selector) (ret []*v1alpha1.GroupUser, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GroupUser))
	})
	return ret, err
}

// GroupUsers returns an object that can list and get GroupUsers.
func (s *groupUserLister) GroupUsers(namespace string) GroupUserNamespaceLister {
	return groupUserNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GroupUserNamespaceLister helps list and get GroupUsers.
// All objects returned here must be treated as read-only.
type GroupUserNamespaceLister interface {
	// List lists all GroupUsers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GroupUser, err error)
	// Get retrieves the GroupUser from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GroupUser, error)
	GroupUserNamespaceListerExpansion
}

// groupUserNamespaceLister implements the GroupUserNamespaceLister
// interface.
type groupUserNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GroupUsers in the indexer for a given namespace.
func (s groupUserNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GroupUser, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GroupUser))
	})
	return ret, err
}

// Get retrieves the GroupUser from the indexer for a given namespace and name.
func (s groupUserNamespaceLister) Get(name string) (*v1alpha1.GroupUser, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("groupuser"), name)
	}
	return obj.(*v1alpha1.GroupUser), nil
}
