/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/apimanagement/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProductAPILister helps list ProductAPIs.
// All objects returned here must be treated as read-only.
type ProductAPILister interface {
	// List lists all ProductAPIs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProductAPI, err error)
	// ProductAPIs returns an object that can list and get ProductAPIs.
	ProductAPIs(namespace string) ProductAPINamespaceLister
	ProductAPIListerExpansion
}

// productAPILister implements the ProductAPILister interface.
type productAPILister struct {
	indexer cache.Indexer
}

// NewProductAPILister returns a new ProductAPILister.
func NewProductAPILister(indexer cache.Indexer) ProductAPILister {
	return &productAPILister{indexer: indexer}
}

// List lists all ProductAPIs in the indexer.
func (s *productAPILister) List(selector labels.Selector) (ret []*v1alpha1.ProductAPI, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProductAPI))
	})
	return ret, err
}

// ProductAPIs returns an object that can list and get ProductAPIs.
func (s *productAPILister) ProductAPIs(namespace string) ProductAPINamespaceLister {
	return productAPINamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProductAPINamespaceLister helps list and get ProductAPIs.
// All objects returned here must be treated as read-only.
type ProductAPINamespaceLister interface {
	// List lists all ProductAPIs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProductAPI, err error)
	// Get retrieves the ProductAPI from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ProductAPI, error)
	ProductAPINamespaceListerExpansion
}

// productAPINamespaceLister implements the ProductAPINamespaceLister
// interface.
type productAPINamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProductAPIs in the indexer for a given namespace.
func (s productAPINamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ProductAPI, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProductAPI))
	})
	return ret, err
}

// Get retrieves the ProductAPI from the indexer for a given namespace and name.
func (s productAPINamespaceLister) Get(name string) (*v1alpha1.ProductAPI, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("productapi"), name)
	}
	return obj.(*v1alpha1.ProductAPI), nil
}
