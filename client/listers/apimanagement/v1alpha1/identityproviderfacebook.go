/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/apimanagement/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IdentityProviderFacebookLister helps list IdentityProviderFacebooks.
// All objects returned here must be treated as read-only.
type IdentityProviderFacebookLister interface {
	// List lists all IdentityProviderFacebooks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IdentityProviderFacebook, err error)
	// IdentityProviderFacebooks returns an object that can list and get IdentityProviderFacebooks.
	IdentityProviderFacebooks(namespace string) IdentityProviderFacebookNamespaceLister
	IdentityProviderFacebookListerExpansion
}

// identityProviderFacebookLister implements the IdentityProviderFacebookLister interface.
type identityProviderFacebookLister struct {
	indexer cache.Indexer
}

// NewIdentityProviderFacebookLister returns a new IdentityProviderFacebookLister.
func NewIdentityProviderFacebookLister(indexer cache.Indexer) IdentityProviderFacebookLister {
	return &identityProviderFacebookLister{indexer: indexer}
}

// List lists all IdentityProviderFacebooks in the indexer.
func (s *identityProviderFacebookLister) List(selector labels.Selector) (ret []*v1alpha1.IdentityProviderFacebook, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IdentityProviderFacebook))
	})
	return ret, err
}

// IdentityProviderFacebooks returns an object that can list and get IdentityProviderFacebooks.
func (s *identityProviderFacebookLister) IdentityProviderFacebooks(namespace string) IdentityProviderFacebookNamespaceLister {
	return identityProviderFacebookNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IdentityProviderFacebookNamespaceLister helps list and get IdentityProviderFacebooks.
// All objects returned here must be treated as read-only.
type IdentityProviderFacebookNamespaceLister interface {
	// List lists all IdentityProviderFacebooks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IdentityProviderFacebook, err error)
	// Get retrieves the IdentityProviderFacebook from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IdentityProviderFacebook, error)
	IdentityProviderFacebookNamespaceListerExpansion
}

// identityProviderFacebookNamespaceLister implements the IdentityProviderFacebookNamespaceLister
// interface.
type identityProviderFacebookNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IdentityProviderFacebooks in the indexer for a given namespace.
func (s identityProviderFacebookNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IdentityProviderFacebook, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IdentityProviderFacebook))
	})
	return ret, err
}

// Get retrieves the IdentityProviderFacebook from the indexer for a given namespace and name.
func (s identityProviderFacebookNamespaceLister) Get(name string) (*v1alpha1.IdentityProviderFacebook, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("identityproviderfacebook"), name)
	}
	return obj.(*v1alpha1.IdentityProviderFacebook), nil
}
