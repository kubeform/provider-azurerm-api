/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/apimanagement/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IdentityProviderMicrosoftLister helps list IdentityProviderMicrosofts.
// All objects returned here must be treated as read-only.
type IdentityProviderMicrosoftLister interface {
	// List lists all IdentityProviderMicrosofts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IdentityProviderMicrosoft, err error)
	// IdentityProviderMicrosofts returns an object that can list and get IdentityProviderMicrosofts.
	IdentityProviderMicrosofts(namespace string) IdentityProviderMicrosoftNamespaceLister
	IdentityProviderMicrosoftListerExpansion
}

// identityProviderMicrosoftLister implements the IdentityProviderMicrosoftLister interface.
type identityProviderMicrosoftLister struct {
	indexer cache.Indexer
}

// NewIdentityProviderMicrosoftLister returns a new IdentityProviderMicrosoftLister.
func NewIdentityProviderMicrosoftLister(indexer cache.Indexer) IdentityProviderMicrosoftLister {
	return &identityProviderMicrosoftLister{indexer: indexer}
}

// List lists all IdentityProviderMicrosofts in the indexer.
func (s *identityProviderMicrosoftLister) List(selector labels.Selector) (ret []*v1alpha1.IdentityProviderMicrosoft, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IdentityProviderMicrosoft))
	})
	return ret, err
}

// IdentityProviderMicrosofts returns an object that can list and get IdentityProviderMicrosofts.
func (s *identityProviderMicrosoftLister) IdentityProviderMicrosofts(namespace string) IdentityProviderMicrosoftNamespaceLister {
	return identityProviderMicrosoftNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IdentityProviderMicrosoftNamespaceLister helps list and get IdentityProviderMicrosofts.
// All objects returned here must be treated as read-only.
type IdentityProviderMicrosoftNamespaceLister interface {
	// List lists all IdentityProviderMicrosofts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IdentityProviderMicrosoft, err error)
	// Get retrieves the IdentityProviderMicrosoft from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IdentityProviderMicrosoft, error)
	IdentityProviderMicrosoftNamespaceListerExpansion
}

// identityProviderMicrosoftNamespaceLister implements the IdentityProviderMicrosoftNamespaceLister
// interface.
type identityProviderMicrosoftNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IdentityProviderMicrosofts in the indexer for a given namespace.
func (s identityProviderMicrosoftNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IdentityProviderMicrosoft, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IdentityProviderMicrosoft))
	})
	return ret, err
}

// Get retrieves the IdentityProviderMicrosoft from the indexer for a given namespace and name.
func (s identityProviderMicrosoftNamespaceLister) Get(name string) (*v1alpha1.IdentityProviderMicrosoft, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("identityprovidermicrosoft"), name)
	}
	return obj.(*v1alpha1.IdentityProviderMicrosoft), nil
}
