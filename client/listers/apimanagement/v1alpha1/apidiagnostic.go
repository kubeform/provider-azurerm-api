/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/apimanagement/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApiDiagnosticLister helps list ApiDiagnostics.
// All objects returned here must be treated as read-only.
type ApiDiagnosticLister interface {
	// List lists all ApiDiagnostics in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApiDiagnostic, err error)
	// ApiDiagnostics returns an object that can list and get ApiDiagnostics.
	ApiDiagnostics(namespace string) ApiDiagnosticNamespaceLister
	ApiDiagnosticListerExpansion
}

// apiDiagnosticLister implements the ApiDiagnosticLister interface.
type apiDiagnosticLister struct {
	indexer cache.Indexer
}

// NewApiDiagnosticLister returns a new ApiDiagnosticLister.
func NewApiDiagnosticLister(indexer cache.Indexer) ApiDiagnosticLister {
	return &apiDiagnosticLister{indexer: indexer}
}

// List lists all ApiDiagnostics in the indexer.
func (s *apiDiagnosticLister) List(selector labels.Selector) (ret []*v1alpha1.ApiDiagnostic, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiDiagnostic))
	})
	return ret, err
}

// ApiDiagnostics returns an object that can list and get ApiDiagnostics.
func (s *apiDiagnosticLister) ApiDiagnostics(namespace string) ApiDiagnosticNamespaceLister {
	return apiDiagnosticNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApiDiagnosticNamespaceLister helps list and get ApiDiagnostics.
// All objects returned here must be treated as read-only.
type ApiDiagnosticNamespaceLister interface {
	// List lists all ApiDiagnostics in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApiDiagnostic, err error)
	// Get retrieves the ApiDiagnostic from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ApiDiagnostic, error)
	ApiDiagnosticNamespaceListerExpansion
}

// apiDiagnosticNamespaceLister implements the ApiDiagnosticNamespaceLister
// interface.
type apiDiagnosticNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApiDiagnostics in the indexer for a given namespace.
func (s apiDiagnosticNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApiDiagnostic, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiDiagnostic))
	})
	return ret, err
}

// Get retrieves the ApiDiagnostic from the indexer for a given namespace and name.
func (s apiDiagnosticNamespaceLister) Get(name string) (*v1alpha1.ApiDiagnostic, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("apidiagnostic"), name)
	}
	return obj.(*v1alpha1.ApiDiagnostic), nil
}
