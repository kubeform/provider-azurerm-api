/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/apimanagement/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PropertyLister helps list Properties.
// All objects returned here must be treated as read-only.
type PropertyLister interface {
	// List lists all Properties in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Property, err error)
	// Properties returns an object that can list and get Properties.
	Properties(namespace string) PropertyNamespaceLister
	PropertyListerExpansion
}

// propertyLister implements the PropertyLister interface.
type propertyLister struct {
	indexer cache.Indexer
}

// NewPropertyLister returns a new PropertyLister.
func NewPropertyLister(indexer cache.Indexer) PropertyLister {
	return &propertyLister{indexer: indexer}
}

// List lists all Properties in the indexer.
func (s *propertyLister) List(selector labels.Selector) (ret []*v1alpha1.Property, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Property))
	})
	return ret, err
}

// Properties returns an object that can list and get Properties.
func (s *propertyLister) Properties(namespace string) PropertyNamespaceLister {
	return propertyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PropertyNamespaceLister helps list and get Properties.
// All objects returned here must be treated as read-only.
type PropertyNamespaceLister interface {
	// List lists all Properties in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Property, err error)
	// Get retrieves the Property from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Property, error)
	PropertyNamespaceListerExpansion
}

// propertyNamespaceLister implements the PropertyNamespaceLister
// interface.
type propertyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Properties in the indexer for a given namespace.
func (s propertyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Property, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Property))
	})
	return ret, err
}

// Get retrieves the Property from the indexer for a given namespace and name.
func (s propertyNamespaceLister) Get(name string) (*v1alpha1.Property, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("property"), name)
	}
	return obj.(*v1alpha1.Property), nil
}
