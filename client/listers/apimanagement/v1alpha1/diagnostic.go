/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/apimanagement/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DiagnosticLister helps list Diagnostics.
// All objects returned here must be treated as read-only.
type DiagnosticLister interface {
	// List lists all Diagnostics in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Diagnostic, err error)
	// Diagnostics returns an object that can list and get Diagnostics.
	Diagnostics(namespace string) DiagnosticNamespaceLister
	DiagnosticListerExpansion
}

// diagnosticLister implements the DiagnosticLister interface.
type diagnosticLister struct {
	indexer cache.Indexer
}

// NewDiagnosticLister returns a new DiagnosticLister.
func NewDiagnosticLister(indexer cache.Indexer) DiagnosticLister {
	return &diagnosticLister{indexer: indexer}
}

// List lists all Diagnostics in the indexer.
func (s *diagnosticLister) List(selector labels.Selector) (ret []*v1alpha1.Diagnostic, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Diagnostic))
	})
	return ret, err
}

// Diagnostics returns an object that can list and get Diagnostics.
func (s *diagnosticLister) Diagnostics(namespace string) DiagnosticNamespaceLister {
	return diagnosticNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DiagnosticNamespaceLister helps list and get Diagnostics.
// All objects returned here must be treated as read-only.
type DiagnosticNamespaceLister interface {
	// List lists all Diagnostics in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Diagnostic, err error)
	// Get retrieves the Diagnostic from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Diagnostic, error)
	DiagnosticNamespaceListerExpansion
}

// diagnosticNamespaceLister implements the DiagnosticNamespaceLister
// interface.
type diagnosticNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Diagnostics in the indexer for a given namespace.
func (s diagnosticNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Diagnostic, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Diagnostic))
	})
	return ret, err
}

// Get retrieves the Diagnostic from the indexer for a given namespace and name.
func (s diagnosticNamespaceLister) Get(name string) (*v1alpha1.Diagnostic, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("diagnostic"), name)
	}
	return obj.(*v1alpha1.Diagnostic), nil
}
