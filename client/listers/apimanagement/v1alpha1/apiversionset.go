/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/apimanagement/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApiVersionSetLister helps list ApiVersionSets.
// All objects returned here must be treated as read-only.
type ApiVersionSetLister interface {
	// List lists all ApiVersionSets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApiVersionSet, err error)
	// ApiVersionSets returns an object that can list and get ApiVersionSets.
	ApiVersionSets(namespace string) ApiVersionSetNamespaceLister
	ApiVersionSetListerExpansion
}

// apiVersionSetLister implements the ApiVersionSetLister interface.
type apiVersionSetLister struct {
	indexer cache.Indexer
}

// NewApiVersionSetLister returns a new ApiVersionSetLister.
func NewApiVersionSetLister(indexer cache.Indexer) ApiVersionSetLister {
	return &apiVersionSetLister{indexer: indexer}
}

// List lists all ApiVersionSets in the indexer.
func (s *apiVersionSetLister) List(selector labels.Selector) (ret []*v1alpha1.ApiVersionSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiVersionSet))
	})
	return ret, err
}

// ApiVersionSets returns an object that can list and get ApiVersionSets.
func (s *apiVersionSetLister) ApiVersionSets(namespace string) ApiVersionSetNamespaceLister {
	return apiVersionSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApiVersionSetNamespaceLister helps list and get ApiVersionSets.
// All objects returned here must be treated as read-only.
type ApiVersionSetNamespaceLister interface {
	// List lists all ApiVersionSets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApiVersionSet, err error)
	// Get retrieves the ApiVersionSet from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ApiVersionSet, error)
	ApiVersionSetNamespaceListerExpansion
}

// apiVersionSetNamespaceLister implements the ApiVersionSetNamespaceLister
// interface.
type apiVersionSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApiVersionSets in the indexer for a given namespace.
func (s apiVersionSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApiVersionSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiVersionSet))
	})
	return ret, err
}

// Get retrieves the ApiVersionSet from the indexer for a given namespace and name.
func (s apiVersionSetNamespaceLister) Get(name string) (*v1alpha1.ApiVersionSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("apiversionset"), name)
	}
	return obj.(*v1alpha1.ApiVersionSet), nil
}
