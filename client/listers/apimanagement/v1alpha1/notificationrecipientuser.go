/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/apimanagement/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NotificationRecipientUserLister helps list NotificationRecipientUsers.
// All objects returned here must be treated as read-only.
type NotificationRecipientUserLister interface {
	// List lists all NotificationRecipientUsers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NotificationRecipientUser, err error)
	// NotificationRecipientUsers returns an object that can list and get NotificationRecipientUsers.
	NotificationRecipientUsers(namespace string) NotificationRecipientUserNamespaceLister
	NotificationRecipientUserListerExpansion
}

// notificationRecipientUserLister implements the NotificationRecipientUserLister interface.
type notificationRecipientUserLister struct {
	indexer cache.Indexer
}

// NewNotificationRecipientUserLister returns a new NotificationRecipientUserLister.
func NewNotificationRecipientUserLister(indexer cache.Indexer) NotificationRecipientUserLister {
	return &notificationRecipientUserLister{indexer: indexer}
}

// List lists all NotificationRecipientUsers in the indexer.
func (s *notificationRecipientUserLister) List(selector labels.Selector) (ret []*v1alpha1.NotificationRecipientUser, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NotificationRecipientUser))
	})
	return ret, err
}

// NotificationRecipientUsers returns an object that can list and get NotificationRecipientUsers.
func (s *notificationRecipientUserLister) NotificationRecipientUsers(namespace string) NotificationRecipientUserNamespaceLister {
	return notificationRecipientUserNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NotificationRecipientUserNamespaceLister helps list and get NotificationRecipientUsers.
// All objects returned here must be treated as read-only.
type NotificationRecipientUserNamespaceLister interface {
	// List lists all NotificationRecipientUsers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NotificationRecipientUser, err error)
	// Get retrieves the NotificationRecipientUser from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NotificationRecipientUser, error)
	NotificationRecipientUserNamespaceListerExpansion
}

// notificationRecipientUserNamespaceLister implements the NotificationRecipientUserNamespaceLister
// interface.
type notificationRecipientUserNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NotificationRecipientUsers in the indexer for a given namespace.
func (s notificationRecipientUserNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NotificationRecipientUser, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NotificationRecipientUser))
	})
	return ret, err
}

// Get retrieves the NotificationRecipientUser from the indexer for a given namespace and name.
func (s notificationRecipientUserNamespaceLister) Get(name string) (*v1alpha1.NotificationRecipientUser, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("notificationrecipientuser"), name)
	}
	return obj.(*v1alpha1.NotificationRecipientUser), nil
}
