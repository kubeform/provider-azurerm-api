/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/apimanagement/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApiReleaseLister helps list ApiReleases.
// All objects returned here must be treated as read-only.
type ApiReleaseLister interface {
	// List lists all ApiReleases in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApiRelease, err error)
	// ApiReleases returns an object that can list and get ApiReleases.
	ApiReleases(namespace string) ApiReleaseNamespaceLister
	ApiReleaseListerExpansion
}

// apiReleaseLister implements the ApiReleaseLister interface.
type apiReleaseLister struct {
	indexer cache.Indexer
}

// NewApiReleaseLister returns a new ApiReleaseLister.
func NewApiReleaseLister(indexer cache.Indexer) ApiReleaseLister {
	return &apiReleaseLister{indexer: indexer}
}

// List lists all ApiReleases in the indexer.
func (s *apiReleaseLister) List(selector labels.Selector) (ret []*v1alpha1.ApiRelease, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiRelease))
	})
	return ret, err
}

// ApiReleases returns an object that can list and get ApiReleases.
func (s *apiReleaseLister) ApiReleases(namespace string) ApiReleaseNamespaceLister {
	return apiReleaseNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApiReleaseNamespaceLister helps list and get ApiReleases.
// All objects returned here must be treated as read-only.
type ApiReleaseNamespaceLister interface {
	// List lists all ApiReleases in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApiRelease, err error)
	// Get retrieves the ApiRelease from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ApiRelease, error)
	ApiReleaseNamespaceListerExpansion
}

// apiReleaseNamespaceLister implements the ApiReleaseNamespaceLister
// interface.
type apiReleaseNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApiReleases in the indexer for a given namespace.
func (s apiReleaseNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApiRelease, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiRelease))
	})
	return ret, err
}

// Get retrieves the ApiRelease from the indexer for a given namespace and name.
func (s apiReleaseNamespaceLister) Get(name string) (*v1alpha1.ApiRelease, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("apirelease"), name)
	}
	return obj.(*v1alpha1.ApiRelease), nil
}
