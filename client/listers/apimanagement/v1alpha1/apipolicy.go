/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/apimanagement/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApiPolicyLister helps list ApiPolicies.
// All objects returned here must be treated as read-only.
type ApiPolicyLister interface {
	// List lists all ApiPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApiPolicy, err error)
	// ApiPolicies returns an object that can list and get ApiPolicies.
	ApiPolicies(namespace string) ApiPolicyNamespaceLister
	ApiPolicyListerExpansion
}

// apiPolicyLister implements the ApiPolicyLister interface.
type apiPolicyLister struct {
	indexer cache.Indexer
}

// NewApiPolicyLister returns a new ApiPolicyLister.
func NewApiPolicyLister(indexer cache.Indexer) ApiPolicyLister {
	return &apiPolicyLister{indexer: indexer}
}

// List lists all ApiPolicies in the indexer.
func (s *apiPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.ApiPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiPolicy))
	})
	return ret, err
}

// ApiPolicies returns an object that can list and get ApiPolicies.
func (s *apiPolicyLister) ApiPolicies(namespace string) ApiPolicyNamespaceLister {
	return apiPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApiPolicyNamespaceLister helps list and get ApiPolicies.
// All objects returned here must be treated as read-only.
type ApiPolicyNamespaceLister interface {
	// List lists all ApiPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApiPolicy, err error)
	// Get retrieves the ApiPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ApiPolicy, error)
	ApiPolicyNamespaceListerExpansion
}

// apiPolicyNamespaceLister implements the ApiPolicyNamespaceLister
// interface.
type apiPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApiPolicies in the indexer for a given namespace.
func (s apiPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApiPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiPolicy))
	})
	return ret, err
}

// Get retrieves the ApiPolicy from the indexer for a given namespace and name.
func (s apiPolicyNamespaceLister) Get(name string) (*v1alpha1.ApiPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("apipolicy"), name)
	}
	return obj.(*v1alpha1.ApiPolicy), nil
}
