/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/apimanagement/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApiSchemaLister helps list ApiSchemas.
// All objects returned here must be treated as read-only.
type ApiSchemaLister interface {
	// List lists all ApiSchemas in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApiSchema, err error)
	// ApiSchemas returns an object that can list and get ApiSchemas.
	ApiSchemas(namespace string) ApiSchemaNamespaceLister
	ApiSchemaListerExpansion
}

// apiSchemaLister implements the ApiSchemaLister interface.
type apiSchemaLister struct {
	indexer cache.Indexer
}

// NewApiSchemaLister returns a new ApiSchemaLister.
func NewApiSchemaLister(indexer cache.Indexer) ApiSchemaLister {
	return &apiSchemaLister{indexer: indexer}
}

// List lists all ApiSchemas in the indexer.
func (s *apiSchemaLister) List(selector labels.Selector) (ret []*v1alpha1.ApiSchema, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiSchema))
	})
	return ret, err
}

// ApiSchemas returns an object that can list and get ApiSchemas.
func (s *apiSchemaLister) ApiSchemas(namespace string) ApiSchemaNamespaceLister {
	return apiSchemaNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApiSchemaNamespaceLister helps list and get ApiSchemas.
// All objects returned here must be treated as read-only.
type ApiSchemaNamespaceLister interface {
	// List lists all ApiSchemas in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApiSchema, err error)
	// Get retrieves the ApiSchema from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ApiSchema, error)
	ApiSchemaNamespaceListerExpansion
}

// apiSchemaNamespaceLister implements the ApiSchemaNamespaceLister
// interface.
type apiSchemaNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApiSchemas in the indexer for a given namespace.
func (s apiSchemaNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApiSchema, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiSchema))
	})
	return ret, err
}

// Get retrieves the ApiSchema from the indexer for a given namespace and name.
func (s apiSchemaNamespaceLister) Get(name string) (*v1alpha1.ApiSchema, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("apischema"), name)
	}
	return obj.(*v1alpha1.ApiSchema), nil
}
