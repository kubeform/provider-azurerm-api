/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/apimanagement/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProductPolicyLister helps list ProductPolicies.
// All objects returned here must be treated as read-only.
type ProductPolicyLister interface {
	// List lists all ProductPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProductPolicy, err error)
	// ProductPolicies returns an object that can list and get ProductPolicies.
	ProductPolicies(namespace string) ProductPolicyNamespaceLister
	ProductPolicyListerExpansion
}

// productPolicyLister implements the ProductPolicyLister interface.
type productPolicyLister struct {
	indexer cache.Indexer
}

// NewProductPolicyLister returns a new ProductPolicyLister.
func NewProductPolicyLister(indexer cache.Indexer) ProductPolicyLister {
	return &productPolicyLister{indexer: indexer}
}

// List lists all ProductPolicies in the indexer.
func (s *productPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.ProductPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProductPolicy))
	})
	return ret, err
}

// ProductPolicies returns an object that can list and get ProductPolicies.
func (s *productPolicyLister) ProductPolicies(namespace string) ProductPolicyNamespaceLister {
	return productPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProductPolicyNamespaceLister helps list and get ProductPolicies.
// All objects returned here must be treated as read-only.
type ProductPolicyNamespaceLister interface {
	// List lists all ProductPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProductPolicy, err error)
	// Get retrieves the ProductPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ProductPolicy, error)
	ProductPolicyNamespaceListerExpansion
}

// productPolicyNamespaceLister implements the ProductPolicyNamespaceLister
// interface.
type productPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProductPolicies in the indexer for a given namespace.
func (s productPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ProductPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProductPolicy))
	})
	return ret, err
}

// Get retrieves the ProductPolicy from the indexer for a given namespace and name.
func (s productPolicyNamespaceLister) Get(name string) (*v1alpha1.ProductPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("productpolicy"), name)
	}
	return obj.(*v1alpha1.ProductPolicy), nil
}
