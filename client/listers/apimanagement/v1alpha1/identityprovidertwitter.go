/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/apimanagement/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IdentityProviderTwitterLister helps list IdentityProviderTwitters.
// All objects returned here must be treated as read-only.
type IdentityProviderTwitterLister interface {
	// List lists all IdentityProviderTwitters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IdentityProviderTwitter, err error)
	// IdentityProviderTwitters returns an object that can list and get IdentityProviderTwitters.
	IdentityProviderTwitters(namespace string) IdentityProviderTwitterNamespaceLister
	IdentityProviderTwitterListerExpansion
}

// identityProviderTwitterLister implements the IdentityProviderTwitterLister interface.
type identityProviderTwitterLister struct {
	indexer cache.Indexer
}

// NewIdentityProviderTwitterLister returns a new IdentityProviderTwitterLister.
func NewIdentityProviderTwitterLister(indexer cache.Indexer) IdentityProviderTwitterLister {
	return &identityProviderTwitterLister{indexer: indexer}
}

// List lists all IdentityProviderTwitters in the indexer.
func (s *identityProviderTwitterLister) List(selector labels.Selector) (ret []*v1alpha1.IdentityProviderTwitter, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IdentityProviderTwitter))
	})
	return ret, err
}

// IdentityProviderTwitters returns an object that can list and get IdentityProviderTwitters.
func (s *identityProviderTwitterLister) IdentityProviderTwitters(namespace string) IdentityProviderTwitterNamespaceLister {
	return identityProviderTwitterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IdentityProviderTwitterNamespaceLister helps list and get IdentityProviderTwitters.
// All objects returned here must be treated as read-only.
type IdentityProviderTwitterNamespaceLister interface {
	// List lists all IdentityProviderTwitters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IdentityProviderTwitter, err error)
	// Get retrieves the IdentityProviderTwitter from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IdentityProviderTwitter, error)
	IdentityProviderTwitterNamespaceListerExpansion
}

// identityProviderTwitterNamespaceLister implements the IdentityProviderTwitterNamespaceLister
// interface.
type identityProviderTwitterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IdentityProviderTwitters in the indexer for a given namespace.
func (s identityProviderTwitterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IdentityProviderTwitter, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IdentityProviderTwitter))
	})
	return ret, err
}

// Get retrieves the IdentityProviderTwitter from the indexer for a given namespace and name.
func (s identityProviderTwitterNamespaceLister) Get(name string) (*v1alpha1.IdentityProviderTwitter, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("identityprovidertwitter"), name)
	}
	return obj.(*v1alpha1.IdentityProviderTwitter), nil
}
