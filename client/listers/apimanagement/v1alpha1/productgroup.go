/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/apimanagement/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProductGroupLister helps list ProductGroups.
// All objects returned here must be treated as read-only.
type ProductGroupLister interface {
	// List lists all ProductGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProductGroup, err error)
	// ProductGroups returns an object that can list and get ProductGroups.
	ProductGroups(namespace string) ProductGroupNamespaceLister
	ProductGroupListerExpansion
}

// productGroupLister implements the ProductGroupLister interface.
type productGroupLister struct {
	indexer cache.Indexer
}

// NewProductGroupLister returns a new ProductGroupLister.
func NewProductGroupLister(indexer cache.Indexer) ProductGroupLister {
	return &productGroupLister{indexer: indexer}
}

// List lists all ProductGroups in the indexer.
func (s *productGroupLister) List(selector labels.Selector) (ret []*v1alpha1.ProductGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProductGroup))
	})
	return ret, err
}

// ProductGroups returns an object that can list and get ProductGroups.
func (s *productGroupLister) ProductGroups(namespace string) ProductGroupNamespaceLister {
	return productGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProductGroupNamespaceLister helps list and get ProductGroups.
// All objects returned here must be treated as read-only.
type ProductGroupNamespaceLister interface {
	// List lists all ProductGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProductGroup, err error)
	// Get retrieves the ProductGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ProductGroup, error)
	ProductGroupNamespaceListerExpansion
}

// productGroupNamespaceLister implements the ProductGroupNamespaceLister
// interface.
type productGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProductGroups in the indexer for a given namespace.
func (s productGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ProductGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProductGroup))
	})
	return ret, err
}

// Get retrieves the ProductGroup from the indexer for a given namespace and name.
func (s productGroupNamespaceLister) Get(name string) (*v1alpha1.ProductGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("productgroup"), name)
	}
	return obj.(*v1alpha1.ProductGroup), nil
}
