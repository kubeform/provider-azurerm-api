/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/loganalytics/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DataExportRuleLister helps list DataExportRules.
// All objects returned here must be treated as read-only.
type DataExportRuleLister interface {
	// List lists all DataExportRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DataExportRule, err error)
	// DataExportRules returns an object that can list and get DataExportRules.
	DataExportRules(namespace string) DataExportRuleNamespaceLister
	DataExportRuleListerExpansion
}

// dataExportRuleLister implements the DataExportRuleLister interface.
type dataExportRuleLister struct {
	indexer cache.Indexer
}

// NewDataExportRuleLister returns a new DataExportRuleLister.
func NewDataExportRuleLister(indexer cache.Indexer) DataExportRuleLister {
	return &dataExportRuleLister{indexer: indexer}
}

// List lists all DataExportRules in the indexer.
func (s *dataExportRuleLister) List(selector labels.Selector) (ret []*v1alpha1.DataExportRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataExportRule))
	})
	return ret, err
}

// DataExportRules returns an object that can list and get DataExportRules.
func (s *dataExportRuleLister) DataExportRules(namespace string) DataExportRuleNamespaceLister {
	return dataExportRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DataExportRuleNamespaceLister helps list and get DataExportRules.
// All objects returned here must be treated as read-only.
type DataExportRuleNamespaceLister interface {
	// List lists all DataExportRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DataExportRule, err error)
	// Get retrieves the DataExportRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DataExportRule, error)
	DataExportRuleNamespaceListerExpansion
}

// dataExportRuleNamespaceLister implements the DataExportRuleNamespaceLister
// interface.
type dataExportRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DataExportRules in the indexer for a given namespace.
func (s dataExportRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DataExportRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataExportRule))
	})
	return ret, err
}

// Get retrieves the DataExportRule from the indexer for a given namespace and name.
func (s dataExportRuleNamespaceLister) Get(name string) (*v1alpha1.DataExportRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dataexportrule"), name)
	}
	return obj.(*v1alpha1.DataExportRule), nil
}
