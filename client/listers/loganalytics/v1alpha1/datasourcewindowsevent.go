/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/loganalytics/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DatasourceWindowsEventLister helps list DatasourceWindowsEvents.
// All objects returned here must be treated as read-only.
type DatasourceWindowsEventLister interface {
	// List lists all DatasourceWindowsEvents in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DatasourceWindowsEvent, err error)
	// DatasourceWindowsEvents returns an object that can list and get DatasourceWindowsEvents.
	DatasourceWindowsEvents(namespace string) DatasourceWindowsEventNamespaceLister
	DatasourceWindowsEventListerExpansion
}

// datasourceWindowsEventLister implements the DatasourceWindowsEventLister interface.
type datasourceWindowsEventLister struct {
	indexer cache.Indexer
}

// NewDatasourceWindowsEventLister returns a new DatasourceWindowsEventLister.
func NewDatasourceWindowsEventLister(indexer cache.Indexer) DatasourceWindowsEventLister {
	return &datasourceWindowsEventLister{indexer: indexer}
}

// List lists all DatasourceWindowsEvents in the indexer.
func (s *datasourceWindowsEventLister) List(selector labels.Selector) (ret []*v1alpha1.DatasourceWindowsEvent, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatasourceWindowsEvent))
	})
	return ret, err
}

// DatasourceWindowsEvents returns an object that can list and get DatasourceWindowsEvents.
func (s *datasourceWindowsEventLister) DatasourceWindowsEvents(namespace string) DatasourceWindowsEventNamespaceLister {
	return datasourceWindowsEventNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DatasourceWindowsEventNamespaceLister helps list and get DatasourceWindowsEvents.
// All objects returned here must be treated as read-only.
type DatasourceWindowsEventNamespaceLister interface {
	// List lists all DatasourceWindowsEvents in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DatasourceWindowsEvent, err error)
	// Get retrieves the DatasourceWindowsEvent from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DatasourceWindowsEvent, error)
	DatasourceWindowsEventNamespaceListerExpansion
}

// datasourceWindowsEventNamespaceLister implements the DatasourceWindowsEventNamespaceLister
// interface.
type datasourceWindowsEventNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DatasourceWindowsEvents in the indexer for a given namespace.
func (s datasourceWindowsEventNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DatasourceWindowsEvent, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatasourceWindowsEvent))
	})
	return ret, err
}

// Get retrieves the DatasourceWindowsEvent from the indexer for a given namespace and name.
func (s datasourceWindowsEventNamespaceLister) Get(name string) (*v1alpha1.DatasourceWindowsEvent, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("datasourcewindowsevent"), name)
	}
	return obj.(*v1alpha1.DatasourceWindowsEvent), nil
}
