/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/loganalytics/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DatasourceWindowsPerformanceCounterLister helps list DatasourceWindowsPerformanceCounters.
// All objects returned here must be treated as read-only.
type DatasourceWindowsPerformanceCounterLister interface {
	// List lists all DatasourceWindowsPerformanceCounters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DatasourceWindowsPerformanceCounter, err error)
	// DatasourceWindowsPerformanceCounters returns an object that can list and get DatasourceWindowsPerformanceCounters.
	DatasourceWindowsPerformanceCounters(namespace string) DatasourceWindowsPerformanceCounterNamespaceLister
	DatasourceWindowsPerformanceCounterListerExpansion
}

// datasourceWindowsPerformanceCounterLister implements the DatasourceWindowsPerformanceCounterLister interface.
type datasourceWindowsPerformanceCounterLister struct {
	indexer cache.Indexer
}

// NewDatasourceWindowsPerformanceCounterLister returns a new DatasourceWindowsPerformanceCounterLister.
func NewDatasourceWindowsPerformanceCounterLister(indexer cache.Indexer) DatasourceWindowsPerformanceCounterLister {
	return &datasourceWindowsPerformanceCounterLister{indexer: indexer}
}

// List lists all DatasourceWindowsPerformanceCounters in the indexer.
func (s *datasourceWindowsPerformanceCounterLister) List(selector labels.Selector) (ret []*v1alpha1.DatasourceWindowsPerformanceCounter, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatasourceWindowsPerformanceCounter))
	})
	return ret, err
}

// DatasourceWindowsPerformanceCounters returns an object that can list and get DatasourceWindowsPerformanceCounters.
func (s *datasourceWindowsPerformanceCounterLister) DatasourceWindowsPerformanceCounters(namespace string) DatasourceWindowsPerformanceCounterNamespaceLister {
	return datasourceWindowsPerformanceCounterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DatasourceWindowsPerformanceCounterNamespaceLister helps list and get DatasourceWindowsPerformanceCounters.
// All objects returned here must be treated as read-only.
type DatasourceWindowsPerformanceCounterNamespaceLister interface {
	// List lists all DatasourceWindowsPerformanceCounters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DatasourceWindowsPerformanceCounter, err error)
	// Get retrieves the DatasourceWindowsPerformanceCounter from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DatasourceWindowsPerformanceCounter, error)
	DatasourceWindowsPerformanceCounterNamespaceListerExpansion
}

// datasourceWindowsPerformanceCounterNamespaceLister implements the DatasourceWindowsPerformanceCounterNamespaceLister
// interface.
type datasourceWindowsPerformanceCounterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DatasourceWindowsPerformanceCounters in the indexer for a given namespace.
func (s datasourceWindowsPerformanceCounterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DatasourceWindowsPerformanceCounter, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatasourceWindowsPerformanceCounter))
	})
	return ret, err
}

// Get retrieves the DatasourceWindowsPerformanceCounter from the indexer for a given namespace and name.
func (s datasourceWindowsPerformanceCounterNamespaceLister) Get(name string) (*v1alpha1.DatasourceWindowsPerformanceCounter, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("datasourcewindowsperformancecounter"), name)
	}
	return obj.(*v1alpha1.DatasourceWindowsPerformanceCounter), nil
}
