/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/static/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SiteCustomDomainLister helps list SiteCustomDomains.
// All objects returned here must be treated as read-only.
type SiteCustomDomainLister interface {
	// List lists all SiteCustomDomains in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SiteCustomDomain, err error)
	// SiteCustomDomains returns an object that can list and get SiteCustomDomains.
	SiteCustomDomains(namespace string) SiteCustomDomainNamespaceLister
	SiteCustomDomainListerExpansion
}

// siteCustomDomainLister implements the SiteCustomDomainLister interface.
type siteCustomDomainLister struct {
	indexer cache.Indexer
}

// NewSiteCustomDomainLister returns a new SiteCustomDomainLister.
func NewSiteCustomDomainLister(indexer cache.Indexer) SiteCustomDomainLister {
	return &siteCustomDomainLister{indexer: indexer}
}

// List lists all SiteCustomDomains in the indexer.
func (s *siteCustomDomainLister) List(selector labels.Selector) (ret []*v1alpha1.SiteCustomDomain, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SiteCustomDomain))
	})
	return ret, err
}

// SiteCustomDomains returns an object that can list and get SiteCustomDomains.
func (s *siteCustomDomainLister) SiteCustomDomains(namespace string) SiteCustomDomainNamespaceLister {
	return siteCustomDomainNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SiteCustomDomainNamespaceLister helps list and get SiteCustomDomains.
// All objects returned here must be treated as read-only.
type SiteCustomDomainNamespaceLister interface {
	// List lists all SiteCustomDomains in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SiteCustomDomain, err error)
	// Get retrieves the SiteCustomDomain from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SiteCustomDomain, error)
	SiteCustomDomainNamespaceListerExpansion
}

// siteCustomDomainNamespaceLister implements the SiteCustomDomainNamespaceLister
// interface.
type siteCustomDomainNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SiteCustomDomains in the indexer for a given namespace.
func (s siteCustomDomainNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SiteCustomDomain, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SiteCustomDomain))
	})
	return ret, err
}

// Get retrieves the SiteCustomDomain from the indexer for a given namespace and name.
func (s siteCustomDomainNamespaceLister) Get(name string) (*v1alpha1.SiteCustomDomain, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sitecustomdomain"), name)
	}
	return obj.(*v1alpha1.SiteCustomDomain), nil
}
