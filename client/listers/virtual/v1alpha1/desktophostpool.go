/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/virtual/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DesktopHostPoolLister helps list DesktopHostPools.
// All objects returned here must be treated as read-only.
type DesktopHostPoolLister interface {
	// List lists all DesktopHostPools in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DesktopHostPool, err error)
	// DesktopHostPools returns an object that can list and get DesktopHostPools.
	DesktopHostPools(namespace string) DesktopHostPoolNamespaceLister
	DesktopHostPoolListerExpansion
}

// desktopHostPoolLister implements the DesktopHostPoolLister interface.
type desktopHostPoolLister struct {
	indexer cache.Indexer
}

// NewDesktopHostPoolLister returns a new DesktopHostPoolLister.
func NewDesktopHostPoolLister(indexer cache.Indexer) DesktopHostPoolLister {
	return &desktopHostPoolLister{indexer: indexer}
}

// List lists all DesktopHostPools in the indexer.
func (s *desktopHostPoolLister) List(selector labels.Selector) (ret []*v1alpha1.DesktopHostPool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DesktopHostPool))
	})
	return ret, err
}

// DesktopHostPools returns an object that can list and get DesktopHostPools.
func (s *desktopHostPoolLister) DesktopHostPools(namespace string) DesktopHostPoolNamespaceLister {
	return desktopHostPoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DesktopHostPoolNamespaceLister helps list and get DesktopHostPools.
// All objects returned here must be treated as read-only.
type DesktopHostPoolNamespaceLister interface {
	// List lists all DesktopHostPools in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DesktopHostPool, err error)
	// Get retrieves the DesktopHostPool from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DesktopHostPool, error)
	DesktopHostPoolNamespaceListerExpansion
}

// desktopHostPoolNamespaceLister implements the DesktopHostPoolNamespaceLister
// interface.
type desktopHostPoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DesktopHostPools in the indexer for a given namespace.
func (s desktopHostPoolNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DesktopHostPool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DesktopHostPool))
	})
	return ret, err
}

// Get retrieves the DesktopHostPool from the indexer for a given namespace and name.
func (s desktopHostPoolNamespaceLister) Get(name string) (*v1alpha1.DesktopHostPool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("desktophostpool"), name)
	}
	return obj.(*v1alpha1.DesktopHostPool), nil
}
