/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/virtual/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HubBGPConnectionLister helps list HubBGPConnections.
// All objects returned here must be treated as read-only.
type HubBGPConnectionLister interface {
	// List lists all HubBGPConnections in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HubBGPConnection, err error)
	// HubBGPConnections returns an object that can list and get HubBGPConnections.
	HubBGPConnections(namespace string) HubBGPConnectionNamespaceLister
	HubBGPConnectionListerExpansion
}

// hubBGPConnectionLister implements the HubBGPConnectionLister interface.
type hubBGPConnectionLister struct {
	indexer cache.Indexer
}

// NewHubBGPConnectionLister returns a new HubBGPConnectionLister.
func NewHubBGPConnectionLister(indexer cache.Indexer) HubBGPConnectionLister {
	return &hubBGPConnectionLister{indexer: indexer}
}

// List lists all HubBGPConnections in the indexer.
func (s *hubBGPConnectionLister) List(selector labels.Selector) (ret []*v1alpha1.HubBGPConnection, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HubBGPConnection))
	})
	return ret, err
}

// HubBGPConnections returns an object that can list and get HubBGPConnections.
func (s *hubBGPConnectionLister) HubBGPConnections(namespace string) HubBGPConnectionNamespaceLister {
	return hubBGPConnectionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HubBGPConnectionNamespaceLister helps list and get HubBGPConnections.
// All objects returned here must be treated as read-only.
type HubBGPConnectionNamespaceLister interface {
	// List lists all HubBGPConnections in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HubBGPConnection, err error)
	// Get retrieves the HubBGPConnection from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HubBGPConnection, error)
	HubBGPConnectionNamespaceListerExpansion
}

// hubBGPConnectionNamespaceLister implements the HubBGPConnectionNamespaceLister
// interface.
type hubBGPConnectionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HubBGPConnections in the indexer for a given namespace.
func (s hubBGPConnectionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HubBGPConnection, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HubBGPConnection))
	})
	return ret, err
}

// Get retrieves the HubBGPConnection from the indexer for a given namespace and name.
func (s hubBGPConnectionNamespaceLister) Get(name string) (*v1alpha1.HubBGPConnection, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hubbgpconnection"), name)
	}
	return obj.(*v1alpha1.HubBGPConnection), nil
}
