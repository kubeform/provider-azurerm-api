/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/virtual/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MachineDataDiskAttachmentLister helps list MachineDataDiskAttachments.
// All objects returned here must be treated as read-only.
type MachineDataDiskAttachmentLister interface {
	// List lists all MachineDataDiskAttachments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MachineDataDiskAttachment, err error)
	// MachineDataDiskAttachments returns an object that can list and get MachineDataDiskAttachments.
	MachineDataDiskAttachments(namespace string) MachineDataDiskAttachmentNamespaceLister
	MachineDataDiskAttachmentListerExpansion
}

// machineDataDiskAttachmentLister implements the MachineDataDiskAttachmentLister interface.
type machineDataDiskAttachmentLister struct {
	indexer cache.Indexer
}

// NewMachineDataDiskAttachmentLister returns a new MachineDataDiskAttachmentLister.
func NewMachineDataDiskAttachmentLister(indexer cache.Indexer) MachineDataDiskAttachmentLister {
	return &machineDataDiskAttachmentLister{indexer: indexer}
}

// List lists all MachineDataDiskAttachments in the indexer.
func (s *machineDataDiskAttachmentLister) List(selector labels.Selector) (ret []*v1alpha1.MachineDataDiskAttachment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MachineDataDiskAttachment))
	})
	return ret, err
}

// MachineDataDiskAttachments returns an object that can list and get MachineDataDiskAttachments.
func (s *machineDataDiskAttachmentLister) MachineDataDiskAttachments(namespace string) MachineDataDiskAttachmentNamespaceLister {
	return machineDataDiskAttachmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MachineDataDiskAttachmentNamespaceLister helps list and get MachineDataDiskAttachments.
// All objects returned here must be treated as read-only.
type MachineDataDiskAttachmentNamespaceLister interface {
	// List lists all MachineDataDiskAttachments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MachineDataDiskAttachment, err error)
	// Get retrieves the MachineDataDiskAttachment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MachineDataDiskAttachment, error)
	MachineDataDiskAttachmentNamespaceListerExpansion
}

// machineDataDiskAttachmentNamespaceLister implements the MachineDataDiskAttachmentNamespaceLister
// interface.
type machineDataDiskAttachmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MachineDataDiskAttachments in the indexer for a given namespace.
func (s machineDataDiskAttachmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MachineDataDiskAttachment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MachineDataDiskAttachment))
	})
	return ret, err
}

// Get retrieves the MachineDataDiskAttachment from the indexer for a given namespace and name.
func (s machineDataDiskAttachmentNamespaceLister) Get(name string) (*v1alpha1.MachineDataDiskAttachment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("machinedatadiskattachment"), name)
	}
	return obj.(*v1alpha1.MachineDataDiskAttachment), nil
}
