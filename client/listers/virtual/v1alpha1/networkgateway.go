/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/virtual/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NetworkGatewayLister helps list NetworkGateways.
// All objects returned here must be treated as read-only.
type NetworkGatewayLister interface {
	// List lists all NetworkGateways in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkGateway, err error)
	// NetworkGateways returns an object that can list and get NetworkGateways.
	NetworkGateways(namespace string) NetworkGatewayNamespaceLister
	NetworkGatewayListerExpansion
}

// networkGatewayLister implements the NetworkGatewayLister interface.
type networkGatewayLister struct {
	indexer cache.Indexer
}

// NewNetworkGatewayLister returns a new NetworkGatewayLister.
func NewNetworkGatewayLister(indexer cache.Indexer) NetworkGatewayLister {
	return &networkGatewayLister{indexer: indexer}
}

// List lists all NetworkGateways in the indexer.
func (s *networkGatewayLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkGateway, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkGateway))
	})
	return ret, err
}

// NetworkGateways returns an object that can list and get NetworkGateways.
func (s *networkGatewayLister) NetworkGateways(namespace string) NetworkGatewayNamespaceLister {
	return networkGatewayNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NetworkGatewayNamespaceLister helps list and get NetworkGateways.
// All objects returned here must be treated as read-only.
type NetworkGatewayNamespaceLister interface {
	// List lists all NetworkGateways in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkGateway, err error)
	// Get retrieves the NetworkGateway from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NetworkGateway, error)
	NetworkGatewayNamespaceListerExpansion
}

// networkGatewayNamespaceLister implements the NetworkGatewayNamespaceLister
// interface.
type networkGatewayNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NetworkGateways in the indexer for a given namespace.
func (s networkGatewayNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkGateway, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkGateway))
	})
	return ret, err
}

// Get retrieves the NetworkGateway from the indexer for a given namespace and name.
func (s networkGatewayNamespaceLister) Get(name string) (*v1alpha1.NetworkGateway, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("networkgateway"), name)
	}
	return obj.(*v1alpha1.NetworkGateway), nil
}
