/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/virtual/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HubRouteTableRouteLister helps list HubRouteTableRoutes.
// All objects returned here must be treated as read-only.
type HubRouteTableRouteLister interface {
	// List lists all HubRouteTableRoutes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HubRouteTableRoute, err error)
	// HubRouteTableRoutes returns an object that can list and get HubRouteTableRoutes.
	HubRouteTableRoutes(namespace string) HubRouteTableRouteNamespaceLister
	HubRouteTableRouteListerExpansion
}

// hubRouteTableRouteLister implements the HubRouteTableRouteLister interface.
type hubRouteTableRouteLister struct {
	indexer cache.Indexer
}

// NewHubRouteTableRouteLister returns a new HubRouteTableRouteLister.
func NewHubRouteTableRouteLister(indexer cache.Indexer) HubRouteTableRouteLister {
	return &hubRouteTableRouteLister{indexer: indexer}
}

// List lists all HubRouteTableRoutes in the indexer.
func (s *hubRouteTableRouteLister) List(selector labels.Selector) (ret []*v1alpha1.HubRouteTableRoute, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HubRouteTableRoute))
	})
	return ret, err
}

// HubRouteTableRoutes returns an object that can list and get HubRouteTableRoutes.
func (s *hubRouteTableRouteLister) HubRouteTableRoutes(namespace string) HubRouteTableRouteNamespaceLister {
	return hubRouteTableRouteNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HubRouteTableRouteNamespaceLister helps list and get HubRouteTableRoutes.
// All objects returned here must be treated as read-only.
type HubRouteTableRouteNamespaceLister interface {
	// List lists all HubRouteTableRoutes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HubRouteTableRoute, err error)
	// Get retrieves the HubRouteTableRoute from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HubRouteTableRoute, error)
	HubRouteTableRouteNamespaceListerExpansion
}

// hubRouteTableRouteNamespaceLister implements the HubRouteTableRouteNamespaceLister
// interface.
type hubRouteTableRouteNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HubRouteTableRoutes in the indexer for a given namespace.
func (s hubRouteTableRouteNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HubRouteTableRoute, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HubRouteTableRoute))
	})
	return ret, err
}

// Get retrieves the HubRouteTableRoute from the indexer for a given namespace and name.
func (s hubRouteTableRouteNamespaceLister) Get(name string) (*v1alpha1.HubRouteTableRoute, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hubroutetableroute"), name)
	}
	return obj.(*v1alpha1.HubRouteTableRoute), nil
}
