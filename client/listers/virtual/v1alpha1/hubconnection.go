/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/virtual/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HubConnectionLister helps list HubConnections.
// All objects returned here must be treated as read-only.
type HubConnectionLister interface {
	// List lists all HubConnections in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HubConnection, err error)
	// HubConnections returns an object that can list and get HubConnections.
	HubConnections(namespace string) HubConnectionNamespaceLister
	HubConnectionListerExpansion
}

// hubConnectionLister implements the HubConnectionLister interface.
type hubConnectionLister struct {
	indexer cache.Indexer
}

// NewHubConnectionLister returns a new HubConnectionLister.
func NewHubConnectionLister(indexer cache.Indexer) HubConnectionLister {
	return &hubConnectionLister{indexer: indexer}
}

// List lists all HubConnections in the indexer.
func (s *hubConnectionLister) List(selector labels.Selector) (ret []*v1alpha1.HubConnection, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HubConnection))
	})
	return ret, err
}

// HubConnections returns an object that can list and get HubConnections.
func (s *hubConnectionLister) HubConnections(namespace string) HubConnectionNamespaceLister {
	return hubConnectionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HubConnectionNamespaceLister helps list and get HubConnections.
// All objects returned here must be treated as read-only.
type HubConnectionNamespaceLister interface {
	// List lists all HubConnections in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HubConnection, err error)
	// Get retrieves the HubConnection from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HubConnection, error)
	HubConnectionNamespaceListerExpansion
}

// hubConnectionNamespaceLister implements the HubConnectionNamespaceLister
// interface.
type hubConnectionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HubConnections in the indexer for a given namespace.
func (s hubConnectionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HubConnection, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HubConnection))
	})
	return ret, err
}

// Get retrieves the HubConnection from the indexer for a given namespace and name.
func (s hubConnectionNamespaceLister) Get(name string) (*v1alpha1.HubConnection, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hubconnection"), name)
	}
	return obj.(*v1alpha1.HubConnection), nil
}
