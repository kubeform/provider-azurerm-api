/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/virtual/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NetworkGatewayConnectionLister helps list NetworkGatewayConnections.
// All objects returned here must be treated as read-only.
type NetworkGatewayConnectionLister interface {
	// List lists all NetworkGatewayConnections in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkGatewayConnection, err error)
	// NetworkGatewayConnections returns an object that can list and get NetworkGatewayConnections.
	NetworkGatewayConnections(namespace string) NetworkGatewayConnectionNamespaceLister
	NetworkGatewayConnectionListerExpansion
}

// networkGatewayConnectionLister implements the NetworkGatewayConnectionLister interface.
type networkGatewayConnectionLister struct {
	indexer cache.Indexer
}

// NewNetworkGatewayConnectionLister returns a new NetworkGatewayConnectionLister.
func NewNetworkGatewayConnectionLister(indexer cache.Indexer) NetworkGatewayConnectionLister {
	return &networkGatewayConnectionLister{indexer: indexer}
}

// List lists all NetworkGatewayConnections in the indexer.
func (s *networkGatewayConnectionLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkGatewayConnection, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkGatewayConnection))
	})
	return ret, err
}

// NetworkGatewayConnections returns an object that can list and get NetworkGatewayConnections.
func (s *networkGatewayConnectionLister) NetworkGatewayConnections(namespace string) NetworkGatewayConnectionNamespaceLister {
	return networkGatewayConnectionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NetworkGatewayConnectionNamespaceLister helps list and get NetworkGatewayConnections.
// All objects returned here must be treated as read-only.
type NetworkGatewayConnectionNamespaceLister interface {
	// List lists all NetworkGatewayConnections in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkGatewayConnection, err error)
	// Get retrieves the NetworkGatewayConnection from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NetworkGatewayConnection, error)
	NetworkGatewayConnectionNamespaceListerExpansion
}

// networkGatewayConnectionNamespaceLister implements the NetworkGatewayConnectionNamespaceLister
// interface.
type networkGatewayConnectionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NetworkGatewayConnections in the indexer for a given namespace.
func (s networkGatewayConnectionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkGatewayConnection, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkGatewayConnection))
	})
	return ret, err
}

// Get retrieves the NetworkGatewayConnection from the indexer for a given namespace and name.
func (s networkGatewayConnectionNamespaceLister) Get(name string) (*v1alpha1.NetworkGatewayConnection, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("networkgatewayconnection"), name)
	}
	return obj.(*v1alpha1.NetworkGatewayConnection), nil
}
