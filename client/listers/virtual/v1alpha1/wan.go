/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/virtual/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WanLister helps list Wans.
// All objects returned here must be treated as read-only.
type WanLister interface {
	// List lists all Wans in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Wan, err error)
	// Wans returns an object that can list and get Wans.
	Wans(namespace string) WanNamespaceLister
	WanListerExpansion
}

// wanLister implements the WanLister interface.
type wanLister struct {
	indexer cache.Indexer
}

// NewWanLister returns a new WanLister.
func NewWanLister(indexer cache.Indexer) WanLister {
	return &wanLister{indexer: indexer}
}

// List lists all Wans in the indexer.
func (s *wanLister) List(selector labels.Selector) (ret []*v1alpha1.Wan, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Wan))
	})
	return ret, err
}

// Wans returns an object that can list and get Wans.
func (s *wanLister) Wans(namespace string) WanNamespaceLister {
	return wanNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WanNamespaceLister helps list and get Wans.
// All objects returned here must be treated as read-only.
type WanNamespaceLister interface {
	// List lists all Wans in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Wan, err error)
	// Get retrieves the Wan from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Wan, error)
	WanNamespaceListerExpansion
}

// wanNamespaceLister implements the WanNamespaceLister
// interface.
type wanNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Wans in the indexer for a given namespace.
func (s wanNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Wan, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Wan))
	})
	return ret, err
}

// Get retrieves the Wan from the indexer for a given namespace and name.
func (s wanNamespaceLister) Get(name string) (*v1alpha1.Wan, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("wan"), name)
	}
	return obj.(*v1alpha1.Wan), nil
}
