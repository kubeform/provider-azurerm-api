/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/security/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CenterAutomationLister helps list CenterAutomations.
// All objects returned here must be treated as read-only.
type CenterAutomationLister interface {
	// List lists all CenterAutomations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CenterAutomation, err error)
	// CenterAutomations returns an object that can list and get CenterAutomations.
	CenterAutomations(namespace string) CenterAutomationNamespaceLister
	CenterAutomationListerExpansion
}

// centerAutomationLister implements the CenterAutomationLister interface.
type centerAutomationLister struct {
	indexer cache.Indexer
}

// NewCenterAutomationLister returns a new CenterAutomationLister.
func NewCenterAutomationLister(indexer cache.Indexer) CenterAutomationLister {
	return &centerAutomationLister{indexer: indexer}
}

// List lists all CenterAutomations in the indexer.
func (s *centerAutomationLister) List(selector labels.Selector) (ret []*v1alpha1.CenterAutomation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CenterAutomation))
	})
	return ret, err
}

// CenterAutomations returns an object that can list and get CenterAutomations.
func (s *centerAutomationLister) CenterAutomations(namespace string) CenterAutomationNamespaceLister {
	return centerAutomationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CenterAutomationNamespaceLister helps list and get CenterAutomations.
// All objects returned here must be treated as read-only.
type CenterAutomationNamespaceLister interface {
	// List lists all CenterAutomations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CenterAutomation, err error)
	// Get retrieves the CenterAutomation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CenterAutomation, error)
	CenterAutomationNamespaceListerExpansion
}

// centerAutomationNamespaceLister implements the CenterAutomationNamespaceLister
// interface.
type centerAutomationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CenterAutomations in the indexer for a given namespace.
func (s centerAutomationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CenterAutomation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CenterAutomation))
	})
	return ret, err
}

// Get retrieves the CenterAutomation from the indexer for a given namespace and name.
func (s centerAutomationNamespaceLister) Get(name string) (*v1alpha1.CenterAutomation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("centerautomation"), name)
	}
	return obj.(*v1alpha1.CenterAutomation), nil
}
