/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/security/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CenterAssessmentMetadataLister helps list CenterAssessmentMetadatas.
// All objects returned here must be treated as read-only.
type CenterAssessmentMetadataLister interface {
	// List lists all CenterAssessmentMetadatas in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CenterAssessmentMetadata, err error)
	// CenterAssessmentMetadatas returns an object that can list and get CenterAssessmentMetadatas.
	CenterAssessmentMetadatas(namespace string) CenterAssessmentMetadataNamespaceLister
	CenterAssessmentMetadataListerExpansion
}

// centerAssessmentMetadataLister implements the CenterAssessmentMetadataLister interface.
type centerAssessmentMetadataLister struct {
	indexer cache.Indexer
}

// NewCenterAssessmentMetadataLister returns a new CenterAssessmentMetadataLister.
func NewCenterAssessmentMetadataLister(indexer cache.Indexer) CenterAssessmentMetadataLister {
	return &centerAssessmentMetadataLister{indexer: indexer}
}

// List lists all CenterAssessmentMetadatas in the indexer.
func (s *centerAssessmentMetadataLister) List(selector labels.Selector) (ret []*v1alpha1.CenterAssessmentMetadata, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CenterAssessmentMetadata))
	})
	return ret, err
}

// CenterAssessmentMetadatas returns an object that can list and get CenterAssessmentMetadatas.
func (s *centerAssessmentMetadataLister) CenterAssessmentMetadatas(namespace string) CenterAssessmentMetadataNamespaceLister {
	return centerAssessmentMetadataNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CenterAssessmentMetadataNamespaceLister helps list and get CenterAssessmentMetadatas.
// All objects returned here must be treated as read-only.
type CenterAssessmentMetadataNamespaceLister interface {
	// List lists all CenterAssessmentMetadatas in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CenterAssessmentMetadata, err error)
	// Get retrieves the CenterAssessmentMetadata from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CenterAssessmentMetadata, error)
	CenterAssessmentMetadataNamespaceListerExpansion
}

// centerAssessmentMetadataNamespaceLister implements the CenterAssessmentMetadataNamespaceLister
// interface.
type centerAssessmentMetadataNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CenterAssessmentMetadatas in the indexer for a given namespace.
func (s centerAssessmentMetadataNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CenterAssessmentMetadata, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CenterAssessmentMetadata))
	})
	return ret, err
}

// Get retrieves the CenterAssessmentMetadata from the indexer for a given namespace and name.
func (s centerAssessmentMetadataNamespaceLister) Get(name string) (*v1alpha1.CenterAssessmentMetadata, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("centerassessmentmetadata"), name)
	}
	return obj.(*v1alpha1.CenterAssessmentMetadata), nil
}
