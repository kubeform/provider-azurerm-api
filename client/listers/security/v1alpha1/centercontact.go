/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/security/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CenterContactLister helps list CenterContacts.
// All objects returned here must be treated as read-only.
type CenterContactLister interface {
	// List lists all CenterContacts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CenterContact, err error)
	// CenterContacts returns an object that can list and get CenterContacts.
	CenterContacts(namespace string) CenterContactNamespaceLister
	CenterContactListerExpansion
}

// centerContactLister implements the CenterContactLister interface.
type centerContactLister struct {
	indexer cache.Indexer
}

// NewCenterContactLister returns a new CenterContactLister.
func NewCenterContactLister(indexer cache.Indexer) CenterContactLister {
	return &centerContactLister{indexer: indexer}
}

// List lists all CenterContacts in the indexer.
func (s *centerContactLister) List(selector labels.Selector) (ret []*v1alpha1.CenterContact, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CenterContact))
	})
	return ret, err
}

// CenterContacts returns an object that can list and get CenterContacts.
func (s *centerContactLister) CenterContacts(namespace string) CenterContactNamespaceLister {
	return centerContactNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CenterContactNamespaceLister helps list and get CenterContacts.
// All objects returned here must be treated as read-only.
type CenterContactNamespaceLister interface {
	// List lists all CenterContacts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CenterContact, err error)
	// Get retrieves the CenterContact from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CenterContact, error)
	CenterContactNamespaceListerExpansion
}

// centerContactNamespaceLister implements the CenterContactNamespaceLister
// interface.
type centerContactNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CenterContacts in the indexer for a given namespace.
func (s centerContactNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CenterContact, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CenterContact))
	})
	return ret, err
}

// Get retrieves the CenterContact from the indexer for a given namespace and name.
func (s centerContactNamespaceLister) Get(name string) (*v1alpha1.CenterContact, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("centercontact"), name)
	}
	return obj.(*v1alpha1.CenterContact), nil
}
