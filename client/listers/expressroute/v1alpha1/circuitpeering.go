/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/expressroute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CircuitPeeringLister helps list CircuitPeerings.
// All objects returned here must be treated as read-only.
type CircuitPeeringLister interface {
	// List lists all CircuitPeerings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CircuitPeering, err error)
	// CircuitPeerings returns an object that can list and get CircuitPeerings.
	CircuitPeerings(namespace string) CircuitPeeringNamespaceLister
	CircuitPeeringListerExpansion
}

// circuitPeeringLister implements the CircuitPeeringLister interface.
type circuitPeeringLister struct {
	indexer cache.Indexer
}

// NewCircuitPeeringLister returns a new CircuitPeeringLister.
func NewCircuitPeeringLister(indexer cache.Indexer) CircuitPeeringLister {
	return &circuitPeeringLister{indexer: indexer}
}

// List lists all CircuitPeerings in the indexer.
func (s *circuitPeeringLister) List(selector labels.Selector) (ret []*v1alpha1.CircuitPeering, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CircuitPeering))
	})
	return ret, err
}

// CircuitPeerings returns an object that can list and get CircuitPeerings.
func (s *circuitPeeringLister) CircuitPeerings(namespace string) CircuitPeeringNamespaceLister {
	return circuitPeeringNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CircuitPeeringNamespaceLister helps list and get CircuitPeerings.
// All objects returned here must be treated as read-only.
type CircuitPeeringNamespaceLister interface {
	// List lists all CircuitPeerings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CircuitPeering, err error)
	// Get retrieves the CircuitPeering from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CircuitPeering, error)
	CircuitPeeringNamespaceListerExpansion
}

// circuitPeeringNamespaceLister implements the CircuitPeeringNamespaceLister
// interface.
type circuitPeeringNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CircuitPeerings in the indexer for a given namespace.
func (s circuitPeeringNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CircuitPeering, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CircuitPeering))
	})
	return ret, err
}

// Get retrieves the CircuitPeering from the indexer for a given namespace and name.
func (s circuitPeeringNamespaceLister) Get(name string) (*v1alpha1.CircuitPeering, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("circuitpeering"), name)
	}
	return obj.(*v1alpha1.CircuitPeering), nil
}
