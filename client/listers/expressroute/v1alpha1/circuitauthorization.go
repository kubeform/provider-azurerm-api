/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/expressroute/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CircuitAuthorizationLister helps list CircuitAuthorizations.
// All objects returned here must be treated as read-only.
type CircuitAuthorizationLister interface {
	// List lists all CircuitAuthorizations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CircuitAuthorization, err error)
	// CircuitAuthorizations returns an object that can list and get CircuitAuthorizations.
	CircuitAuthorizations(namespace string) CircuitAuthorizationNamespaceLister
	CircuitAuthorizationListerExpansion
}

// circuitAuthorizationLister implements the CircuitAuthorizationLister interface.
type circuitAuthorizationLister struct {
	indexer cache.Indexer
}

// NewCircuitAuthorizationLister returns a new CircuitAuthorizationLister.
func NewCircuitAuthorizationLister(indexer cache.Indexer) CircuitAuthorizationLister {
	return &circuitAuthorizationLister{indexer: indexer}
}

// List lists all CircuitAuthorizations in the indexer.
func (s *circuitAuthorizationLister) List(selector labels.Selector) (ret []*v1alpha1.CircuitAuthorization, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CircuitAuthorization))
	})
	return ret, err
}

// CircuitAuthorizations returns an object that can list and get CircuitAuthorizations.
func (s *circuitAuthorizationLister) CircuitAuthorizations(namespace string) CircuitAuthorizationNamespaceLister {
	return circuitAuthorizationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CircuitAuthorizationNamespaceLister helps list and get CircuitAuthorizations.
// All objects returned here must be treated as read-only.
type CircuitAuthorizationNamespaceLister interface {
	// List lists all CircuitAuthorizations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CircuitAuthorization, err error)
	// Get retrieves the CircuitAuthorization from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CircuitAuthorization, error)
	CircuitAuthorizationNamespaceListerExpansion
}

// circuitAuthorizationNamespaceLister implements the CircuitAuthorizationNamespaceLister
// interface.
type circuitAuthorizationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CircuitAuthorizations in the indexer for a given namespace.
func (s circuitAuthorizationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CircuitAuthorization, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CircuitAuthorization))
	})
	return ret, err
}

// Get retrieves the CircuitAuthorization from the indexer for a given namespace and name.
func (s circuitAuthorizationNamespaceLister) Get(name string) (*v1alpha1.CircuitAuthorization, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("circuitauthorization"), name)
	}
	return obj.(*v1alpha1.CircuitAuthorization), nil
}
