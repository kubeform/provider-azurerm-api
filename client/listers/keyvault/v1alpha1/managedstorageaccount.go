/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/keyvault/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ManagedStorageAccountLister helps list ManagedStorageAccounts.
// All objects returned here must be treated as read-only.
type ManagedStorageAccountLister interface {
	// List lists all ManagedStorageAccounts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagedStorageAccount, err error)
	// ManagedStorageAccounts returns an object that can list and get ManagedStorageAccounts.
	ManagedStorageAccounts(namespace string) ManagedStorageAccountNamespaceLister
	ManagedStorageAccountListerExpansion
}

// managedStorageAccountLister implements the ManagedStorageAccountLister interface.
type managedStorageAccountLister struct {
	indexer cache.Indexer
}

// NewManagedStorageAccountLister returns a new ManagedStorageAccountLister.
func NewManagedStorageAccountLister(indexer cache.Indexer) ManagedStorageAccountLister {
	return &managedStorageAccountLister{indexer: indexer}
}

// List lists all ManagedStorageAccounts in the indexer.
func (s *managedStorageAccountLister) List(selector labels.Selector) (ret []*v1alpha1.ManagedStorageAccount, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagedStorageAccount))
	})
	return ret, err
}

// ManagedStorageAccounts returns an object that can list and get ManagedStorageAccounts.
func (s *managedStorageAccountLister) ManagedStorageAccounts(namespace string) ManagedStorageAccountNamespaceLister {
	return managedStorageAccountNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManagedStorageAccountNamespaceLister helps list and get ManagedStorageAccounts.
// All objects returned here must be treated as read-only.
type ManagedStorageAccountNamespaceLister interface {
	// List lists all ManagedStorageAccounts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagedStorageAccount, err error)
	// Get retrieves the ManagedStorageAccount from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ManagedStorageAccount, error)
	ManagedStorageAccountNamespaceListerExpansion
}

// managedStorageAccountNamespaceLister implements the ManagedStorageAccountNamespaceLister
// interface.
type managedStorageAccountNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManagedStorageAccounts in the indexer for a given namespace.
func (s managedStorageAccountNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ManagedStorageAccount, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagedStorageAccount))
	})
	return ret, err
}

// Get retrieves the ManagedStorageAccount from the indexer for a given namespace and name.
func (s managedStorageAccountNamespaceLister) Get(name string) (*v1alpha1.ManagedStorageAccount, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("managedstorageaccount"), name)
	}
	return obj.(*v1alpha1.ManagedStorageAccount), nil
}
