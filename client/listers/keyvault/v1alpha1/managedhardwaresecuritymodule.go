/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/keyvault/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ManagedHardwareSecurityModuleLister helps list ManagedHardwareSecurityModules.
// All objects returned here must be treated as read-only.
type ManagedHardwareSecurityModuleLister interface {
	// List lists all ManagedHardwareSecurityModules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagedHardwareSecurityModule, err error)
	// ManagedHardwareSecurityModules returns an object that can list and get ManagedHardwareSecurityModules.
	ManagedHardwareSecurityModules(namespace string) ManagedHardwareSecurityModuleNamespaceLister
	ManagedHardwareSecurityModuleListerExpansion
}

// managedHardwareSecurityModuleLister implements the ManagedHardwareSecurityModuleLister interface.
type managedHardwareSecurityModuleLister struct {
	indexer cache.Indexer
}

// NewManagedHardwareSecurityModuleLister returns a new ManagedHardwareSecurityModuleLister.
func NewManagedHardwareSecurityModuleLister(indexer cache.Indexer) ManagedHardwareSecurityModuleLister {
	return &managedHardwareSecurityModuleLister{indexer: indexer}
}

// List lists all ManagedHardwareSecurityModules in the indexer.
func (s *managedHardwareSecurityModuleLister) List(selector labels.Selector) (ret []*v1alpha1.ManagedHardwareSecurityModule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagedHardwareSecurityModule))
	})
	return ret, err
}

// ManagedHardwareSecurityModules returns an object that can list and get ManagedHardwareSecurityModules.
func (s *managedHardwareSecurityModuleLister) ManagedHardwareSecurityModules(namespace string) ManagedHardwareSecurityModuleNamespaceLister {
	return managedHardwareSecurityModuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ManagedHardwareSecurityModuleNamespaceLister helps list and get ManagedHardwareSecurityModules.
// All objects returned here must be treated as read-only.
type ManagedHardwareSecurityModuleNamespaceLister interface {
	// List lists all ManagedHardwareSecurityModules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ManagedHardwareSecurityModule, err error)
	// Get retrieves the ManagedHardwareSecurityModule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ManagedHardwareSecurityModule, error)
	ManagedHardwareSecurityModuleNamespaceListerExpansion
}

// managedHardwareSecurityModuleNamespaceLister implements the ManagedHardwareSecurityModuleNamespaceLister
// interface.
type managedHardwareSecurityModuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ManagedHardwareSecurityModules in the indexer for a given namespace.
func (s managedHardwareSecurityModuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ManagedHardwareSecurityModule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ManagedHardwareSecurityModule))
	})
	return ret, err
}

// Get retrieves the ManagedHardwareSecurityModule from the indexer for a given namespace and name.
func (s managedHardwareSecurityModuleNamespaceLister) Get(name string) (*v1alpha1.ManagedHardwareSecurityModule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("managedhardwaresecuritymodule"), name)
	}
	return obj.(*v1alpha1.ManagedHardwareSecurityModule), nil
}
