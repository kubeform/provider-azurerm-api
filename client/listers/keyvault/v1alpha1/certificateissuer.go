/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/keyvault/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CertificateIssuerLister helps list CertificateIssuers.
// All objects returned here must be treated as read-only.
type CertificateIssuerLister interface {
	// List lists all CertificateIssuers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CertificateIssuer, err error)
	// CertificateIssuers returns an object that can list and get CertificateIssuers.
	CertificateIssuers(namespace string) CertificateIssuerNamespaceLister
	CertificateIssuerListerExpansion
}

// certificateIssuerLister implements the CertificateIssuerLister interface.
type certificateIssuerLister struct {
	indexer cache.Indexer
}

// NewCertificateIssuerLister returns a new CertificateIssuerLister.
func NewCertificateIssuerLister(indexer cache.Indexer) CertificateIssuerLister {
	return &certificateIssuerLister{indexer: indexer}
}

// List lists all CertificateIssuers in the indexer.
func (s *certificateIssuerLister) List(selector labels.Selector) (ret []*v1alpha1.CertificateIssuer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CertificateIssuer))
	})
	return ret, err
}

// CertificateIssuers returns an object that can list and get CertificateIssuers.
func (s *certificateIssuerLister) CertificateIssuers(namespace string) CertificateIssuerNamespaceLister {
	return certificateIssuerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CertificateIssuerNamespaceLister helps list and get CertificateIssuers.
// All objects returned here must be treated as read-only.
type CertificateIssuerNamespaceLister interface {
	// List lists all CertificateIssuers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CertificateIssuer, err error)
	// Get retrieves the CertificateIssuer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CertificateIssuer, error)
	CertificateIssuerNamespaceListerExpansion
}

// certificateIssuerNamespaceLister implements the CertificateIssuerNamespaceLister
// interface.
type certificateIssuerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CertificateIssuers in the indexer for a given namespace.
func (s certificateIssuerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CertificateIssuer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CertificateIssuer))
	})
	return ret, err
}

// Get retrieves the CertificateIssuer from the indexer for a given namespace and name.
func (s certificateIssuerNamespaceLister) Get(name string) (*v1alpha1.CertificateIssuer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("certificateissuer"), name)
	}
	return obj.(*v1alpha1.CertificateIssuer), nil
}
