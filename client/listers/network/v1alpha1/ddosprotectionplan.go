/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/network/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DdosProtectionPlanLister helps list DdosProtectionPlans.
// All objects returned here must be treated as read-only.
type DdosProtectionPlanLister interface {
	// List lists all DdosProtectionPlans in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DdosProtectionPlan, err error)
	// DdosProtectionPlans returns an object that can list and get DdosProtectionPlans.
	DdosProtectionPlans(namespace string) DdosProtectionPlanNamespaceLister
	DdosProtectionPlanListerExpansion
}

// ddosProtectionPlanLister implements the DdosProtectionPlanLister interface.
type ddosProtectionPlanLister struct {
	indexer cache.Indexer
}

// NewDdosProtectionPlanLister returns a new DdosProtectionPlanLister.
func NewDdosProtectionPlanLister(indexer cache.Indexer) DdosProtectionPlanLister {
	return &ddosProtectionPlanLister{indexer: indexer}
}

// List lists all DdosProtectionPlans in the indexer.
func (s *ddosProtectionPlanLister) List(selector labels.Selector) (ret []*v1alpha1.DdosProtectionPlan, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DdosProtectionPlan))
	})
	return ret, err
}

// DdosProtectionPlans returns an object that can list and get DdosProtectionPlans.
func (s *ddosProtectionPlanLister) DdosProtectionPlans(namespace string) DdosProtectionPlanNamespaceLister {
	return ddosProtectionPlanNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DdosProtectionPlanNamespaceLister helps list and get DdosProtectionPlans.
// All objects returned here must be treated as read-only.
type DdosProtectionPlanNamespaceLister interface {
	// List lists all DdosProtectionPlans in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DdosProtectionPlan, err error)
	// Get retrieves the DdosProtectionPlan from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DdosProtectionPlan, error)
	DdosProtectionPlanNamespaceListerExpansion
}

// ddosProtectionPlanNamespaceLister implements the DdosProtectionPlanNamespaceLister
// interface.
type ddosProtectionPlanNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DdosProtectionPlans in the indexer for a given namespace.
func (s ddosProtectionPlanNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DdosProtectionPlan, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DdosProtectionPlan))
	})
	return ret, err
}

// Get retrieves the DdosProtectionPlan from the indexer for a given namespace and name.
func (s ddosProtectionPlanNamespaceLister) Get(name string) (*v1alpha1.DdosProtectionPlan, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ddosprotectionplan"), name)
	}
	return obj.(*v1alpha1.DdosProtectionPlan), nil
}
