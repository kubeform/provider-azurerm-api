/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/network/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InterfaceNATRuleAssociationLister helps list InterfaceNATRuleAssociations.
// All objects returned here must be treated as read-only.
type InterfaceNATRuleAssociationLister interface {
	// List lists all InterfaceNATRuleAssociations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InterfaceNATRuleAssociation, err error)
	// InterfaceNATRuleAssociations returns an object that can list and get InterfaceNATRuleAssociations.
	InterfaceNATRuleAssociations(namespace string) InterfaceNATRuleAssociationNamespaceLister
	InterfaceNATRuleAssociationListerExpansion
}

// interfaceNATRuleAssociationLister implements the InterfaceNATRuleAssociationLister interface.
type interfaceNATRuleAssociationLister struct {
	indexer cache.Indexer
}

// NewInterfaceNATRuleAssociationLister returns a new InterfaceNATRuleAssociationLister.
func NewInterfaceNATRuleAssociationLister(indexer cache.Indexer) InterfaceNATRuleAssociationLister {
	return &interfaceNATRuleAssociationLister{indexer: indexer}
}

// List lists all InterfaceNATRuleAssociations in the indexer.
func (s *interfaceNATRuleAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.InterfaceNATRuleAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InterfaceNATRuleAssociation))
	})
	return ret, err
}

// InterfaceNATRuleAssociations returns an object that can list and get InterfaceNATRuleAssociations.
func (s *interfaceNATRuleAssociationLister) InterfaceNATRuleAssociations(namespace string) InterfaceNATRuleAssociationNamespaceLister {
	return interfaceNATRuleAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InterfaceNATRuleAssociationNamespaceLister helps list and get InterfaceNATRuleAssociations.
// All objects returned here must be treated as read-only.
type InterfaceNATRuleAssociationNamespaceLister interface {
	// List lists all InterfaceNATRuleAssociations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InterfaceNATRuleAssociation, err error)
	// Get retrieves the InterfaceNATRuleAssociation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.InterfaceNATRuleAssociation, error)
	InterfaceNATRuleAssociationNamespaceListerExpansion
}

// interfaceNATRuleAssociationNamespaceLister implements the InterfaceNATRuleAssociationNamespaceLister
// interface.
type interfaceNATRuleAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all InterfaceNATRuleAssociations in the indexer for a given namespace.
func (s interfaceNATRuleAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.InterfaceNATRuleAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InterfaceNATRuleAssociation))
	})
	return ret, err
}

// Get retrieves the InterfaceNATRuleAssociation from the indexer for a given namespace and name.
func (s interfaceNATRuleAssociationNamespaceLister) Get(name string) (*v1alpha1.InterfaceNATRuleAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("interfacenatruleassociation"), name)
	}
	return obj.(*v1alpha1.InterfaceNATRuleAssociation), nil
}
