/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/network/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SecurityRuleLister helps list SecurityRules.
// All objects returned here must be treated as read-only.
type SecurityRuleLister interface {
	// List lists all SecurityRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SecurityRule, err error)
	// SecurityRules returns an object that can list and get SecurityRules.
	SecurityRules(namespace string) SecurityRuleNamespaceLister
	SecurityRuleListerExpansion
}

// securityRuleLister implements the SecurityRuleLister interface.
type securityRuleLister struct {
	indexer cache.Indexer
}

// NewSecurityRuleLister returns a new SecurityRuleLister.
func NewSecurityRuleLister(indexer cache.Indexer) SecurityRuleLister {
	return &securityRuleLister{indexer: indexer}
}

// List lists all SecurityRules in the indexer.
func (s *securityRuleLister) List(selector labels.Selector) (ret []*v1alpha1.SecurityRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SecurityRule))
	})
	return ret, err
}

// SecurityRules returns an object that can list and get SecurityRules.
func (s *securityRuleLister) SecurityRules(namespace string) SecurityRuleNamespaceLister {
	return securityRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SecurityRuleNamespaceLister helps list and get SecurityRules.
// All objects returned here must be treated as read-only.
type SecurityRuleNamespaceLister interface {
	// List lists all SecurityRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SecurityRule, err error)
	// Get retrieves the SecurityRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SecurityRule, error)
	SecurityRuleNamespaceListerExpansion
}

// securityRuleNamespaceLister implements the SecurityRuleNamespaceLister
// interface.
type securityRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SecurityRules in the indexer for a given namespace.
func (s securityRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SecurityRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SecurityRule))
	})
	return ret, err
}

// Get retrieves the SecurityRule from the indexer for a given namespace and name.
func (s securityRuleNamespaceLister) Get(name string) (*v1alpha1.SecurityRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("securityrule"), name)
	}
	return obj.(*v1alpha1.SecurityRule), nil
}
