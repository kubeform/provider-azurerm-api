/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/servicebus/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NamespaceNetworkRuleSetLister helps list NamespaceNetworkRuleSets.
// All objects returned here must be treated as read-only.
type NamespaceNetworkRuleSetLister interface {
	// List lists all NamespaceNetworkRuleSets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NamespaceNetworkRuleSet, err error)
	// NamespaceNetworkRuleSets returns an object that can list and get NamespaceNetworkRuleSets.
	NamespaceNetworkRuleSets(namespace string) NamespaceNetworkRuleSetNamespaceLister
	NamespaceNetworkRuleSetListerExpansion
}

// namespaceNetworkRuleSetLister implements the NamespaceNetworkRuleSetLister interface.
type namespaceNetworkRuleSetLister struct {
	indexer cache.Indexer
}

// NewNamespaceNetworkRuleSetLister returns a new NamespaceNetworkRuleSetLister.
func NewNamespaceNetworkRuleSetLister(indexer cache.Indexer) NamespaceNetworkRuleSetLister {
	return &namespaceNetworkRuleSetLister{indexer: indexer}
}

// List lists all NamespaceNetworkRuleSets in the indexer.
func (s *namespaceNetworkRuleSetLister) List(selector labels.Selector) (ret []*v1alpha1.NamespaceNetworkRuleSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NamespaceNetworkRuleSet))
	})
	return ret, err
}

// NamespaceNetworkRuleSets returns an object that can list and get NamespaceNetworkRuleSets.
func (s *namespaceNetworkRuleSetLister) NamespaceNetworkRuleSets(namespace string) NamespaceNetworkRuleSetNamespaceLister {
	return namespaceNetworkRuleSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NamespaceNetworkRuleSetNamespaceLister helps list and get NamespaceNetworkRuleSets.
// All objects returned here must be treated as read-only.
type NamespaceNetworkRuleSetNamespaceLister interface {
	// List lists all NamespaceNetworkRuleSets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NamespaceNetworkRuleSet, err error)
	// Get retrieves the NamespaceNetworkRuleSet from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NamespaceNetworkRuleSet, error)
	NamespaceNetworkRuleSetNamespaceListerExpansion
}

// namespaceNetworkRuleSetNamespaceLister implements the NamespaceNetworkRuleSetNamespaceLister
// interface.
type namespaceNetworkRuleSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NamespaceNetworkRuleSets in the indexer for a given namespace.
func (s namespaceNetworkRuleSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NamespaceNetworkRuleSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NamespaceNetworkRuleSet))
	})
	return ret, err
}

// Get retrieves the NamespaceNetworkRuleSet from the indexer for a given namespace and name.
func (s namespaceNetworkRuleSetNamespaceLister) Get(name string) (*v1alpha1.NamespaceNetworkRuleSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("namespacenetworkruleset"), name)
	}
	return obj.(*v1alpha1.NamespaceNetworkRuleSet), nil
}
