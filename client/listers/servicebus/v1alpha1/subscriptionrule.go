/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/servicebus/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SubscriptionRuleLister helps list SubscriptionRules.
// All objects returned here must be treated as read-only.
type SubscriptionRuleLister interface {
	// List lists all SubscriptionRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SubscriptionRule, err error)
	// SubscriptionRules returns an object that can list and get SubscriptionRules.
	SubscriptionRules(namespace string) SubscriptionRuleNamespaceLister
	SubscriptionRuleListerExpansion
}

// subscriptionRuleLister implements the SubscriptionRuleLister interface.
type subscriptionRuleLister struct {
	indexer cache.Indexer
}

// NewSubscriptionRuleLister returns a new SubscriptionRuleLister.
func NewSubscriptionRuleLister(indexer cache.Indexer) SubscriptionRuleLister {
	return &subscriptionRuleLister{indexer: indexer}
}

// List lists all SubscriptionRules in the indexer.
func (s *subscriptionRuleLister) List(selector labels.Selector) (ret []*v1alpha1.SubscriptionRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SubscriptionRule))
	})
	return ret, err
}

// SubscriptionRules returns an object that can list and get SubscriptionRules.
func (s *subscriptionRuleLister) SubscriptionRules(namespace string) SubscriptionRuleNamespaceLister {
	return subscriptionRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SubscriptionRuleNamespaceLister helps list and get SubscriptionRules.
// All objects returned here must be treated as read-only.
type SubscriptionRuleNamespaceLister interface {
	// List lists all SubscriptionRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SubscriptionRule, err error)
	// Get retrieves the SubscriptionRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SubscriptionRule, error)
	SubscriptionRuleNamespaceListerExpansion
}

// subscriptionRuleNamespaceLister implements the SubscriptionRuleNamespaceLister
// interface.
type subscriptionRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SubscriptionRules in the indexer for a given namespace.
func (s subscriptionRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SubscriptionRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SubscriptionRule))
	})
	return ret, err
}

// Get retrieves the SubscriptionRule from the indexer for a given namespace and name.
func (s subscriptionRuleNamespaceLister) Get(name string) (*v1alpha1.SubscriptionRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("subscriptionrule"), name)
	}
	return obj.(*v1alpha1.SubscriptionRule), nil
}
