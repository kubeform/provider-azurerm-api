/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/servicebus/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TopicAuthorizationRuleLister helps list TopicAuthorizationRules.
// All objects returned here must be treated as read-only.
type TopicAuthorizationRuleLister interface {
	// List lists all TopicAuthorizationRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TopicAuthorizationRule, err error)
	// TopicAuthorizationRules returns an object that can list and get TopicAuthorizationRules.
	TopicAuthorizationRules(namespace string) TopicAuthorizationRuleNamespaceLister
	TopicAuthorizationRuleListerExpansion
}

// topicAuthorizationRuleLister implements the TopicAuthorizationRuleLister interface.
type topicAuthorizationRuleLister struct {
	indexer cache.Indexer
}

// NewTopicAuthorizationRuleLister returns a new TopicAuthorizationRuleLister.
func NewTopicAuthorizationRuleLister(indexer cache.Indexer) TopicAuthorizationRuleLister {
	return &topicAuthorizationRuleLister{indexer: indexer}
}

// List lists all TopicAuthorizationRules in the indexer.
func (s *topicAuthorizationRuleLister) List(selector labels.Selector) (ret []*v1alpha1.TopicAuthorizationRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TopicAuthorizationRule))
	})
	return ret, err
}

// TopicAuthorizationRules returns an object that can list and get TopicAuthorizationRules.
func (s *topicAuthorizationRuleLister) TopicAuthorizationRules(namespace string) TopicAuthorizationRuleNamespaceLister {
	return topicAuthorizationRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TopicAuthorizationRuleNamespaceLister helps list and get TopicAuthorizationRules.
// All objects returned here must be treated as read-only.
type TopicAuthorizationRuleNamespaceLister interface {
	// List lists all TopicAuthorizationRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TopicAuthorizationRule, err error)
	// Get retrieves the TopicAuthorizationRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TopicAuthorizationRule, error)
	TopicAuthorizationRuleNamespaceListerExpansion
}

// topicAuthorizationRuleNamespaceLister implements the TopicAuthorizationRuleNamespaceLister
// interface.
type topicAuthorizationRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TopicAuthorizationRules in the indexer for a given namespace.
func (s topicAuthorizationRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TopicAuthorizationRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TopicAuthorizationRule))
	})
	return ret, err
}

// Get retrieves the TopicAuthorizationRule from the indexer for a given namespace and name.
func (s topicAuthorizationRuleNamespaceLister) Get(name string) (*v1alpha1.TopicAuthorizationRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("topicauthorizationrule"), name)
	}
	return obj.(*v1alpha1.TopicAuthorizationRule), nil
}
