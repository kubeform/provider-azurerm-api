/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/servicebus/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// QueueAuthorizationRuleLister helps list QueueAuthorizationRules.
// All objects returned here must be treated as read-only.
type QueueAuthorizationRuleLister interface {
	// List lists all QueueAuthorizationRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.QueueAuthorizationRule, err error)
	// QueueAuthorizationRules returns an object that can list and get QueueAuthorizationRules.
	QueueAuthorizationRules(namespace string) QueueAuthorizationRuleNamespaceLister
	QueueAuthorizationRuleListerExpansion
}

// queueAuthorizationRuleLister implements the QueueAuthorizationRuleLister interface.
type queueAuthorizationRuleLister struct {
	indexer cache.Indexer
}

// NewQueueAuthorizationRuleLister returns a new QueueAuthorizationRuleLister.
func NewQueueAuthorizationRuleLister(indexer cache.Indexer) QueueAuthorizationRuleLister {
	return &queueAuthorizationRuleLister{indexer: indexer}
}

// List lists all QueueAuthorizationRules in the indexer.
func (s *queueAuthorizationRuleLister) List(selector labels.Selector) (ret []*v1alpha1.QueueAuthorizationRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.QueueAuthorizationRule))
	})
	return ret, err
}

// QueueAuthorizationRules returns an object that can list and get QueueAuthorizationRules.
func (s *queueAuthorizationRuleLister) QueueAuthorizationRules(namespace string) QueueAuthorizationRuleNamespaceLister {
	return queueAuthorizationRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// QueueAuthorizationRuleNamespaceLister helps list and get QueueAuthorizationRules.
// All objects returned here must be treated as read-only.
type QueueAuthorizationRuleNamespaceLister interface {
	// List lists all QueueAuthorizationRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.QueueAuthorizationRule, err error)
	// Get retrieves the QueueAuthorizationRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.QueueAuthorizationRule, error)
	QueueAuthorizationRuleNamespaceListerExpansion
}

// queueAuthorizationRuleNamespaceLister implements the QueueAuthorizationRuleNamespaceLister
// interface.
type queueAuthorizationRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all QueueAuthorizationRules in the indexer for a given namespace.
func (s queueAuthorizationRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.QueueAuthorizationRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.QueueAuthorizationRule))
	})
	return ret, err
}

// Get retrieves the QueueAuthorizationRule from the indexer for a given namespace and name.
func (s queueAuthorizationRuleNamespaceLister) Get(name string) (*v1alpha1.QueueAuthorizationRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("queueauthorizationrule"), name)
	}
	return obj.(*v1alpha1.QueueAuthorizationRule), nil
}
