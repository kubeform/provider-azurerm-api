/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/application/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InsightsWebtestLister helps list InsightsWebtests.
// All objects returned here must be treated as read-only.
type InsightsWebtestLister interface {
	// List lists all InsightsWebtests in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InsightsWebtest, err error)
	// InsightsWebtests returns an object that can list and get InsightsWebtests.
	InsightsWebtests(namespace string) InsightsWebtestNamespaceLister
	InsightsWebtestListerExpansion
}

// insightsWebtestLister implements the InsightsWebtestLister interface.
type insightsWebtestLister struct {
	indexer cache.Indexer
}

// NewInsightsWebtestLister returns a new InsightsWebtestLister.
func NewInsightsWebtestLister(indexer cache.Indexer) InsightsWebtestLister {
	return &insightsWebtestLister{indexer: indexer}
}

// List lists all InsightsWebtests in the indexer.
func (s *insightsWebtestLister) List(selector labels.Selector) (ret []*v1alpha1.InsightsWebtest, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InsightsWebtest))
	})
	return ret, err
}

// InsightsWebtests returns an object that can list and get InsightsWebtests.
func (s *insightsWebtestLister) InsightsWebtests(namespace string) InsightsWebtestNamespaceLister {
	return insightsWebtestNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InsightsWebtestNamespaceLister helps list and get InsightsWebtests.
// All objects returned here must be treated as read-only.
type InsightsWebtestNamespaceLister interface {
	// List lists all InsightsWebtests in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InsightsWebtest, err error)
	// Get retrieves the InsightsWebtest from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.InsightsWebtest, error)
	InsightsWebtestNamespaceListerExpansion
}

// insightsWebtestNamespaceLister implements the InsightsWebtestNamespaceLister
// interface.
type insightsWebtestNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all InsightsWebtests in the indexer for a given namespace.
func (s insightsWebtestNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.InsightsWebtest, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InsightsWebtest))
	})
	return ret, err
}

// Get retrieves the InsightsWebtest from the indexer for a given namespace and name.
func (s insightsWebtestNamespaceLister) Get(name string) (*v1alpha1.InsightsWebtest, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("insightswebtest"), name)
	}
	return obj.(*v1alpha1.InsightsWebtest), nil
}
