/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/application/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InsightsLister helps list Insightses.
// All objects returned here must be treated as read-only.
type InsightsLister interface {
	// List lists all Insightses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Insights, err error)
	// Insightses returns an object that can list and get Insightses.
	Insightses(namespace string) InsightsNamespaceLister
	InsightsListerExpansion
}

// insightsLister implements the InsightsLister interface.
type insightsLister struct {
	indexer cache.Indexer
}

// NewInsightsLister returns a new InsightsLister.
func NewInsightsLister(indexer cache.Indexer) InsightsLister {
	return &insightsLister{indexer: indexer}
}

// List lists all Insightses in the indexer.
func (s *insightsLister) List(selector labels.Selector) (ret []*v1alpha1.Insights, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Insights))
	})
	return ret, err
}

// Insightses returns an object that can list and get Insightses.
func (s *insightsLister) Insightses(namespace string) InsightsNamespaceLister {
	return insightsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InsightsNamespaceLister helps list and get Insightses.
// All objects returned here must be treated as read-only.
type InsightsNamespaceLister interface {
	// List lists all Insightses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Insights, err error)
	// Get retrieves the Insights from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Insights, error)
	InsightsNamespaceListerExpansion
}

// insightsNamespaceLister implements the InsightsNamespaceLister
// interface.
type insightsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Insightses in the indexer for a given namespace.
func (s insightsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Insights, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Insights))
	})
	return ret, err
}

// Get retrieves the Insights from the indexer for a given namespace and name.
func (s insightsNamespaceLister) Get(name string) (*v1alpha1.Insights, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("insights"), name)
	}
	return obj.(*v1alpha1.Insights), nil
}
