/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/management/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GroupSubscriptionAssociationLister helps list GroupSubscriptionAssociations.
// All objects returned here must be treated as read-only.
type GroupSubscriptionAssociationLister interface {
	// List lists all GroupSubscriptionAssociations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GroupSubscriptionAssociation, err error)
	// GroupSubscriptionAssociations returns an object that can list and get GroupSubscriptionAssociations.
	GroupSubscriptionAssociations(namespace string) GroupSubscriptionAssociationNamespaceLister
	GroupSubscriptionAssociationListerExpansion
}

// groupSubscriptionAssociationLister implements the GroupSubscriptionAssociationLister interface.
type groupSubscriptionAssociationLister struct {
	indexer cache.Indexer
}

// NewGroupSubscriptionAssociationLister returns a new GroupSubscriptionAssociationLister.
func NewGroupSubscriptionAssociationLister(indexer cache.Indexer) GroupSubscriptionAssociationLister {
	return &groupSubscriptionAssociationLister{indexer: indexer}
}

// List lists all GroupSubscriptionAssociations in the indexer.
func (s *groupSubscriptionAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.GroupSubscriptionAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GroupSubscriptionAssociation))
	})
	return ret, err
}

// GroupSubscriptionAssociations returns an object that can list and get GroupSubscriptionAssociations.
func (s *groupSubscriptionAssociationLister) GroupSubscriptionAssociations(namespace string) GroupSubscriptionAssociationNamespaceLister {
	return groupSubscriptionAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GroupSubscriptionAssociationNamespaceLister helps list and get GroupSubscriptionAssociations.
// All objects returned here must be treated as read-only.
type GroupSubscriptionAssociationNamespaceLister interface {
	// List lists all GroupSubscriptionAssociations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GroupSubscriptionAssociation, err error)
	// Get retrieves the GroupSubscriptionAssociation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GroupSubscriptionAssociation, error)
	GroupSubscriptionAssociationNamespaceListerExpansion
}

// groupSubscriptionAssociationNamespaceLister implements the GroupSubscriptionAssociationNamespaceLister
// interface.
type groupSubscriptionAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GroupSubscriptionAssociations in the indexer for a given namespace.
func (s groupSubscriptionAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GroupSubscriptionAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GroupSubscriptionAssociation))
	})
	return ret, err
}

// Get retrieves the GroupSubscriptionAssociation from the indexer for a given namespace and name.
func (s groupSubscriptionAssociationNamespaceLister) Get(name string) (*v1alpha1.GroupSubscriptionAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("groupsubscriptionassociation"), name)
	}
	return obj.(*v1alpha1.GroupSubscriptionAssociation), nil
}
