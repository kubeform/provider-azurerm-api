/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/mysql/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FlexibleDatabaseLister helps list FlexibleDatabases.
// All objects returned here must be treated as read-only.
type FlexibleDatabaseLister interface {
	// List lists all FlexibleDatabases in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FlexibleDatabase, err error)
	// FlexibleDatabases returns an object that can list and get FlexibleDatabases.
	FlexibleDatabases(namespace string) FlexibleDatabaseNamespaceLister
	FlexibleDatabaseListerExpansion
}

// flexibleDatabaseLister implements the FlexibleDatabaseLister interface.
type flexibleDatabaseLister struct {
	indexer cache.Indexer
}

// NewFlexibleDatabaseLister returns a new FlexibleDatabaseLister.
func NewFlexibleDatabaseLister(indexer cache.Indexer) FlexibleDatabaseLister {
	return &flexibleDatabaseLister{indexer: indexer}
}

// List lists all FlexibleDatabases in the indexer.
func (s *flexibleDatabaseLister) List(selector labels.Selector) (ret []*v1alpha1.FlexibleDatabase, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FlexibleDatabase))
	})
	return ret, err
}

// FlexibleDatabases returns an object that can list and get FlexibleDatabases.
func (s *flexibleDatabaseLister) FlexibleDatabases(namespace string) FlexibleDatabaseNamespaceLister {
	return flexibleDatabaseNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FlexibleDatabaseNamespaceLister helps list and get FlexibleDatabases.
// All objects returned here must be treated as read-only.
type FlexibleDatabaseNamespaceLister interface {
	// List lists all FlexibleDatabases in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FlexibleDatabase, err error)
	// Get retrieves the FlexibleDatabase from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FlexibleDatabase, error)
	FlexibleDatabaseNamespaceListerExpansion
}

// flexibleDatabaseNamespaceLister implements the FlexibleDatabaseNamespaceLister
// interface.
type flexibleDatabaseNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FlexibleDatabases in the indexer for a given namespace.
func (s flexibleDatabaseNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FlexibleDatabase, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FlexibleDatabase))
	})
	return ret, err
}

// Get retrieves the FlexibleDatabase from the indexer for a given namespace and name.
func (s flexibleDatabaseNamespaceLister) Get(name string) (*v1alpha1.FlexibleDatabase, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("flexibledatabase"), name)
	}
	return obj.(*v1alpha1.FlexibleDatabase), nil
}
