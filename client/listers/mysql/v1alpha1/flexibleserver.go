/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/mysql/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FlexibleServerLister helps list FlexibleServers.
// All objects returned here must be treated as read-only.
type FlexibleServerLister interface {
	// List lists all FlexibleServers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FlexibleServer, err error)
	// FlexibleServers returns an object that can list and get FlexibleServers.
	FlexibleServers(namespace string) FlexibleServerNamespaceLister
	FlexibleServerListerExpansion
}

// flexibleServerLister implements the FlexibleServerLister interface.
type flexibleServerLister struct {
	indexer cache.Indexer
}

// NewFlexibleServerLister returns a new FlexibleServerLister.
func NewFlexibleServerLister(indexer cache.Indexer) FlexibleServerLister {
	return &flexibleServerLister{indexer: indexer}
}

// List lists all FlexibleServers in the indexer.
func (s *flexibleServerLister) List(selector labels.Selector) (ret []*v1alpha1.FlexibleServer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FlexibleServer))
	})
	return ret, err
}

// FlexibleServers returns an object that can list and get FlexibleServers.
func (s *flexibleServerLister) FlexibleServers(namespace string) FlexibleServerNamespaceLister {
	return flexibleServerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FlexibleServerNamespaceLister helps list and get FlexibleServers.
// All objects returned here must be treated as read-only.
type FlexibleServerNamespaceLister interface {
	// List lists all FlexibleServers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FlexibleServer, err error)
	// Get retrieves the FlexibleServer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FlexibleServer, error)
	FlexibleServerNamespaceListerExpansion
}

// flexibleServerNamespaceLister implements the FlexibleServerNamespaceLister
// interface.
type flexibleServerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FlexibleServers in the indexer for a given namespace.
func (s flexibleServerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FlexibleServer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FlexibleServer))
	})
	return ret, err
}

// Get retrieves the FlexibleServer from the indexer for a given namespace and name.
func (s flexibleServerNamespaceLister) Get(name string) (*v1alpha1.FlexibleServer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("flexibleserver"), name)
	}
	return obj.(*v1alpha1.FlexibleServer), nil
}
