/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/mysql/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FlexibleServerConfigurationLister helps list FlexibleServerConfigurations.
// All objects returned here must be treated as read-only.
type FlexibleServerConfigurationLister interface {
	// List lists all FlexibleServerConfigurations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FlexibleServerConfiguration, err error)
	// FlexibleServerConfigurations returns an object that can list and get FlexibleServerConfigurations.
	FlexibleServerConfigurations(namespace string) FlexibleServerConfigurationNamespaceLister
	FlexibleServerConfigurationListerExpansion
}

// flexibleServerConfigurationLister implements the FlexibleServerConfigurationLister interface.
type flexibleServerConfigurationLister struct {
	indexer cache.Indexer
}

// NewFlexibleServerConfigurationLister returns a new FlexibleServerConfigurationLister.
func NewFlexibleServerConfigurationLister(indexer cache.Indexer) FlexibleServerConfigurationLister {
	return &flexibleServerConfigurationLister{indexer: indexer}
}

// List lists all FlexibleServerConfigurations in the indexer.
func (s *flexibleServerConfigurationLister) List(selector labels.Selector) (ret []*v1alpha1.FlexibleServerConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FlexibleServerConfiguration))
	})
	return ret, err
}

// FlexibleServerConfigurations returns an object that can list and get FlexibleServerConfigurations.
func (s *flexibleServerConfigurationLister) FlexibleServerConfigurations(namespace string) FlexibleServerConfigurationNamespaceLister {
	return flexibleServerConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FlexibleServerConfigurationNamespaceLister helps list and get FlexibleServerConfigurations.
// All objects returned here must be treated as read-only.
type FlexibleServerConfigurationNamespaceLister interface {
	// List lists all FlexibleServerConfigurations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FlexibleServerConfiguration, err error)
	// Get retrieves the FlexibleServerConfiguration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FlexibleServerConfiguration, error)
	FlexibleServerConfigurationNamespaceListerExpansion
}

// flexibleServerConfigurationNamespaceLister implements the FlexibleServerConfigurationNamespaceLister
// interface.
type flexibleServerConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FlexibleServerConfigurations in the indexer for a given namespace.
func (s flexibleServerConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FlexibleServerConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FlexibleServerConfiguration))
	})
	return ret, err
}

// Get retrieves the FlexibleServerConfiguration from the indexer for a given namespace and name.
func (s flexibleServerConfigurationNamespaceLister) Get(name string) (*v1alpha1.FlexibleServerConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("flexibleserverconfiguration"), name)
	}
	return obj.(*v1alpha1.FlexibleServerConfiguration), nil
}
