/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/web/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PubsubHubLister helps list PubsubHubs.
// All objects returned here must be treated as read-only.
type PubsubHubLister interface {
	// List lists all PubsubHubs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PubsubHub, err error)
	// PubsubHubs returns an object that can list and get PubsubHubs.
	PubsubHubs(namespace string) PubsubHubNamespaceLister
	PubsubHubListerExpansion
}

// pubsubHubLister implements the PubsubHubLister interface.
type pubsubHubLister struct {
	indexer cache.Indexer
}

// NewPubsubHubLister returns a new PubsubHubLister.
func NewPubsubHubLister(indexer cache.Indexer) PubsubHubLister {
	return &pubsubHubLister{indexer: indexer}
}

// List lists all PubsubHubs in the indexer.
func (s *pubsubHubLister) List(selector labels.Selector) (ret []*v1alpha1.PubsubHub, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PubsubHub))
	})
	return ret, err
}

// PubsubHubs returns an object that can list and get PubsubHubs.
func (s *pubsubHubLister) PubsubHubs(namespace string) PubsubHubNamespaceLister {
	return pubsubHubNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PubsubHubNamespaceLister helps list and get PubsubHubs.
// All objects returned here must be treated as read-only.
type PubsubHubNamespaceLister interface {
	// List lists all PubsubHubs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PubsubHub, err error)
	// Get retrieves the PubsubHub from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PubsubHub, error)
	PubsubHubNamespaceListerExpansion
}

// pubsubHubNamespaceLister implements the PubsubHubNamespaceLister
// interface.
type pubsubHubNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PubsubHubs in the indexer for a given namespace.
func (s pubsubHubNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PubsubHub, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PubsubHub))
	})
	return ret, err
}

// Get retrieves the PubsubHub from the indexer for a given namespace and name.
func (s pubsubHubNamespaceLister) Get(name string) (*v1alpha1.PubsubHub, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("pubsubhub"), name)
	}
	return obj.(*v1alpha1.PubsubHub), nil
}
