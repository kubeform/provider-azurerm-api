/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/web/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PubsubNetworkACLLister helps list PubsubNetworkACLs.
// All objects returned here must be treated as read-only.
type PubsubNetworkACLLister interface {
	// List lists all PubsubNetworkACLs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PubsubNetworkACL, err error)
	// PubsubNetworkACLs returns an object that can list and get PubsubNetworkACLs.
	PubsubNetworkACLs(namespace string) PubsubNetworkACLNamespaceLister
	PubsubNetworkACLListerExpansion
}

// pubsubNetworkACLLister implements the PubsubNetworkACLLister interface.
type pubsubNetworkACLLister struct {
	indexer cache.Indexer
}

// NewPubsubNetworkACLLister returns a new PubsubNetworkACLLister.
func NewPubsubNetworkACLLister(indexer cache.Indexer) PubsubNetworkACLLister {
	return &pubsubNetworkACLLister{indexer: indexer}
}

// List lists all PubsubNetworkACLs in the indexer.
func (s *pubsubNetworkACLLister) List(selector labels.Selector) (ret []*v1alpha1.PubsubNetworkACL, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PubsubNetworkACL))
	})
	return ret, err
}

// PubsubNetworkACLs returns an object that can list and get PubsubNetworkACLs.
func (s *pubsubNetworkACLLister) PubsubNetworkACLs(namespace string) PubsubNetworkACLNamespaceLister {
	return pubsubNetworkACLNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PubsubNetworkACLNamespaceLister helps list and get PubsubNetworkACLs.
// All objects returned here must be treated as read-only.
type PubsubNetworkACLNamespaceLister interface {
	// List lists all PubsubNetworkACLs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PubsubNetworkACL, err error)
	// Get retrieves the PubsubNetworkACL from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PubsubNetworkACL, error)
	PubsubNetworkACLNamespaceListerExpansion
}

// pubsubNetworkACLNamespaceLister implements the PubsubNetworkACLNamespaceLister
// interface.
type pubsubNetworkACLNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PubsubNetworkACLs in the indexer for a given namespace.
func (s pubsubNetworkACLNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PubsubNetworkACL, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PubsubNetworkACL))
	})
	return ret, err
}

// Get retrieves the PubsubNetworkACL from the indexer for a given namespace and name.
func (s pubsubNetworkACLNamespaceLister) Get(name string) (*v1alpha1.PubsubNetworkACL, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("pubsubnetworkacl"), name)
	}
	return obj.(*v1alpha1.PubsubNetworkACL), nil
}
