/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/web/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApplicationFirewallPolicyLister helps list ApplicationFirewallPolicies.
// All objects returned here must be treated as read-only.
type ApplicationFirewallPolicyLister interface {
	// List lists all ApplicationFirewallPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApplicationFirewallPolicy, err error)
	// ApplicationFirewallPolicies returns an object that can list and get ApplicationFirewallPolicies.
	ApplicationFirewallPolicies(namespace string) ApplicationFirewallPolicyNamespaceLister
	ApplicationFirewallPolicyListerExpansion
}

// applicationFirewallPolicyLister implements the ApplicationFirewallPolicyLister interface.
type applicationFirewallPolicyLister struct {
	indexer cache.Indexer
}

// NewApplicationFirewallPolicyLister returns a new ApplicationFirewallPolicyLister.
func NewApplicationFirewallPolicyLister(indexer cache.Indexer) ApplicationFirewallPolicyLister {
	return &applicationFirewallPolicyLister{indexer: indexer}
}

// List lists all ApplicationFirewallPolicies in the indexer.
func (s *applicationFirewallPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.ApplicationFirewallPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApplicationFirewallPolicy))
	})
	return ret, err
}

// ApplicationFirewallPolicies returns an object that can list and get ApplicationFirewallPolicies.
func (s *applicationFirewallPolicyLister) ApplicationFirewallPolicies(namespace string) ApplicationFirewallPolicyNamespaceLister {
	return applicationFirewallPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApplicationFirewallPolicyNamespaceLister helps list and get ApplicationFirewallPolicies.
// All objects returned here must be treated as read-only.
type ApplicationFirewallPolicyNamespaceLister interface {
	// List lists all ApplicationFirewallPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApplicationFirewallPolicy, err error)
	// Get retrieves the ApplicationFirewallPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ApplicationFirewallPolicy, error)
	ApplicationFirewallPolicyNamespaceListerExpansion
}

// applicationFirewallPolicyNamespaceLister implements the ApplicationFirewallPolicyNamespaceLister
// interface.
type applicationFirewallPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApplicationFirewallPolicies in the indexer for a given namespace.
func (s applicationFirewallPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApplicationFirewallPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApplicationFirewallPolicy))
	})
	return ret, err
}

// Get retrieves the ApplicationFirewallPolicy from the indexer for a given namespace and name.
func (s applicationFirewallPolicyNamespaceLister) Get(name string) (*v1alpha1.ApplicationFirewallPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("applicationfirewallpolicy"), name)
	}
	return obj.(*v1alpha1.ApplicationFirewallPolicy), nil
}
