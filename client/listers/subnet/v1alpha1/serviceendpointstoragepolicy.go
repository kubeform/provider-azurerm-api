/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/subnet/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceEndpointStoragePolicyLister helps list ServiceEndpointStoragePolicies.
// All objects returned here must be treated as read-only.
type ServiceEndpointStoragePolicyLister interface {
	// List lists all ServiceEndpointStoragePolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceEndpointStoragePolicy, err error)
	// ServiceEndpointStoragePolicies returns an object that can list and get ServiceEndpointStoragePolicies.
	ServiceEndpointStoragePolicies(namespace string) ServiceEndpointStoragePolicyNamespaceLister
	ServiceEndpointStoragePolicyListerExpansion
}

// serviceEndpointStoragePolicyLister implements the ServiceEndpointStoragePolicyLister interface.
type serviceEndpointStoragePolicyLister struct {
	indexer cache.Indexer
}

// NewServiceEndpointStoragePolicyLister returns a new ServiceEndpointStoragePolicyLister.
func NewServiceEndpointStoragePolicyLister(indexer cache.Indexer) ServiceEndpointStoragePolicyLister {
	return &serviceEndpointStoragePolicyLister{indexer: indexer}
}

// List lists all ServiceEndpointStoragePolicies in the indexer.
func (s *serviceEndpointStoragePolicyLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceEndpointStoragePolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceEndpointStoragePolicy))
	})
	return ret, err
}

// ServiceEndpointStoragePolicies returns an object that can list and get ServiceEndpointStoragePolicies.
func (s *serviceEndpointStoragePolicyLister) ServiceEndpointStoragePolicies(namespace string) ServiceEndpointStoragePolicyNamespaceLister {
	return serviceEndpointStoragePolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceEndpointStoragePolicyNamespaceLister helps list and get ServiceEndpointStoragePolicies.
// All objects returned here must be treated as read-only.
type ServiceEndpointStoragePolicyNamespaceLister interface {
	// List lists all ServiceEndpointStoragePolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceEndpointStoragePolicy, err error)
	// Get retrieves the ServiceEndpointStoragePolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServiceEndpointStoragePolicy, error)
	ServiceEndpointStoragePolicyNamespaceListerExpansion
}

// serviceEndpointStoragePolicyNamespaceLister implements the ServiceEndpointStoragePolicyNamespaceLister
// interface.
type serviceEndpointStoragePolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceEndpointStoragePolicies in the indexer for a given namespace.
func (s serviceEndpointStoragePolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceEndpointStoragePolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceEndpointStoragePolicy))
	})
	return ret, err
}

// Get retrieves the ServiceEndpointStoragePolicy from the indexer for a given namespace and name.
func (s serviceEndpointStoragePolicyNamespaceLister) Get(name string) (*v1alpha1.ServiceEndpointStoragePolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("serviceendpointstoragepolicy"), name)
	}
	return obj.(*v1alpha1.ServiceEndpointStoragePolicy), nil
}
