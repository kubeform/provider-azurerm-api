/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/subnet/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NatGatewayAssociationLister helps list NatGatewayAssociations.
// All objects returned here must be treated as read-only.
type NatGatewayAssociationLister interface {
	// List lists all NatGatewayAssociations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NatGatewayAssociation, err error)
	// NatGatewayAssociations returns an object that can list and get NatGatewayAssociations.
	NatGatewayAssociations(namespace string) NatGatewayAssociationNamespaceLister
	NatGatewayAssociationListerExpansion
}

// natGatewayAssociationLister implements the NatGatewayAssociationLister interface.
type natGatewayAssociationLister struct {
	indexer cache.Indexer
}

// NewNatGatewayAssociationLister returns a new NatGatewayAssociationLister.
func NewNatGatewayAssociationLister(indexer cache.Indexer) NatGatewayAssociationLister {
	return &natGatewayAssociationLister{indexer: indexer}
}

// List lists all NatGatewayAssociations in the indexer.
func (s *natGatewayAssociationLister) List(selector labels.Selector) (ret []*v1alpha1.NatGatewayAssociation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NatGatewayAssociation))
	})
	return ret, err
}

// NatGatewayAssociations returns an object that can list and get NatGatewayAssociations.
func (s *natGatewayAssociationLister) NatGatewayAssociations(namespace string) NatGatewayAssociationNamespaceLister {
	return natGatewayAssociationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NatGatewayAssociationNamespaceLister helps list and get NatGatewayAssociations.
// All objects returned here must be treated as read-only.
type NatGatewayAssociationNamespaceLister interface {
	// List lists all NatGatewayAssociations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NatGatewayAssociation, err error)
	// Get retrieves the NatGatewayAssociation from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NatGatewayAssociation, error)
	NatGatewayAssociationNamespaceListerExpansion
}

// natGatewayAssociationNamespaceLister implements the NatGatewayAssociationNamespaceLister
// interface.
type natGatewayAssociationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NatGatewayAssociations in the indexer for a given namespace.
func (s natGatewayAssociationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NatGatewayAssociation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NatGatewayAssociation))
	})
	return ret, err
}

// Get retrieves the NatGatewayAssociation from the indexer for a given namespace and name.
func (s natGatewayAssociationNamespaceLister) Get(name string) (*v1alpha1.NatGatewayAssociation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("natgatewayassociation"), name)
	}
	return obj.(*v1alpha1.NatGatewayAssociation), nil
}
