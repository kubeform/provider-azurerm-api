/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/trafficmanager/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NestedEndpointLister helps list NestedEndpoints.
// All objects returned here must be treated as read-only.
type NestedEndpointLister interface {
	// List lists all NestedEndpoints in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NestedEndpoint, err error)
	// NestedEndpoints returns an object that can list and get NestedEndpoints.
	NestedEndpoints(namespace string) NestedEndpointNamespaceLister
	NestedEndpointListerExpansion
}

// nestedEndpointLister implements the NestedEndpointLister interface.
type nestedEndpointLister struct {
	indexer cache.Indexer
}

// NewNestedEndpointLister returns a new NestedEndpointLister.
func NewNestedEndpointLister(indexer cache.Indexer) NestedEndpointLister {
	return &nestedEndpointLister{indexer: indexer}
}

// List lists all NestedEndpoints in the indexer.
func (s *nestedEndpointLister) List(selector labels.Selector) (ret []*v1alpha1.NestedEndpoint, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NestedEndpoint))
	})
	return ret, err
}

// NestedEndpoints returns an object that can list and get NestedEndpoints.
func (s *nestedEndpointLister) NestedEndpoints(namespace string) NestedEndpointNamespaceLister {
	return nestedEndpointNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NestedEndpointNamespaceLister helps list and get NestedEndpoints.
// All objects returned here must be treated as read-only.
type NestedEndpointNamespaceLister interface {
	// List lists all NestedEndpoints in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NestedEndpoint, err error)
	// Get retrieves the NestedEndpoint from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NestedEndpoint, error)
	NestedEndpointNamespaceListerExpansion
}

// nestedEndpointNamespaceLister implements the NestedEndpointNamespaceLister
// interface.
type nestedEndpointNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NestedEndpoints in the indexer for a given namespace.
func (s nestedEndpointNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NestedEndpoint, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NestedEndpoint))
	})
	return ret, err
}

// Get retrieves the NestedEndpoint from the indexer for a given namespace and name.
func (s nestedEndpointNamespaceLister) Get(name string) (*v1alpha1.NestedEndpoint, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("nestedendpoint"), name)
	}
	return obj.(*v1alpha1.NestedEndpoint), nil
}
