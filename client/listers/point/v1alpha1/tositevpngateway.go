/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/point/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ToSiteVPNGatewayLister helps list ToSiteVPNGateways.
// All objects returned here must be treated as read-only.
type ToSiteVPNGatewayLister interface {
	// List lists all ToSiteVPNGateways in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ToSiteVPNGateway, err error)
	// ToSiteVPNGateways returns an object that can list and get ToSiteVPNGateways.
	ToSiteVPNGateways(namespace string) ToSiteVPNGatewayNamespaceLister
	ToSiteVPNGatewayListerExpansion
}

// toSiteVPNGatewayLister implements the ToSiteVPNGatewayLister interface.
type toSiteVPNGatewayLister struct {
	indexer cache.Indexer
}

// NewToSiteVPNGatewayLister returns a new ToSiteVPNGatewayLister.
func NewToSiteVPNGatewayLister(indexer cache.Indexer) ToSiteVPNGatewayLister {
	return &toSiteVPNGatewayLister{indexer: indexer}
}

// List lists all ToSiteVPNGateways in the indexer.
func (s *toSiteVPNGatewayLister) List(selector labels.Selector) (ret []*v1alpha1.ToSiteVPNGateway, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ToSiteVPNGateway))
	})
	return ret, err
}

// ToSiteVPNGateways returns an object that can list and get ToSiteVPNGateways.
func (s *toSiteVPNGatewayLister) ToSiteVPNGateways(namespace string) ToSiteVPNGatewayNamespaceLister {
	return toSiteVPNGatewayNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ToSiteVPNGatewayNamespaceLister helps list and get ToSiteVPNGateways.
// All objects returned here must be treated as read-only.
type ToSiteVPNGatewayNamespaceLister interface {
	// List lists all ToSiteVPNGateways in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ToSiteVPNGateway, err error)
	// Get retrieves the ToSiteVPNGateway from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ToSiteVPNGateway, error)
	ToSiteVPNGatewayNamespaceListerExpansion
}

// toSiteVPNGatewayNamespaceLister implements the ToSiteVPNGatewayNamespaceLister
// interface.
type toSiteVPNGatewayNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ToSiteVPNGateways in the indexer for a given namespace.
func (s toSiteVPNGatewayNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ToSiteVPNGateway, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ToSiteVPNGateway))
	})
	return ret, err
}

// Get retrieves the ToSiteVPNGateway from the indexer for a given namespace and name.
func (s toSiteVPNGatewayNamespaceLister) Get(name string) (*v1alpha1.ToSiteVPNGateway, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tositevpngateway"), name)
	}
	return obj.(*v1alpha1.ToSiteVPNGateway), nil
}
