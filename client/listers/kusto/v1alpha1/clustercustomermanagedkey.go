/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/kusto/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterCustomerManagedKeyLister helps list ClusterCustomerManagedKeys.
// All objects returned here must be treated as read-only.
type ClusterCustomerManagedKeyLister interface {
	// List lists all ClusterCustomerManagedKeys in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterCustomerManagedKey, err error)
	// ClusterCustomerManagedKeys returns an object that can list and get ClusterCustomerManagedKeys.
	ClusterCustomerManagedKeys(namespace string) ClusterCustomerManagedKeyNamespaceLister
	ClusterCustomerManagedKeyListerExpansion
}

// clusterCustomerManagedKeyLister implements the ClusterCustomerManagedKeyLister interface.
type clusterCustomerManagedKeyLister struct {
	indexer cache.Indexer
}

// NewClusterCustomerManagedKeyLister returns a new ClusterCustomerManagedKeyLister.
func NewClusterCustomerManagedKeyLister(indexer cache.Indexer) ClusterCustomerManagedKeyLister {
	return &clusterCustomerManagedKeyLister{indexer: indexer}
}

// List lists all ClusterCustomerManagedKeys in the indexer.
func (s *clusterCustomerManagedKeyLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterCustomerManagedKey, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterCustomerManagedKey))
	})
	return ret, err
}

// ClusterCustomerManagedKeys returns an object that can list and get ClusterCustomerManagedKeys.
func (s *clusterCustomerManagedKeyLister) ClusterCustomerManagedKeys(namespace string) ClusterCustomerManagedKeyNamespaceLister {
	return clusterCustomerManagedKeyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterCustomerManagedKeyNamespaceLister helps list and get ClusterCustomerManagedKeys.
// All objects returned here must be treated as read-only.
type ClusterCustomerManagedKeyNamespaceLister interface {
	// List lists all ClusterCustomerManagedKeys in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterCustomerManagedKey, err error)
	// Get retrieves the ClusterCustomerManagedKey from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ClusterCustomerManagedKey, error)
	ClusterCustomerManagedKeyNamespaceListerExpansion
}

// clusterCustomerManagedKeyNamespaceLister implements the ClusterCustomerManagedKeyNamespaceLister
// interface.
type clusterCustomerManagedKeyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterCustomerManagedKeys in the indexer for a given namespace.
func (s clusterCustomerManagedKeyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterCustomerManagedKey, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterCustomerManagedKey))
	})
	return ret, err
}

// Get retrieves the ClusterCustomerManagedKey from the indexer for a given namespace and name.
func (s clusterCustomerManagedKeyNamespaceLister) Get(name string) (*v1alpha1.ClusterCustomerManagedKey, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clustercustomermanagedkey"), name)
	}
	return obj.(*v1alpha1.ClusterCustomerManagedKey), nil
}
