/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/kusto/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DatabasePrincipalLister helps list DatabasePrincipals.
// All objects returned here must be treated as read-only.
type DatabasePrincipalLister interface {
	// List lists all DatabasePrincipals in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DatabasePrincipal, err error)
	// DatabasePrincipals returns an object that can list and get DatabasePrincipals.
	DatabasePrincipals(namespace string) DatabasePrincipalNamespaceLister
	DatabasePrincipalListerExpansion
}

// databasePrincipalLister implements the DatabasePrincipalLister interface.
type databasePrincipalLister struct {
	indexer cache.Indexer
}

// NewDatabasePrincipalLister returns a new DatabasePrincipalLister.
func NewDatabasePrincipalLister(indexer cache.Indexer) DatabasePrincipalLister {
	return &databasePrincipalLister{indexer: indexer}
}

// List lists all DatabasePrincipals in the indexer.
func (s *databasePrincipalLister) List(selector labels.Selector) (ret []*v1alpha1.DatabasePrincipal, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatabasePrincipal))
	})
	return ret, err
}

// DatabasePrincipals returns an object that can list and get DatabasePrincipals.
func (s *databasePrincipalLister) DatabasePrincipals(namespace string) DatabasePrincipalNamespaceLister {
	return databasePrincipalNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DatabasePrincipalNamespaceLister helps list and get DatabasePrincipals.
// All objects returned here must be treated as read-only.
type DatabasePrincipalNamespaceLister interface {
	// List lists all DatabasePrincipals in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DatabasePrincipal, err error)
	// Get retrieves the DatabasePrincipal from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DatabasePrincipal, error)
	DatabasePrincipalNamespaceListerExpansion
}

// databasePrincipalNamespaceLister implements the DatabasePrincipalNamespaceLister
// interface.
type databasePrincipalNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DatabasePrincipals in the indexer for a given namespace.
func (s databasePrincipalNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DatabasePrincipal, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatabasePrincipal))
	})
	return ret, err
}

// Get retrieves the DatabasePrincipal from the indexer for a given namespace and name.
func (s databasePrincipalNamespaceLister) Get(name string) (*v1alpha1.DatabasePrincipal, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("databaseprincipal"), name)
	}
	return obj.(*v1alpha1.DatabasePrincipal), nil
}
