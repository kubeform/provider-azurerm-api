/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/kusto/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DatabasePrincipalAssignmentLister helps list DatabasePrincipalAssignments.
// All objects returned here must be treated as read-only.
type DatabasePrincipalAssignmentLister interface {
	// List lists all DatabasePrincipalAssignments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DatabasePrincipalAssignment, err error)
	// DatabasePrincipalAssignments returns an object that can list and get DatabasePrincipalAssignments.
	DatabasePrincipalAssignments(namespace string) DatabasePrincipalAssignmentNamespaceLister
	DatabasePrincipalAssignmentListerExpansion
}

// databasePrincipalAssignmentLister implements the DatabasePrincipalAssignmentLister interface.
type databasePrincipalAssignmentLister struct {
	indexer cache.Indexer
}

// NewDatabasePrincipalAssignmentLister returns a new DatabasePrincipalAssignmentLister.
func NewDatabasePrincipalAssignmentLister(indexer cache.Indexer) DatabasePrincipalAssignmentLister {
	return &databasePrincipalAssignmentLister{indexer: indexer}
}

// List lists all DatabasePrincipalAssignments in the indexer.
func (s *databasePrincipalAssignmentLister) List(selector labels.Selector) (ret []*v1alpha1.DatabasePrincipalAssignment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatabasePrincipalAssignment))
	})
	return ret, err
}

// DatabasePrincipalAssignments returns an object that can list and get DatabasePrincipalAssignments.
func (s *databasePrincipalAssignmentLister) DatabasePrincipalAssignments(namespace string) DatabasePrincipalAssignmentNamespaceLister {
	return databasePrincipalAssignmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DatabasePrincipalAssignmentNamespaceLister helps list and get DatabasePrincipalAssignments.
// All objects returned here must be treated as read-only.
type DatabasePrincipalAssignmentNamespaceLister interface {
	// List lists all DatabasePrincipalAssignments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DatabasePrincipalAssignment, err error)
	// Get retrieves the DatabasePrincipalAssignment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DatabasePrincipalAssignment, error)
	DatabasePrincipalAssignmentNamespaceListerExpansion
}

// databasePrincipalAssignmentNamespaceLister implements the DatabasePrincipalAssignmentNamespaceLister
// interface.
type databasePrincipalAssignmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DatabasePrincipalAssignments in the indexer for a given namespace.
func (s databasePrincipalAssignmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DatabasePrincipalAssignment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatabasePrincipalAssignment))
	})
	return ret, err
}

// Get retrieves the DatabasePrincipalAssignment from the indexer for a given namespace and name.
func (s databasePrincipalAssignmentNamespaceLister) Get(name string) (*v1alpha1.DatabasePrincipalAssignment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("databaseprincipalassignment"), name)
	}
	return obj.(*v1alpha1.DatabasePrincipalAssignment), nil
}
