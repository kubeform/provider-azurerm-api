/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/kusto/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IothubDataConnectionLister helps list IothubDataConnections.
// All objects returned here must be treated as read-only.
type IothubDataConnectionLister interface {
	// List lists all IothubDataConnections in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IothubDataConnection, err error)
	// IothubDataConnections returns an object that can list and get IothubDataConnections.
	IothubDataConnections(namespace string) IothubDataConnectionNamespaceLister
	IothubDataConnectionListerExpansion
}

// iothubDataConnectionLister implements the IothubDataConnectionLister interface.
type iothubDataConnectionLister struct {
	indexer cache.Indexer
}

// NewIothubDataConnectionLister returns a new IothubDataConnectionLister.
func NewIothubDataConnectionLister(indexer cache.Indexer) IothubDataConnectionLister {
	return &iothubDataConnectionLister{indexer: indexer}
}

// List lists all IothubDataConnections in the indexer.
func (s *iothubDataConnectionLister) List(selector labels.Selector) (ret []*v1alpha1.IothubDataConnection, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IothubDataConnection))
	})
	return ret, err
}

// IothubDataConnections returns an object that can list and get IothubDataConnections.
func (s *iothubDataConnectionLister) IothubDataConnections(namespace string) IothubDataConnectionNamespaceLister {
	return iothubDataConnectionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IothubDataConnectionNamespaceLister helps list and get IothubDataConnections.
// All objects returned here must be treated as read-only.
type IothubDataConnectionNamespaceLister interface {
	// List lists all IothubDataConnections in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IothubDataConnection, err error)
	// Get retrieves the IothubDataConnection from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IothubDataConnection, error)
	IothubDataConnectionNamespaceListerExpansion
}

// iothubDataConnectionNamespaceLister implements the IothubDataConnectionNamespaceLister
// interface.
type iothubDataConnectionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IothubDataConnections in the indexer for a given namespace.
func (s iothubDataConnectionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IothubDataConnection, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IothubDataConnection))
	})
	return ret, err
}

// Get retrieves the IothubDataConnection from the indexer for a given namespace and name.
func (s iothubDataConnectionNamespaceLister) Get(name string) (*v1alpha1.IothubDataConnection, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("iothubdataconnection"), name)
	}
	return obj.(*v1alpha1.IothubDataConnection), nil
}
