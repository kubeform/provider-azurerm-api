/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/kusto/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EventgridDataConnectionLister helps list EventgridDataConnections.
// All objects returned here must be treated as read-only.
type EventgridDataConnectionLister interface {
	// List lists all EventgridDataConnections in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EventgridDataConnection, err error)
	// EventgridDataConnections returns an object that can list and get EventgridDataConnections.
	EventgridDataConnections(namespace string) EventgridDataConnectionNamespaceLister
	EventgridDataConnectionListerExpansion
}

// eventgridDataConnectionLister implements the EventgridDataConnectionLister interface.
type eventgridDataConnectionLister struct {
	indexer cache.Indexer
}

// NewEventgridDataConnectionLister returns a new EventgridDataConnectionLister.
func NewEventgridDataConnectionLister(indexer cache.Indexer) EventgridDataConnectionLister {
	return &eventgridDataConnectionLister{indexer: indexer}
}

// List lists all EventgridDataConnections in the indexer.
func (s *eventgridDataConnectionLister) List(selector labels.Selector) (ret []*v1alpha1.EventgridDataConnection, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EventgridDataConnection))
	})
	return ret, err
}

// EventgridDataConnections returns an object that can list and get EventgridDataConnections.
func (s *eventgridDataConnectionLister) EventgridDataConnections(namespace string) EventgridDataConnectionNamespaceLister {
	return eventgridDataConnectionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EventgridDataConnectionNamespaceLister helps list and get EventgridDataConnections.
// All objects returned here must be treated as read-only.
type EventgridDataConnectionNamespaceLister interface {
	// List lists all EventgridDataConnections in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EventgridDataConnection, err error)
	// Get retrieves the EventgridDataConnection from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EventgridDataConnection, error)
	EventgridDataConnectionNamespaceListerExpansion
}

// eventgridDataConnectionNamespaceLister implements the EventgridDataConnectionNamespaceLister
// interface.
type eventgridDataConnectionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EventgridDataConnections in the indexer for a given namespace.
func (s eventgridDataConnectionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EventgridDataConnection, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EventgridDataConnection))
	})
	return ret, err
}

// Get retrieves the EventgridDataConnection from the indexer for a given namespace and name.
func (s eventgridDataConnectionNamespaceLister) Get(name string) (*v1alpha1.EventgridDataConnection, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("eventgriddataconnection"), name)
	}
	return obj.(*v1alpha1.EventgridDataConnection), nil
}
