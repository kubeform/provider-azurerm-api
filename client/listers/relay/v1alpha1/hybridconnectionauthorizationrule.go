/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/relay/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HybridConnectionAuthorizationRuleLister helps list HybridConnectionAuthorizationRules.
// All objects returned here must be treated as read-only.
type HybridConnectionAuthorizationRuleLister interface {
	// List lists all HybridConnectionAuthorizationRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HybridConnectionAuthorizationRule, err error)
	// HybridConnectionAuthorizationRules returns an object that can list and get HybridConnectionAuthorizationRules.
	HybridConnectionAuthorizationRules(namespace string) HybridConnectionAuthorizationRuleNamespaceLister
	HybridConnectionAuthorizationRuleListerExpansion
}

// hybridConnectionAuthorizationRuleLister implements the HybridConnectionAuthorizationRuleLister interface.
type hybridConnectionAuthorizationRuleLister struct {
	indexer cache.Indexer
}

// NewHybridConnectionAuthorizationRuleLister returns a new HybridConnectionAuthorizationRuleLister.
func NewHybridConnectionAuthorizationRuleLister(indexer cache.Indexer) HybridConnectionAuthorizationRuleLister {
	return &hybridConnectionAuthorizationRuleLister{indexer: indexer}
}

// List lists all HybridConnectionAuthorizationRules in the indexer.
func (s *hybridConnectionAuthorizationRuleLister) List(selector labels.Selector) (ret []*v1alpha1.HybridConnectionAuthorizationRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HybridConnectionAuthorizationRule))
	})
	return ret, err
}

// HybridConnectionAuthorizationRules returns an object that can list and get HybridConnectionAuthorizationRules.
func (s *hybridConnectionAuthorizationRuleLister) HybridConnectionAuthorizationRules(namespace string) HybridConnectionAuthorizationRuleNamespaceLister {
	return hybridConnectionAuthorizationRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HybridConnectionAuthorizationRuleNamespaceLister helps list and get HybridConnectionAuthorizationRules.
// All objects returned here must be treated as read-only.
type HybridConnectionAuthorizationRuleNamespaceLister interface {
	// List lists all HybridConnectionAuthorizationRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HybridConnectionAuthorizationRule, err error)
	// Get retrieves the HybridConnectionAuthorizationRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HybridConnectionAuthorizationRule, error)
	HybridConnectionAuthorizationRuleNamespaceListerExpansion
}

// hybridConnectionAuthorizationRuleNamespaceLister implements the HybridConnectionAuthorizationRuleNamespaceLister
// interface.
type hybridConnectionAuthorizationRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HybridConnectionAuthorizationRules in the indexer for a given namespace.
func (s hybridConnectionAuthorizationRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HybridConnectionAuthorizationRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HybridConnectionAuthorizationRule))
	})
	return ret, err
}

// Get retrieves the HybridConnectionAuthorizationRule from the indexer for a given namespace and name.
func (s hybridConnectionAuthorizationRuleNamespaceLister) Get(name string) (*v1alpha1.HybridConnectionAuthorizationRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hybridconnectionauthorizationrule"), name)
	}
	return obj.(*v1alpha1.HybridConnectionAuthorizationRule), nil
}
