/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/service/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FabricMeshSecretValueLister helps list FabricMeshSecretValues.
// All objects returned here must be treated as read-only.
type FabricMeshSecretValueLister interface {
	// List lists all FabricMeshSecretValues in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FabricMeshSecretValue, err error)
	// FabricMeshSecretValues returns an object that can list and get FabricMeshSecretValues.
	FabricMeshSecretValues(namespace string) FabricMeshSecretValueNamespaceLister
	FabricMeshSecretValueListerExpansion
}

// fabricMeshSecretValueLister implements the FabricMeshSecretValueLister interface.
type fabricMeshSecretValueLister struct {
	indexer cache.Indexer
}

// NewFabricMeshSecretValueLister returns a new FabricMeshSecretValueLister.
func NewFabricMeshSecretValueLister(indexer cache.Indexer) FabricMeshSecretValueLister {
	return &fabricMeshSecretValueLister{indexer: indexer}
}

// List lists all FabricMeshSecretValues in the indexer.
func (s *fabricMeshSecretValueLister) List(selector labels.Selector) (ret []*v1alpha1.FabricMeshSecretValue, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FabricMeshSecretValue))
	})
	return ret, err
}

// FabricMeshSecretValues returns an object that can list and get FabricMeshSecretValues.
func (s *fabricMeshSecretValueLister) FabricMeshSecretValues(namespace string) FabricMeshSecretValueNamespaceLister {
	return fabricMeshSecretValueNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FabricMeshSecretValueNamespaceLister helps list and get FabricMeshSecretValues.
// All objects returned here must be treated as read-only.
type FabricMeshSecretValueNamespaceLister interface {
	// List lists all FabricMeshSecretValues in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FabricMeshSecretValue, err error)
	// Get retrieves the FabricMeshSecretValue from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FabricMeshSecretValue, error)
	FabricMeshSecretValueNamespaceListerExpansion
}

// fabricMeshSecretValueNamespaceLister implements the FabricMeshSecretValueNamespaceLister
// interface.
type fabricMeshSecretValueNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FabricMeshSecretValues in the indexer for a given namespace.
func (s fabricMeshSecretValueNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FabricMeshSecretValue, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FabricMeshSecretValue))
	})
	return ret, err
}

// Get retrieves the FabricMeshSecretValue from the indexer for a given namespace and name.
func (s fabricMeshSecretValueNamespaceLister) Get(name string) (*v1alpha1.FabricMeshSecretValue, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("fabricmeshsecretvalue"), name)
	}
	return obj.(*v1alpha1.FabricMeshSecretValue), nil
}
