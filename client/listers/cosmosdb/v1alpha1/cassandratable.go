/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/cosmosdb/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CassandraTableLister helps list CassandraTables.
// All objects returned here must be treated as read-only.
type CassandraTableLister interface {
	// List lists all CassandraTables in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CassandraTable, err error)
	// CassandraTables returns an object that can list and get CassandraTables.
	CassandraTables(namespace string) CassandraTableNamespaceLister
	CassandraTableListerExpansion
}

// cassandraTableLister implements the CassandraTableLister interface.
type cassandraTableLister struct {
	indexer cache.Indexer
}

// NewCassandraTableLister returns a new CassandraTableLister.
func NewCassandraTableLister(indexer cache.Indexer) CassandraTableLister {
	return &cassandraTableLister{indexer: indexer}
}

// List lists all CassandraTables in the indexer.
func (s *cassandraTableLister) List(selector labels.Selector) (ret []*v1alpha1.CassandraTable, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CassandraTable))
	})
	return ret, err
}

// CassandraTables returns an object that can list and get CassandraTables.
func (s *cassandraTableLister) CassandraTables(namespace string) CassandraTableNamespaceLister {
	return cassandraTableNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CassandraTableNamespaceLister helps list and get CassandraTables.
// All objects returned here must be treated as read-only.
type CassandraTableNamespaceLister interface {
	// List lists all CassandraTables in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CassandraTable, err error)
	// Get retrieves the CassandraTable from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CassandraTable, error)
	CassandraTableNamespaceListerExpansion
}

// cassandraTableNamespaceLister implements the CassandraTableNamespaceLister
// interface.
type cassandraTableNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CassandraTables in the indexer for a given namespace.
func (s cassandraTableNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CassandraTable, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CassandraTable))
	})
	return ret, err
}

// Get retrieves the CassandraTable from the indexer for a given namespace and name.
func (s cassandraTableNamespaceLister) Get(name string) (*v1alpha1.CassandraTable, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cassandratable"), name)
	}
	return obj.(*v1alpha1.CassandraTable), nil
}
