/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/cosmosdb/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GremlinDatabaseLister helps list GremlinDatabases.
// All objects returned here must be treated as read-only.
type GremlinDatabaseLister interface {
	// List lists all GremlinDatabases in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GremlinDatabase, err error)
	// GremlinDatabases returns an object that can list and get GremlinDatabases.
	GremlinDatabases(namespace string) GremlinDatabaseNamespaceLister
	GremlinDatabaseListerExpansion
}

// gremlinDatabaseLister implements the GremlinDatabaseLister interface.
type gremlinDatabaseLister struct {
	indexer cache.Indexer
}

// NewGremlinDatabaseLister returns a new GremlinDatabaseLister.
func NewGremlinDatabaseLister(indexer cache.Indexer) GremlinDatabaseLister {
	return &gremlinDatabaseLister{indexer: indexer}
}

// List lists all GremlinDatabases in the indexer.
func (s *gremlinDatabaseLister) List(selector labels.Selector) (ret []*v1alpha1.GremlinDatabase, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GremlinDatabase))
	})
	return ret, err
}

// GremlinDatabases returns an object that can list and get GremlinDatabases.
func (s *gremlinDatabaseLister) GremlinDatabases(namespace string) GremlinDatabaseNamespaceLister {
	return gremlinDatabaseNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GremlinDatabaseNamespaceLister helps list and get GremlinDatabases.
// All objects returned here must be treated as read-only.
type GremlinDatabaseNamespaceLister interface {
	// List lists all GremlinDatabases in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GremlinDatabase, err error)
	// Get retrieves the GremlinDatabase from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GremlinDatabase, error)
	GremlinDatabaseNamespaceListerExpansion
}

// gremlinDatabaseNamespaceLister implements the GremlinDatabaseNamespaceLister
// interface.
type gremlinDatabaseNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GremlinDatabases in the indexer for a given namespace.
func (s gremlinDatabaseNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GremlinDatabase, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GremlinDatabase))
	})
	return ret, err
}

// Get retrieves the GremlinDatabase from the indexer for a given namespace and name.
func (s gremlinDatabaseNamespaceLister) Get(name string) (*v1alpha1.GremlinDatabase, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("gremlindatabase"), name)
	}
	return obj.(*v1alpha1.GremlinDatabase), nil
}
