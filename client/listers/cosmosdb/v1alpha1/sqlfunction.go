/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/cosmosdb/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SqlFunctionLister helps list SqlFunctions.
// All objects returned here must be treated as read-only.
type SqlFunctionLister interface {
	// List lists all SqlFunctions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SqlFunction, err error)
	// SqlFunctions returns an object that can list and get SqlFunctions.
	SqlFunctions(namespace string) SqlFunctionNamespaceLister
	SqlFunctionListerExpansion
}

// sqlFunctionLister implements the SqlFunctionLister interface.
type sqlFunctionLister struct {
	indexer cache.Indexer
}

// NewSqlFunctionLister returns a new SqlFunctionLister.
func NewSqlFunctionLister(indexer cache.Indexer) SqlFunctionLister {
	return &sqlFunctionLister{indexer: indexer}
}

// List lists all SqlFunctions in the indexer.
func (s *sqlFunctionLister) List(selector labels.Selector) (ret []*v1alpha1.SqlFunction, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SqlFunction))
	})
	return ret, err
}

// SqlFunctions returns an object that can list and get SqlFunctions.
func (s *sqlFunctionLister) SqlFunctions(namespace string) SqlFunctionNamespaceLister {
	return sqlFunctionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SqlFunctionNamespaceLister helps list and get SqlFunctions.
// All objects returned here must be treated as read-only.
type SqlFunctionNamespaceLister interface {
	// List lists all SqlFunctions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SqlFunction, err error)
	// Get retrieves the SqlFunction from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SqlFunction, error)
	SqlFunctionNamespaceListerExpansion
}

// sqlFunctionNamespaceLister implements the SqlFunctionNamespaceLister
// interface.
type sqlFunctionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SqlFunctions in the indexer for a given namespace.
func (s sqlFunctionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SqlFunction, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SqlFunction))
	})
	return ret, err
}

// Get retrieves the SqlFunction from the indexer for a given namespace and name.
func (s sqlFunctionNamespaceLister) Get(name string) (*v1alpha1.SqlFunction, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sqlfunction"), name)
	}
	return obj.(*v1alpha1.SqlFunction), nil
}
