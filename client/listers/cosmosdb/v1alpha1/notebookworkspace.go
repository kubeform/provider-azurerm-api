/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/cosmosdb/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NotebookWorkspaceLister helps list NotebookWorkspaces.
// All objects returned here must be treated as read-only.
type NotebookWorkspaceLister interface {
	// List lists all NotebookWorkspaces in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NotebookWorkspace, err error)
	// NotebookWorkspaces returns an object that can list and get NotebookWorkspaces.
	NotebookWorkspaces(namespace string) NotebookWorkspaceNamespaceLister
	NotebookWorkspaceListerExpansion
}

// notebookWorkspaceLister implements the NotebookWorkspaceLister interface.
type notebookWorkspaceLister struct {
	indexer cache.Indexer
}

// NewNotebookWorkspaceLister returns a new NotebookWorkspaceLister.
func NewNotebookWorkspaceLister(indexer cache.Indexer) NotebookWorkspaceLister {
	return &notebookWorkspaceLister{indexer: indexer}
}

// List lists all NotebookWorkspaces in the indexer.
func (s *notebookWorkspaceLister) List(selector labels.Selector) (ret []*v1alpha1.NotebookWorkspace, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NotebookWorkspace))
	})
	return ret, err
}

// NotebookWorkspaces returns an object that can list and get NotebookWorkspaces.
func (s *notebookWorkspaceLister) NotebookWorkspaces(namespace string) NotebookWorkspaceNamespaceLister {
	return notebookWorkspaceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NotebookWorkspaceNamespaceLister helps list and get NotebookWorkspaces.
// All objects returned here must be treated as read-only.
type NotebookWorkspaceNamespaceLister interface {
	// List lists all NotebookWorkspaces in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NotebookWorkspace, err error)
	// Get retrieves the NotebookWorkspace from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NotebookWorkspace, error)
	NotebookWorkspaceNamespaceListerExpansion
}

// notebookWorkspaceNamespaceLister implements the NotebookWorkspaceNamespaceLister
// interface.
type notebookWorkspaceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NotebookWorkspaces in the indexer for a given namespace.
func (s notebookWorkspaceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NotebookWorkspace, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NotebookWorkspace))
	})
	return ret, err
}

// Get retrieves the NotebookWorkspace from the indexer for a given namespace and name.
func (s notebookWorkspaceNamespaceLister) Get(name string) (*v1alpha1.NotebookWorkspace, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("notebookworkspace"), name)
	}
	return obj.(*v1alpha1.NotebookWorkspace), nil
}
