/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/cosmosdb/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SqlDatabaseLister helps list SqlDatabases.
// All objects returned here must be treated as read-only.
type SqlDatabaseLister interface {
	// List lists all SqlDatabases in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SqlDatabase, err error)
	// SqlDatabases returns an object that can list and get SqlDatabases.
	SqlDatabases(namespace string) SqlDatabaseNamespaceLister
	SqlDatabaseListerExpansion
}

// sqlDatabaseLister implements the SqlDatabaseLister interface.
type sqlDatabaseLister struct {
	indexer cache.Indexer
}

// NewSqlDatabaseLister returns a new SqlDatabaseLister.
func NewSqlDatabaseLister(indexer cache.Indexer) SqlDatabaseLister {
	return &sqlDatabaseLister{indexer: indexer}
}

// List lists all SqlDatabases in the indexer.
func (s *sqlDatabaseLister) List(selector labels.Selector) (ret []*v1alpha1.SqlDatabase, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SqlDatabase))
	})
	return ret, err
}

// SqlDatabases returns an object that can list and get SqlDatabases.
func (s *sqlDatabaseLister) SqlDatabases(namespace string) SqlDatabaseNamespaceLister {
	return sqlDatabaseNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SqlDatabaseNamespaceLister helps list and get SqlDatabases.
// All objects returned here must be treated as read-only.
type SqlDatabaseNamespaceLister interface {
	// List lists all SqlDatabases in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SqlDatabase, err error)
	// Get retrieves the SqlDatabase from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SqlDatabase, error)
	SqlDatabaseNamespaceListerExpansion
}

// sqlDatabaseNamespaceLister implements the SqlDatabaseNamespaceLister
// interface.
type sqlDatabaseNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SqlDatabases in the indexer for a given namespace.
func (s sqlDatabaseNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SqlDatabase, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SqlDatabase))
	})
	return ret, err
}

// Get retrieves the SqlDatabase from the indexer for a given namespace and name.
func (s sqlDatabaseNamespaceLister) Get(name string) (*v1alpha1.SqlDatabase, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sqldatabase"), name)
	}
	return obj.(*v1alpha1.SqlDatabase), nil
}
