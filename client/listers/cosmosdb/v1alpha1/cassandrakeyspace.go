/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/cosmosdb/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CassandraKeyspaceLister helps list CassandraKeyspaces.
// All objects returned here must be treated as read-only.
type CassandraKeyspaceLister interface {
	// List lists all CassandraKeyspaces in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CassandraKeyspace, err error)
	// CassandraKeyspaces returns an object that can list and get CassandraKeyspaces.
	CassandraKeyspaces(namespace string) CassandraKeyspaceNamespaceLister
	CassandraKeyspaceListerExpansion
}

// cassandraKeyspaceLister implements the CassandraKeyspaceLister interface.
type cassandraKeyspaceLister struct {
	indexer cache.Indexer
}

// NewCassandraKeyspaceLister returns a new CassandraKeyspaceLister.
func NewCassandraKeyspaceLister(indexer cache.Indexer) CassandraKeyspaceLister {
	return &cassandraKeyspaceLister{indexer: indexer}
}

// List lists all CassandraKeyspaces in the indexer.
func (s *cassandraKeyspaceLister) List(selector labels.Selector) (ret []*v1alpha1.CassandraKeyspace, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CassandraKeyspace))
	})
	return ret, err
}

// CassandraKeyspaces returns an object that can list and get CassandraKeyspaces.
func (s *cassandraKeyspaceLister) CassandraKeyspaces(namespace string) CassandraKeyspaceNamespaceLister {
	return cassandraKeyspaceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CassandraKeyspaceNamespaceLister helps list and get CassandraKeyspaces.
// All objects returned here must be treated as read-only.
type CassandraKeyspaceNamespaceLister interface {
	// List lists all CassandraKeyspaces in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CassandraKeyspace, err error)
	// Get retrieves the CassandraKeyspace from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CassandraKeyspace, error)
	CassandraKeyspaceNamespaceListerExpansion
}

// cassandraKeyspaceNamespaceLister implements the CassandraKeyspaceNamespaceLister
// interface.
type cassandraKeyspaceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CassandraKeyspaces in the indexer for a given namespace.
func (s cassandraKeyspaceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CassandraKeyspace, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CassandraKeyspace))
	})
	return ret, err
}

// Get retrieves the CassandraKeyspace from the indexer for a given namespace and name.
func (s cassandraKeyspaceNamespaceLister) Get(name string) (*v1alpha1.CassandraKeyspace, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cassandrakeyspace"), name)
	}
	return obj.(*v1alpha1.CassandraKeyspace), nil
}
