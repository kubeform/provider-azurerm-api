/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/storage/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ObjectReplicationLister helps list ObjectReplications.
// All objects returned here must be treated as read-only.
type ObjectReplicationLister interface {
	// List lists all ObjectReplications in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ObjectReplication, err error)
	// ObjectReplications returns an object that can list and get ObjectReplications.
	ObjectReplications(namespace string) ObjectReplicationNamespaceLister
	ObjectReplicationListerExpansion
}

// objectReplicationLister implements the ObjectReplicationLister interface.
type objectReplicationLister struct {
	indexer cache.Indexer
}

// NewObjectReplicationLister returns a new ObjectReplicationLister.
func NewObjectReplicationLister(indexer cache.Indexer) ObjectReplicationLister {
	return &objectReplicationLister{indexer: indexer}
}

// List lists all ObjectReplications in the indexer.
func (s *objectReplicationLister) List(selector labels.Selector) (ret []*v1alpha1.ObjectReplication, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ObjectReplication))
	})
	return ret, err
}

// ObjectReplications returns an object that can list and get ObjectReplications.
func (s *objectReplicationLister) ObjectReplications(namespace string) ObjectReplicationNamespaceLister {
	return objectReplicationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ObjectReplicationNamespaceLister helps list and get ObjectReplications.
// All objects returned here must be treated as read-only.
type ObjectReplicationNamespaceLister interface {
	// List lists all ObjectReplications in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ObjectReplication, err error)
	// Get retrieves the ObjectReplication from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ObjectReplication, error)
	ObjectReplicationNamespaceListerExpansion
}

// objectReplicationNamespaceLister implements the ObjectReplicationNamespaceLister
// interface.
type objectReplicationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ObjectReplications in the indexer for a given namespace.
func (s objectReplicationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ObjectReplication, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ObjectReplication))
	})
	return ret, err
}

// Get retrieves the ObjectReplication from the indexer for a given namespace and name.
func (s objectReplicationNamespaceLister) Get(name string) (*v1alpha1.ObjectReplication, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("objectreplication"), name)
	}
	return obj.(*v1alpha1.ObjectReplication), nil
}
