/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/storage/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DisksPoolLister helps list DisksPools.
// All objects returned here must be treated as read-only.
type DisksPoolLister interface {
	// List lists all DisksPools in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DisksPool, err error)
	// DisksPools returns an object that can list and get DisksPools.
	DisksPools(namespace string) DisksPoolNamespaceLister
	DisksPoolListerExpansion
}

// disksPoolLister implements the DisksPoolLister interface.
type disksPoolLister struct {
	indexer cache.Indexer
}

// NewDisksPoolLister returns a new DisksPoolLister.
func NewDisksPoolLister(indexer cache.Indexer) DisksPoolLister {
	return &disksPoolLister{indexer: indexer}
}

// List lists all DisksPools in the indexer.
func (s *disksPoolLister) List(selector labels.Selector) (ret []*v1alpha1.DisksPool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DisksPool))
	})
	return ret, err
}

// DisksPools returns an object that can list and get DisksPools.
func (s *disksPoolLister) DisksPools(namespace string) DisksPoolNamespaceLister {
	return disksPoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DisksPoolNamespaceLister helps list and get DisksPools.
// All objects returned here must be treated as read-only.
type DisksPoolNamespaceLister interface {
	// List lists all DisksPools in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DisksPool, err error)
	// Get retrieves the DisksPool from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DisksPool, error)
	DisksPoolNamespaceListerExpansion
}

// disksPoolNamespaceLister implements the DisksPoolNamespaceLister
// interface.
type disksPoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DisksPools in the indexer for a given namespace.
func (s disksPoolNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DisksPool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DisksPool))
	})
	return ret, err
}

// Get retrieves the DisksPool from the indexer for a given namespace and name.
func (s disksPoolNamespaceLister) Get(name string) (*v1alpha1.DisksPool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("diskspool"), name)
	}
	return obj.(*v1alpha1.DisksPool), nil
}
