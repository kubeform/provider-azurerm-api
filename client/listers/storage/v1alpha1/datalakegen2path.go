/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/storage/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DataLakeGen2PathLister helps list DataLakeGen2Paths.
// All objects returned here must be treated as read-only.
type DataLakeGen2PathLister interface {
	// List lists all DataLakeGen2Paths in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DataLakeGen2Path, err error)
	// DataLakeGen2Paths returns an object that can list and get DataLakeGen2Paths.
	DataLakeGen2Paths(namespace string) DataLakeGen2PathNamespaceLister
	DataLakeGen2PathListerExpansion
}

// dataLakeGen2PathLister implements the DataLakeGen2PathLister interface.
type dataLakeGen2PathLister struct {
	indexer cache.Indexer
}

// NewDataLakeGen2PathLister returns a new DataLakeGen2PathLister.
func NewDataLakeGen2PathLister(indexer cache.Indexer) DataLakeGen2PathLister {
	return &dataLakeGen2PathLister{indexer: indexer}
}

// List lists all DataLakeGen2Paths in the indexer.
func (s *dataLakeGen2PathLister) List(selector labels.Selector) (ret []*v1alpha1.DataLakeGen2Path, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataLakeGen2Path))
	})
	return ret, err
}

// DataLakeGen2Paths returns an object that can list and get DataLakeGen2Paths.
func (s *dataLakeGen2PathLister) DataLakeGen2Paths(namespace string) DataLakeGen2PathNamespaceLister {
	return dataLakeGen2PathNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DataLakeGen2PathNamespaceLister helps list and get DataLakeGen2Paths.
// All objects returned here must be treated as read-only.
type DataLakeGen2PathNamespaceLister interface {
	// List lists all DataLakeGen2Paths in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DataLakeGen2Path, err error)
	// Get retrieves the DataLakeGen2Path from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DataLakeGen2Path, error)
	DataLakeGen2PathNamespaceListerExpansion
}

// dataLakeGen2PathNamespaceLister implements the DataLakeGen2PathNamespaceLister
// interface.
type dataLakeGen2PathNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DataLakeGen2Paths in the indexer for a given namespace.
func (s dataLakeGen2PathNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DataLakeGen2Path, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataLakeGen2Path))
	})
	return ret, err
}

// Get retrieves the DataLakeGen2Path from the indexer for a given namespace and name.
func (s dataLakeGen2PathNamespaceLister) Get(name string) (*v1alpha1.DataLakeGen2Path, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("datalakegen2path"), name)
	}
	return obj.(*v1alpha1.DataLakeGen2Path), nil
}
