/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/storage/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DataLakeGen2FilesystemLister helps list DataLakeGen2Filesystems.
// All objects returned here must be treated as read-only.
type DataLakeGen2FilesystemLister interface {
	// List lists all DataLakeGen2Filesystems in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DataLakeGen2Filesystem, err error)
	// DataLakeGen2Filesystems returns an object that can list and get DataLakeGen2Filesystems.
	DataLakeGen2Filesystems(namespace string) DataLakeGen2FilesystemNamespaceLister
	DataLakeGen2FilesystemListerExpansion
}

// dataLakeGen2FilesystemLister implements the DataLakeGen2FilesystemLister interface.
type dataLakeGen2FilesystemLister struct {
	indexer cache.Indexer
}

// NewDataLakeGen2FilesystemLister returns a new DataLakeGen2FilesystemLister.
func NewDataLakeGen2FilesystemLister(indexer cache.Indexer) DataLakeGen2FilesystemLister {
	return &dataLakeGen2FilesystemLister{indexer: indexer}
}

// List lists all DataLakeGen2Filesystems in the indexer.
func (s *dataLakeGen2FilesystemLister) List(selector labels.Selector) (ret []*v1alpha1.DataLakeGen2Filesystem, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataLakeGen2Filesystem))
	})
	return ret, err
}

// DataLakeGen2Filesystems returns an object that can list and get DataLakeGen2Filesystems.
func (s *dataLakeGen2FilesystemLister) DataLakeGen2Filesystems(namespace string) DataLakeGen2FilesystemNamespaceLister {
	return dataLakeGen2FilesystemNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DataLakeGen2FilesystemNamespaceLister helps list and get DataLakeGen2Filesystems.
// All objects returned here must be treated as read-only.
type DataLakeGen2FilesystemNamespaceLister interface {
	// List lists all DataLakeGen2Filesystems in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DataLakeGen2Filesystem, err error)
	// Get retrieves the DataLakeGen2Filesystem from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DataLakeGen2Filesystem, error)
	DataLakeGen2FilesystemNamespaceListerExpansion
}

// dataLakeGen2FilesystemNamespaceLister implements the DataLakeGen2FilesystemNamespaceLister
// interface.
type dataLakeGen2FilesystemNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DataLakeGen2Filesystems in the indexer for a given namespace.
func (s dataLakeGen2FilesystemNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DataLakeGen2Filesystem, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataLakeGen2Filesystem))
	})
	return ret, err
}

// Get retrieves the DataLakeGen2Filesystem from the indexer for a given namespace and name.
func (s dataLakeGen2FilesystemNamespaceLister) Get(name string) (*v1alpha1.DataLakeGen2Filesystem, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("datalakegen2filesystem"), name)
	}
	return obj.(*v1alpha1.DataLakeGen2Filesystem), nil
}
