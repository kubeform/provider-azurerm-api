/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/storage/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EncryptionScopeLister helps list EncryptionScopes.
// All objects returned here must be treated as read-only.
type EncryptionScopeLister interface {
	// List lists all EncryptionScopes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EncryptionScope, err error)
	// EncryptionScopes returns an object that can list and get EncryptionScopes.
	EncryptionScopes(namespace string) EncryptionScopeNamespaceLister
	EncryptionScopeListerExpansion
}

// encryptionScopeLister implements the EncryptionScopeLister interface.
type encryptionScopeLister struct {
	indexer cache.Indexer
}

// NewEncryptionScopeLister returns a new EncryptionScopeLister.
func NewEncryptionScopeLister(indexer cache.Indexer) EncryptionScopeLister {
	return &encryptionScopeLister{indexer: indexer}
}

// List lists all EncryptionScopes in the indexer.
func (s *encryptionScopeLister) List(selector labels.Selector) (ret []*v1alpha1.EncryptionScope, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EncryptionScope))
	})
	return ret, err
}

// EncryptionScopes returns an object that can list and get EncryptionScopes.
func (s *encryptionScopeLister) EncryptionScopes(namespace string) EncryptionScopeNamespaceLister {
	return encryptionScopeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EncryptionScopeNamespaceLister helps list and get EncryptionScopes.
// All objects returned here must be treated as read-only.
type EncryptionScopeNamespaceLister interface {
	// List lists all EncryptionScopes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EncryptionScope, err error)
	// Get retrieves the EncryptionScope from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EncryptionScope, error)
	EncryptionScopeNamespaceListerExpansion
}

// encryptionScopeNamespaceLister implements the EncryptionScopeNamespaceLister
// interface.
type encryptionScopeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EncryptionScopes in the indexer for a given namespace.
func (s encryptionScopeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EncryptionScope, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EncryptionScope))
	})
	return ret, err
}

// Get retrieves the EncryptionScope from the indexer for a given namespace and name.
func (s encryptionScopeNamespaceLister) Get(name string) (*v1alpha1.EncryptionScope, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("encryptionscope"), name)
	}
	return obj.(*v1alpha1.EncryptionScope), nil
}
