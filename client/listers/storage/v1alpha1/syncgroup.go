/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/storage/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SyncGroupLister helps list SyncGroups.
// All objects returned here must be treated as read-only.
type SyncGroupLister interface {
	// List lists all SyncGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SyncGroup, err error)
	// SyncGroups returns an object that can list and get SyncGroups.
	SyncGroups(namespace string) SyncGroupNamespaceLister
	SyncGroupListerExpansion
}

// syncGroupLister implements the SyncGroupLister interface.
type syncGroupLister struct {
	indexer cache.Indexer
}

// NewSyncGroupLister returns a new SyncGroupLister.
func NewSyncGroupLister(indexer cache.Indexer) SyncGroupLister {
	return &syncGroupLister{indexer: indexer}
}

// List lists all SyncGroups in the indexer.
func (s *syncGroupLister) List(selector labels.Selector) (ret []*v1alpha1.SyncGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SyncGroup))
	})
	return ret, err
}

// SyncGroups returns an object that can list and get SyncGroups.
func (s *syncGroupLister) SyncGroups(namespace string) SyncGroupNamespaceLister {
	return syncGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SyncGroupNamespaceLister helps list and get SyncGroups.
// All objects returned here must be treated as read-only.
type SyncGroupNamespaceLister interface {
	// List lists all SyncGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SyncGroup, err error)
	// Get retrieves the SyncGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SyncGroup, error)
	SyncGroupNamespaceListerExpansion
}

// syncGroupNamespaceLister implements the SyncGroupNamespaceLister
// interface.
type syncGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SyncGroups in the indexer for a given namespace.
func (s syncGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SyncGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SyncGroup))
	})
	return ret, err
}

// Get retrieves the SyncGroup from the indexer for a given namespace and name.
func (s syncGroupNamespaceLister) Get(name string) (*v1alpha1.SyncGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("syncgroup"), name)
	}
	return obj.(*v1alpha1.SyncGroup), nil
}
