/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/storage/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BlobLister helps list Blobs.
// All objects returned here must be treated as read-only.
type BlobLister interface {
	// List lists all Blobs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Blob, err error)
	// Blobs returns an object that can list and get Blobs.
	Blobs(namespace string) BlobNamespaceLister
	BlobListerExpansion
}

// blobLister implements the BlobLister interface.
type blobLister struct {
	indexer cache.Indexer
}

// NewBlobLister returns a new BlobLister.
func NewBlobLister(indexer cache.Indexer) BlobLister {
	return &blobLister{indexer: indexer}
}

// List lists all Blobs in the indexer.
func (s *blobLister) List(selector labels.Selector) (ret []*v1alpha1.Blob, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Blob))
	})
	return ret, err
}

// Blobs returns an object that can list and get Blobs.
func (s *blobLister) Blobs(namespace string) BlobNamespaceLister {
	return blobNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BlobNamespaceLister helps list and get Blobs.
// All objects returned here must be treated as read-only.
type BlobNamespaceLister interface {
	// List lists all Blobs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Blob, err error)
	// Get retrieves the Blob from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Blob, error)
	BlobNamespaceListerExpansion
}

// blobNamespaceLister implements the BlobNamespaceLister
// interface.
type blobNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Blobs in the indexer for a given namespace.
func (s blobNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Blob, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Blob))
	})
	return ret, err
}

// Get retrieves the Blob from the indexer for a given namespace and name.
func (s blobNamespaceLister) Get(name string) (*v1alpha1.Blob, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("blob"), name)
	}
	return obj.(*v1alpha1.Blob), nil
}
