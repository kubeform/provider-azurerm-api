/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/storage/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SyncCloudEndpointLister helps list SyncCloudEndpoints.
// All objects returned here must be treated as read-only.
type SyncCloudEndpointLister interface {
	// List lists all SyncCloudEndpoints in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SyncCloudEndpoint, err error)
	// SyncCloudEndpoints returns an object that can list and get SyncCloudEndpoints.
	SyncCloudEndpoints(namespace string) SyncCloudEndpointNamespaceLister
	SyncCloudEndpointListerExpansion
}

// syncCloudEndpointLister implements the SyncCloudEndpointLister interface.
type syncCloudEndpointLister struct {
	indexer cache.Indexer
}

// NewSyncCloudEndpointLister returns a new SyncCloudEndpointLister.
func NewSyncCloudEndpointLister(indexer cache.Indexer) SyncCloudEndpointLister {
	return &syncCloudEndpointLister{indexer: indexer}
}

// List lists all SyncCloudEndpoints in the indexer.
func (s *syncCloudEndpointLister) List(selector labels.Selector) (ret []*v1alpha1.SyncCloudEndpoint, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SyncCloudEndpoint))
	})
	return ret, err
}

// SyncCloudEndpoints returns an object that can list and get SyncCloudEndpoints.
func (s *syncCloudEndpointLister) SyncCloudEndpoints(namespace string) SyncCloudEndpointNamespaceLister {
	return syncCloudEndpointNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SyncCloudEndpointNamespaceLister helps list and get SyncCloudEndpoints.
// All objects returned here must be treated as read-only.
type SyncCloudEndpointNamespaceLister interface {
	// List lists all SyncCloudEndpoints in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SyncCloudEndpoint, err error)
	// Get retrieves the SyncCloudEndpoint from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SyncCloudEndpoint, error)
	SyncCloudEndpointNamespaceListerExpansion
}

// syncCloudEndpointNamespaceLister implements the SyncCloudEndpointNamespaceLister
// interface.
type syncCloudEndpointNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SyncCloudEndpoints in the indexer for a given namespace.
func (s syncCloudEndpointNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SyncCloudEndpoint, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SyncCloudEndpoint))
	})
	return ret, err
}

// Get retrieves the SyncCloudEndpoint from the indexer for a given namespace and name.
func (s syncCloudEndpointNamespaceLister) Get(name string) (*v1alpha1.SyncCloudEndpoint, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("synccloudendpoint"), name)
	}
	return obj.(*v1alpha1.SyncCloudEndpoint), nil
}
