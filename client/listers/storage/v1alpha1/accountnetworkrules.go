/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/storage/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AccountNetworkRulesLister helps list AccountNetworkRuleses.
// All objects returned here must be treated as read-only.
type AccountNetworkRulesLister interface {
	// List lists all AccountNetworkRuleses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AccountNetworkRules, err error)
	// AccountNetworkRuleses returns an object that can list and get AccountNetworkRuleses.
	AccountNetworkRuleses(namespace string) AccountNetworkRulesNamespaceLister
	AccountNetworkRulesListerExpansion
}

// accountNetworkRulesLister implements the AccountNetworkRulesLister interface.
type accountNetworkRulesLister struct {
	indexer cache.Indexer
}

// NewAccountNetworkRulesLister returns a new AccountNetworkRulesLister.
func NewAccountNetworkRulesLister(indexer cache.Indexer) AccountNetworkRulesLister {
	return &accountNetworkRulesLister{indexer: indexer}
}

// List lists all AccountNetworkRuleses in the indexer.
func (s *accountNetworkRulesLister) List(selector labels.Selector) (ret []*v1alpha1.AccountNetworkRules, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AccountNetworkRules))
	})
	return ret, err
}

// AccountNetworkRuleses returns an object that can list and get AccountNetworkRuleses.
func (s *accountNetworkRulesLister) AccountNetworkRuleses(namespace string) AccountNetworkRulesNamespaceLister {
	return accountNetworkRulesNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AccountNetworkRulesNamespaceLister helps list and get AccountNetworkRuleses.
// All objects returned here must be treated as read-only.
type AccountNetworkRulesNamespaceLister interface {
	// List lists all AccountNetworkRuleses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AccountNetworkRules, err error)
	// Get retrieves the AccountNetworkRules from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AccountNetworkRules, error)
	AccountNetworkRulesNamespaceListerExpansion
}

// accountNetworkRulesNamespaceLister implements the AccountNetworkRulesNamespaceLister
// interface.
type accountNetworkRulesNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AccountNetworkRuleses in the indexer for a given namespace.
func (s accountNetworkRulesNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AccountNetworkRules, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AccountNetworkRules))
	})
	return ret, err
}

// Get retrieves the AccountNetworkRules from the indexer for a given namespace and name.
func (s accountNetworkRulesNamespaceLister) Get(name string) (*v1alpha1.AccountNetworkRules, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("accountnetworkrules"), name)
	}
	return obj.(*v1alpha1.AccountNetworkRules), nil
}
