/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/storage/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TableEntityLister helps list TableEntities.
// All objects returned here must be treated as read-only.
type TableEntityLister interface {
	// List lists all TableEntities in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TableEntity, err error)
	// TableEntities returns an object that can list and get TableEntities.
	TableEntities(namespace string) TableEntityNamespaceLister
	TableEntityListerExpansion
}

// tableEntityLister implements the TableEntityLister interface.
type tableEntityLister struct {
	indexer cache.Indexer
}

// NewTableEntityLister returns a new TableEntityLister.
func NewTableEntityLister(indexer cache.Indexer) TableEntityLister {
	return &tableEntityLister{indexer: indexer}
}

// List lists all TableEntities in the indexer.
func (s *tableEntityLister) List(selector labels.Selector) (ret []*v1alpha1.TableEntity, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TableEntity))
	})
	return ret, err
}

// TableEntities returns an object that can list and get TableEntities.
func (s *tableEntityLister) TableEntities(namespace string) TableEntityNamespaceLister {
	return tableEntityNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TableEntityNamespaceLister helps list and get TableEntities.
// All objects returned here must be treated as read-only.
type TableEntityNamespaceLister interface {
	// List lists all TableEntities in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TableEntity, err error)
	// Get retrieves the TableEntity from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TableEntity, error)
	TableEntityNamespaceListerExpansion
}

// tableEntityNamespaceLister implements the TableEntityNamespaceLister
// interface.
type tableEntityNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TableEntities in the indexer for a given namespace.
func (s tableEntityNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TableEntity, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TableEntity))
	})
	return ret, err
}

// Get retrieves the TableEntity from the indexer for a given namespace and name.
func (s tableEntityNamespaceLister) Get(name string) (*v1alpha1.TableEntity, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tableentity"), name)
	}
	return obj.(*v1alpha1.TableEntity), nil
}
