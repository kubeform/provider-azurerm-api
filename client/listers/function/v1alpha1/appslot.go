/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/function/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AppSlotLister helps list AppSlots.
// All objects returned here must be treated as read-only.
type AppSlotLister interface {
	// List lists all AppSlots in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AppSlot, err error)
	// AppSlots returns an object that can list and get AppSlots.
	AppSlots(namespace string) AppSlotNamespaceLister
	AppSlotListerExpansion
}

// appSlotLister implements the AppSlotLister interface.
type appSlotLister struct {
	indexer cache.Indexer
}

// NewAppSlotLister returns a new AppSlotLister.
func NewAppSlotLister(indexer cache.Indexer) AppSlotLister {
	return &appSlotLister{indexer: indexer}
}

// List lists all AppSlots in the indexer.
func (s *appSlotLister) List(selector labels.Selector) (ret []*v1alpha1.AppSlot, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppSlot))
	})
	return ret, err
}

// AppSlots returns an object that can list and get AppSlots.
func (s *appSlotLister) AppSlots(namespace string) AppSlotNamespaceLister {
	return appSlotNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AppSlotNamespaceLister helps list and get AppSlots.
// All objects returned here must be treated as read-only.
type AppSlotNamespaceLister interface {
	// List lists all AppSlots in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AppSlot, err error)
	// Get retrieves the AppSlot from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AppSlot, error)
	AppSlotNamespaceListerExpansion
}

// appSlotNamespaceLister implements the AppSlotNamespaceLister
// interface.
type appSlotNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AppSlots in the indexer for a given namespace.
func (s appSlotNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AppSlot, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppSlot))
	})
	return ret, err
}

// Get retrieves the AppSlot from the indexer for a given namespace and name.
func (s appSlotNamespaceLister) Get(name string) (*v1alpha1.AppSlot, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("appslot"), name)
	}
	return obj.(*v1alpha1.AppSlot), nil
}
