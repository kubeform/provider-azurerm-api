/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/hdinsight/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KafkaClusterLister helps list KafkaClusters.
// All objects returned here must be treated as read-only.
type KafkaClusterLister interface {
	// List lists all KafkaClusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KafkaCluster, err error)
	// KafkaClusters returns an object that can list and get KafkaClusters.
	KafkaClusters(namespace string) KafkaClusterNamespaceLister
	KafkaClusterListerExpansion
}

// kafkaClusterLister implements the KafkaClusterLister interface.
type kafkaClusterLister struct {
	indexer cache.Indexer
}

// NewKafkaClusterLister returns a new KafkaClusterLister.
func NewKafkaClusterLister(indexer cache.Indexer) KafkaClusterLister {
	return &kafkaClusterLister{indexer: indexer}
}

// List lists all KafkaClusters in the indexer.
func (s *kafkaClusterLister) List(selector labels.Selector) (ret []*v1alpha1.KafkaCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KafkaCluster))
	})
	return ret, err
}

// KafkaClusters returns an object that can list and get KafkaClusters.
func (s *kafkaClusterLister) KafkaClusters(namespace string) KafkaClusterNamespaceLister {
	return kafkaClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KafkaClusterNamespaceLister helps list and get KafkaClusters.
// All objects returned here must be treated as read-only.
type KafkaClusterNamespaceLister interface {
	// List lists all KafkaClusters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KafkaCluster, err error)
	// Get retrieves the KafkaCluster from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.KafkaCluster, error)
	KafkaClusterNamespaceListerExpansion
}

// kafkaClusterNamespaceLister implements the KafkaClusterNamespaceLister
// interface.
type kafkaClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KafkaClusters in the indexer for a given namespace.
func (s kafkaClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KafkaCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KafkaCluster))
	})
	return ret, err
}

// Get retrieves the KafkaCluster from the indexer for a given namespace and name.
func (s kafkaClusterNamespaceLister) Get(name string) (*v1alpha1.KafkaCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kafkacluster"), name)
	}
	return obj.(*v1alpha1.KafkaCluster), nil
}
