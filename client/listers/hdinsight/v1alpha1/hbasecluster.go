/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/hdinsight/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HbaseClusterLister helps list HbaseClusters.
// All objects returned here must be treated as read-only.
type HbaseClusterLister interface {
	// List lists all HbaseClusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HbaseCluster, err error)
	// HbaseClusters returns an object that can list and get HbaseClusters.
	HbaseClusters(namespace string) HbaseClusterNamespaceLister
	HbaseClusterListerExpansion
}

// hbaseClusterLister implements the HbaseClusterLister interface.
type hbaseClusterLister struct {
	indexer cache.Indexer
}

// NewHbaseClusterLister returns a new HbaseClusterLister.
func NewHbaseClusterLister(indexer cache.Indexer) HbaseClusterLister {
	return &hbaseClusterLister{indexer: indexer}
}

// List lists all HbaseClusters in the indexer.
func (s *hbaseClusterLister) List(selector labels.Selector) (ret []*v1alpha1.HbaseCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HbaseCluster))
	})
	return ret, err
}

// HbaseClusters returns an object that can list and get HbaseClusters.
func (s *hbaseClusterLister) HbaseClusters(namespace string) HbaseClusterNamespaceLister {
	return hbaseClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HbaseClusterNamespaceLister helps list and get HbaseClusters.
// All objects returned here must be treated as read-only.
type HbaseClusterNamespaceLister interface {
	// List lists all HbaseClusters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HbaseCluster, err error)
	// Get retrieves the HbaseCluster from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HbaseCluster, error)
	HbaseClusterNamespaceListerExpansion
}

// hbaseClusterNamespaceLister implements the HbaseClusterNamespaceLister
// interface.
type hbaseClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HbaseClusters in the indexer for a given namespace.
func (s hbaseClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HbaseCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HbaseCluster))
	})
	return ret, err
}

// Get retrieves the HbaseCluster from the indexer for a given namespace and name.
func (s hbaseClusterNamespaceLister) Get(name string) (*v1alpha1.HbaseCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hbasecluster"), name)
	}
	return obj.(*v1alpha1.HbaseCluster), nil
}
