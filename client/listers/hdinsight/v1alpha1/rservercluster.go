/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/hdinsight/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RserverClusterLister helps list RserverClusters.
// All objects returned here must be treated as read-only.
type RserverClusterLister interface {
	// List lists all RserverClusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RserverCluster, err error)
	// RserverClusters returns an object that can list and get RserverClusters.
	RserverClusters(namespace string) RserverClusterNamespaceLister
	RserverClusterListerExpansion
}

// rserverClusterLister implements the RserverClusterLister interface.
type rserverClusterLister struct {
	indexer cache.Indexer
}

// NewRserverClusterLister returns a new RserverClusterLister.
func NewRserverClusterLister(indexer cache.Indexer) RserverClusterLister {
	return &rserverClusterLister{indexer: indexer}
}

// List lists all RserverClusters in the indexer.
func (s *rserverClusterLister) List(selector labels.Selector) (ret []*v1alpha1.RserverCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RserverCluster))
	})
	return ret, err
}

// RserverClusters returns an object that can list and get RserverClusters.
func (s *rserverClusterLister) RserverClusters(namespace string) RserverClusterNamespaceLister {
	return rserverClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RserverClusterNamespaceLister helps list and get RserverClusters.
// All objects returned here must be treated as read-only.
type RserverClusterNamespaceLister interface {
	// List lists all RserverClusters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RserverCluster, err error)
	// Get retrieves the RserverCluster from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RserverCluster, error)
	RserverClusterNamespaceListerExpansion
}

// rserverClusterNamespaceLister implements the RserverClusterNamespaceLister
// interface.
type rserverClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RserverClusters in the indexer for a given namespace.
func (s rserverClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RserverCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RserverCluster))
	})
	return ret, err
}

// Get retrieves the RserverCluster from the indexer for a given namespace and name.
func (s rserverClusterNamespaceLister) Get(name string) (*v1alpha1.RserverCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("rservercluster"), name)
	}
	return obj.(*v1alpha1.RserverCluster), nil
}
