/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/hdinsight/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MlServicesClusterLister helps list MlServicesClusters.
// All objects returned here must be treated as read-only.
type MlServicesClusterLister interface {
	// List lists all MlServicesClusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MlServicesCluster, err error)
	// MlServicesClusters returns an object that can list and get MlServicesClusters.
	MlServicesClusters(namespace string) MlServicesClusterNamespaceLister
	MlServicesClusterListerExpansion
}

// mlServicesClusterLister implements the MlServicesClusterLister interface.
type mlServicesClusterLister struct {
	indexer cache.Indexer
}

// NewMlServicesClusterLister returns a new MlServicesClusterLister.
func NewMlServicesClusterLister(indexer cache.Indexer) MlServicesClusterLister {
	return &mlServicesClusterLister{indexer: indexer}
}

// List lists all MlServicesClusters in the indexer.
func (s *mlServicesClusterLister) List(selector labels.Selector) (ret []*v1alpha1.MlServicesCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MlServicesCluster))
	})
	return ret, err
}

// MlServicesClusters returns an object that can list and get MlServicesClusters.
func (s *mlServicesClusterLister) MlServicesClusters(namespace string) MlServicesClusterNamespaceLister {
	return mlServicesClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MlServicesClusterNamespaceLister helps list and get MlServicesClusters.
// All objects returned here must be treated as read-only.
type MlServicesClusterNamespaceLister interface {
	// List lists all MlServicesClusters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MlServicesCluster, err error)
	// Get retrieves the MlServicesCluster from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MlServicesCluster, error)
	MlServicesClusterNamespaceListerExpansion
}

// mlServicesClusterNamespaceLister implements the MlServicesClusterNamespaceLister
// interface.
type mlServicesClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MlServicesClusters in the indexer for a given namespace.
func (s mlServicesClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MlServicesCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MlServicesCluster))
	})
	return ret, err
}

// Get retrieves the MlServicesCluster from the indexer for a given namespace and name.
func (s mlServicesClusterNamespaceLister) Get(name string) (*v1alpha1.MlServicesCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("mlservicescluster"), name)
	}
	return obj.(*v1alpha1.MlServicesCluster), nil
}
