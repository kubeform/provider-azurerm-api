/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/marketplace/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AgreementLister helps list Agreements.
// All objects returned here must be treated as read-only.
type AgreementLister interface {
	// List lists all Agreements in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Agreement, err error)
	// Agreements returns an object that can list and get Agreements.
	Agreements(namespace string) AgreementNamespaceLister
	AgreementListerExpansion
}

// agreementLister implements the AgreementLister interface.
type agreementLister struct {
	indexer cache.Indexer
}

// NewAgreementLister returns a new AgreementLister.
func NewAgreementLister(indexer cache.Indexer) AgreementLister {
	return &agreementLister{indexer: indexer}
}

// List lists all Agreements in the indexer.
func (s *agreementLister) List(selector labels.Selector) (ret []*v1alpha1.Agreement, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Agreement))
	})
	return ret, err
}

// Agreements returns an object that can list and get Agreements.
func (s *agreementLister) Agreements(namespace string) AgreementNamespaceLister {
	return agreementNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AgreementNamespaceLister helps list and get Agreements.
// All objects returned here must be treated as read-only.
type AgreementNamespaceLister interface {
	// List lists all Agreements in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Agreement, err error)
	// Get retrieves the Agreement from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Agreement, error)
	AgreementNamespaceListerExpansion
}

// agreementNamespaceLister implements the AgreementNamespaceLister
// interface.
type agreementNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Agreements in the indexer for a given namespace.
func (s agreementNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Agreement, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Agreement))
	})
	return ret, err
}

// Get retrieves the Agreement from the indexer for a given namespace and name.
func (s agreementNamespaceLister) Get(name string) (*v1alpha1.Agreement, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("agreement"), name)
	}
	return obj.(*v1alpha1.Agreement), nil
}
