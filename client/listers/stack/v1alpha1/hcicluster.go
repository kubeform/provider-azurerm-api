/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/stack/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HciClusterLister helps list HciClusters.
// All objects returned here must be treated as read-only.
type HciClusterLister interface {
	// List lists all HciClusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HciCluster, err error)
	// HciClusters returns an object that can list and get HciClusters.
	HciClusters(namespace string) HciClusterNamespaceLister
	HciClusterListerExpansion
}

// hciClusterLister implements the HciClusterLister interface.
type hciClusterLister struct {
	indexer cache.Indexer
}

// NewHciClusterLister returns a new HciClusterLister.
func NewHciClusterLister(indexer cache.Indexer) HciClusterLister {
	return &hciClusterLister{indexer: indexer}
}

// List lists all HciClusters in the indexer.
func (s *hciClusterLister) List(selector labels.Selector) (ret []*v1alpha1.HciCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HciCluster))
	})
	return ret, err
}

// HciClusters returns an object that can list and get HciClusters.
func (s *hciClusterLister) HciClusters(namespace string) HciClusterNamespaceLister {
	return hciClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HciClusterNamespaceLister helps list and get HciClusters.
// All objects returned here must be treated as read-only.
type HciClusterNamespaceLister interface {
	// List lists all HciClusters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HciCluster, err error)
	// Get retrieves the HciCluster from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HciCluster, error)
	HciClusterNamespaceListerExpansion
}

// hciClusterNamespaceLister implements the HciClusterNamespaceLister
// interface.
type hciClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HciClusters in the indexer for a given namespace.
func (s hciClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HciCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HciCluster))
	})
	return ret, err
}

// Get retrieves the HciCluster from the indexer for a given namespace and name.
func (s hciClusterNamespaceLister) Get(name string) (*v1alpha1.HciCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hcicluster"), name)
	}
	return obj.(*v1alpha1.HciCluster), nil
}
