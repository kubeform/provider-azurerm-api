/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "kubeform.dev/provider-azurerm-api/apis/vpn/v1alpha1"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeServerConfigurations implements ServerConfigurationInterface
type FakeServerConfigurations struct {
	Fake *FakeVpnV1alpha1
	ns   string
}

var serverconfigurationsResource = schema.GroupVersionResource{Group: "vpn.azurerm.kubeform.com", Version: "v1alpha1", Resource: "serverconfigurations"}

var serverconfigurationsKind = schema.GroupVersionKind{Group: "vpn.azurerm.kubeform.com", Version: "v1alpha1", Kind: "ServerConfiguration"}

// Get takes name of the serverConfiguration, and returns the corresponding serverConfiguration object, and an error if there is any.
func (c *FakeServerConfigurations) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.ServerConfiguration, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(serverconfigurationsResource, c.ns, name), &v1alpha1.ServerConfiguration{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ServerConfiguration), err
}

// List takes label and field selectors, and returns the list of ServerConfigurations that match those selectors.
func (c *FakeServerConfigurations) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.ServerConfigurationList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(serverconfigurationsResource, serverconfigurationsKind, c.ns, opts), &v1alpha1.ServerConfigurationList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.ServerConfigurationList{ListMeta: obj.(*v1alpha1.ServerConfigurationList).ListMeta}
	for _, item := range obj.(*v1alpha1.ServerConfigurationList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested serverConfigurations.
func (c *FakeServerConfigurations) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(serverconfigurationsResource, c.ns, opts))

}

// Create takes the representation of a serverConfiguration and creates it.  Returns the server's representation of the serverConfiguration, and an error, if there is any.
func (c *FakeServerConfigurations) Create(ctx context.Context, serverConfiguration *v1alpha1.ServerConfiguration, opts v1.CreateOptions) (result *v1alpha1.ServerConfiguration, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(serverconfigurationsResource, c.ns, serverConfiguration), &v1alpha1.ServerConfiguration{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ServerConfiguration), err
}

// Update takes the representation of a serverConfiguration and updates it. Returns the server's representation of the serverConfiguration, and an error, if there is any.
func (c *FakeServerConfigurations) Update(ctx context.Context, serverConfiguration *v1alpha1.ServerConfiguration, opts v1.UpdateOptions) (result *v1alpha1.ServerConfiguration, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(serverconfigurationsResource, c.ns, serverConfiguration), &v1alpha1.ServerConfiguration{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ServerConfiguration), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeServerConfigurations) UpdateStatus(ctx context.Context, serverConfiguration *v1alpha1.ServerConfiguration, opts v1.UpdateOptions) (*v1alpha1.ServerConfiguration, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(serverconfigurationsResource, "status", c.ns, serverConfiguration), &v1alpha1.ServerConfiguration{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ServerConfiguration), err
}

// Delete takes name of the serverConfiguration and deletes it. Returns an error if one occurs.
func (c *FakeServerConfigurations) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(serverconfigurationsResource, c.ns, name), &v1alpha1.ServerConfiguration{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeServerConfigurations) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(serverconfigurationsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.ServerConfigurationList{})
	return err
}

// Patch applies the patch and returns the patched serverConfiguration.
func (c *FakeServerConfigurations) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.ServerConfiguration, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(serverconfigurationsResource, c.ns, name, pt, data, subresources...), &v1alpha1.ServerConfiguration{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ServerConfiguration), err
}
