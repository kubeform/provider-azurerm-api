/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by informer-gen. DO NOT EDIT.

package externalversions

import (
	reflect "reflect"
	sync "sync"
	time "time"

	versioned "kubeform.dev/provider-azurerm-api/client/clientset/versioned"
	advanced "kubeform.dev/provider-azurerm-api/client/informers/externalversions/advanced"
	analysis "kubeform.dev/provider-azurerm-api/client/informers/externalversions/analysis"
	apimanagement "kubeform.dev/provider-azurerm-api/client/informers/externalversions/apimanagement"
	app "kubeform.dev/provider-azurerm-api/client/informers/externalversions/app"
	application "kubeform.dev/provider-azurerm-api/client/informers/externalversions/application"
	attestation "kubeform.dev/provider-azurerm-api/client/informers/externalversions/attestation"
	automation "kubeform.dev/provider-azurerm-api/client/informers/externalversions/automation"
	availability "kubeform.dev/provider-azurerm-api/client/informers/externalversions/availability"
	backup "kubeform.dev/provider-azurerm-api/client/informers/externalversions/backup"
	bastion "kubeform.dev/provider-azurerm-api/client/informers/externalversions/bastion"
	batch "kubeform.dev/provider-azurerm-api/client/informers/externalversions/batch"
	blueprint "kubeform.dev/provider-azurerm-api/client/informers/externalversions/blueprint"
	bot "kubeform.dev/provider-azurerm-api/client/informers/externalversions/bot"
	cdn "kubeform.dev/provider-azurerm-api/client/informers/externalversions/cdn"
	cognitive "kubeform.dev/provider-azurerm-api/client/informers/externalversions/cognitive"
	communication "kubeform.dev/provider-azurerm-api/client/informers/externalversions/communication"
	consumption "kubeform.dev/provider-azurerm-api/client/informers/externalversions/consumption"
	container "kubeform.dev/provider-azurerm-api/client/informers/externalversions/container"
	cosmosdb "kubeform.dev/provider-azurerm-api/client/informers/externalversions/cosmosdb"
	cost "kubeform.dev/provider-azurerm-api/client/informers/externalversions/cost"
	custom "kubeform.dev/provider-azurerm-api/client/informers/externalversions/custom"
	dashboard "kubeform.dev/provider-azurerm-api/client/informers/externalversions/dashboard"
	data "kubeform.dev/provider-azurerm-api/client/informers/externalversions/data"
	database "kubeform.dev/provider-azurerm-api/client/informers/externalversions/database"
	databox "kubeform.dev/provider-azurerm-api/client/informers/externalversions/databox"
	databricks "kubeform.dev/provider-azurerm-api/client/informers/externalversions/databricks"
	dedicatedhardware "kubeform.dev/provider-azurerm-api/client/informers/externalversions/dedicatedhardware"
	dedicatedhost "kubeform.dev/provider-azurerm-api/client/informers/externalversions/dedicatedhost"
	devspace "kubeform.dev/provider-azurerm-api/client/informers/externalversions/devspace"
	devtest "kubeform.dev/provider-azurerm-api/client/informers/externalversions/devtest"
	digital "kubeform.dev/provider-azurerm-api/client/informers/externalversions/digital"
	disk "kubeform.dev/provider-azurerm-api/client/informers/externalversions/disk"
	dns "kubeform.dev/provider-azurerm-api/client/informers/externalversions/dns"
	eventgrid "kubeform.dev/provider-azurerm-api/client/informers/externalversions/eventgrid"
	eventhub "kubeform.dev/provider-azurerm-api/client/informers/externalversions/eventhub"
	expressroute "kubeform.dev/provider-azurerm-api/client/informers/externalversions/expressroute"
	firewall "kubeform.dev/provider-azurerm-api/client/informers/externalversions/firewall"
	frontdoor "kubeform.dev/provider-azurerm-api/client/informers/externalversions/frontdoor"
	function "kubeform.dev/provider-azurerm-api/client/informers/externalversions/function"
	hdinsight "kubeform.dev/provider-azurerm-api/client/informers/externalversions/hdinsight"
	healthbot "kubeform.dev/provider-azurerm-api/client/informers/externalversions/healthbot"
	healthcare "kubeform.dev/provider-azurerm-api/client/informers/externalversions/healthcare"
	hpc "kubeform.dev/provider-azurerm-api/client/informers/externalversions/hpc"
	image "kubeform.dev/provider-azurerm-api/client/informers/externalversions/image"
	integration "kubeform.dev/provider-azurerm-api/client/informers/externalversions/integration"
	internalinterfaces "kubeform.dev/provider-azurerm-api/client/informers/externalversions/internalinterfaces"
	iotcentral "kubeform.dev/provider-azurerm-api/client/informers/externalversions/iotcentral"
	iothub "kubeform.dev/provider-azurerm-api/client/informers/externalversions/iothub"
	iotsecurity "kubeform.dev/provider-azurerm-api/client/informers/externalversions/iotsecurity"
	iottime "kubeform.dev/provider-azurerm-api/client/informers/externalversions/iottime"
	ip "kubeform.dev/provider-azurerm-api/client/informers/externalversions/ip"
	keyvault "kubeform.dev/provider-azurerm-api/client/informers/externalversions/keyvault"
	kubernetescluster "kubeform.dev/provider-azurerm-api/client/informers/externalversions/kubernetescluster"
	kusto "kubeform.dev/provider-azurerm-api/client/informers/externalversions/kusto"
	lb "kubeform.dev/provider-azurerm-api/client/informers/externalversions/lb"
	lighthouse "kubeform.dev/provider-azurerm-api/client/informers/externalversions/lighthouse"
	linux "kubeform.dev/provider-azurerm-api/client/informers/externalversions/linux"
	local "kubeform.dev/provider-azurerm-api/client/informers/externalversions/local"
	loganalytics "kubeform.dev/provider-azurerm-api/client/informers/externalversions/loganalytics"
	logicapp "kubeform.dev/provider-azurerm-api/client/informers/externalversions/logicapp"
	machine "kubeform.dev/provider-azurerm-api/client/informers/externalversions/machine"
	maintenance "kubeform.dev/provider-azurerm-api/client/informers/externalversions/maintenance"
	managed "kubeform.dev/provider-azurerm-api/client/informers/externalversions/managed"
	management "kubeform.dev/provider-azurerm-api/client/informers/externalversions/management"
	maps "kubeform.dev/provider-azurerm-api/client/informers/externalversions/maps"
	mariadb "kubeform.dev/provider-azurerm-api/client/informers/externalversions/mariadb"
	marketplace "kubeform.dev/provider-azurerm-api/client/informers/externalversions/marketplace"
	media "kubeform.dev/provider-azurerm-api/client/informers/externalversions/media"
	monitor "kubeform.dev/provider-azurerm-api/client/informers/externalversions/monitor"
	mssql "kubeform.dev/provider-azurerm-api/client/informers/externalversions/mssql"
	mysql "kubeform.dev/provider-azurerm-api/client/informers/externalversions/mysql"
	nat "kubeform.dev/provider-azurerm-api/client/informers/externalversions/nat"
	netapp "kubeform.dev/provider-azurerm-api/client/informers/externalversions/netapp"
	network "kubeform.dev/provider-azurerm-api/client/informers/externalversions/network"
	notificationhub "kubeform.dev/provider-azurerm-api/client/informers/externalversions/notificationhub"
	orchestrated "kubeform.dev/provider-azurerm-api/client/informers/externalversions/orchestrated"
	packet "kubeform.dev/provider-azurerm-api/client/informers/externalversions/packet"
	point "kubeform.dev/provider-azurerm-api/client/informers/externalversions/point"
	policy "kubeform.dev/provider-azurerm-api/client/informers/externalversions/policy"
	portal "kubeform.dev/provider-azurerm-api/client/informers/externalversions/portal"
	postgresql "kubeform.dev/provider-azurerm-api/client/informers/externalversions/postgresql"
	powerbi "kubeform.dev/provider-azurerm-api/client/informers/externalversions/powerbi"
	private "kubeform.dev/provider-azurerm-api/client/informers/externalversions/private"
	proximity "kubeform.dev/provider-azurerm-api/client/informers/externalversions/proximity"
	publicip "kubeform.dev/provider-azurerm-api/client/informers/externalversions/publicip"
	purview "kubeform.dev/provider-azurerm-api/client/informers/externalversions/purview"
	recovery "kubeform.dev/provider-azurerm-api/client/informers/externalversions/recovery"
	redis "kubeform.dev/provider-azurerm-api/client/informers/externalversions/redis"
	relay "kubeform.dev/provider-azurerm-api/client/informers/externalversions/relay"
	resource "kubeform.dev/provider-azurerm-api/client/informers/externalversions/resource"
	role "kubeform.dev/provider-azurerm-api/client/informers/externalversions/role"
	route "kubeform.dev/provider-azurerm-api/client/informers/externalversions/route"
	search "kubeform.dev/provider-azurerm-api/client/informers/externalversions/search"
	security "kubeform.dev/provider-azurerm-api/client/informers/externalversions/security"
	sentinel "kubeform.dev/provider-azurerm-api/client/informers/externalversions/sentinel"
	service "kubeform.dev/provider-azurerm-api/client/informers/externalversions/service"
	servicebus "kubeform.dev/provider-azurerm-api/client/informers/externalversions/servicebus"
	sharedimage "kubeform.dev/provider-azurerm-api/client/informers/externalversions/sharedimage"
	signalr "kubeform.dev/provider-azurerm-api/client/informers/externalversions/signalr"
	siterecovery "kubeform.dev/provider-azurerm-api/client/informers/externalversions/siterecovery"
	snapshot "kubeform.dev/provider-azurerm-api/client/informers/externalversions/snapshot"
	spatial "kubeform.dev/provider-azurerm-api/client/informers/externalversions/spatial"
	spring "kubeform.dev/provider-azurerm-api/client/informers/externalversions/spring"
	sql "kubeform.dev/provider-azurerm-api/client/informers/externalversions/sql"
	ssh "kubeform.dev/provider-azurerm-api/client/informers/externalversions/ssh"
	stack "kubeform.dev/provider-azurerm-api/client/informers/externalversions/stack"
	static "kubeform.dev/provider-azurerm-api/client/informers/externalversions/static"
	storage "kubeform.dev/provider-azurerm-api/client/informers/externalversions/storage"
	stream "kubeform.dev/provider-azurerm-api/client/informers/externalversions/stream"
	subnet "kubeform.dev/provider-azurerm-api/client/informers/externalversions/subnet"
	subscription "kubeform.dev/provider-azurerm-api/client/informers/externalversions/subscription"
	synapse "kubeform.dev/provider-azurerm-api/client/informers/externalversions/synapse"
	template "kubeform.dev/provider-azurerm-api/client/informers/externalversions/template"
	tenant "kubeform.dev/provider-azurerm-api/client/informers/externalversions/tenant"
	trafficmanager "kubeform.dev/provider-azurerm-api/client/informers/externalversions/trafficmanager"
	user "kubeform.dev/provider-azurerm-api/client/informers/externalversions/user"
	virtual "kubeform.dev/provider-azurerm-api/client/informers/externalversions/virtual"
	vmware "kubeform.dev/provider-azurerm-api/client/informers/externalversions/vmware"
	vpn "kubeform.dev/provider-azurerm-api/client/informers/externalversions/vpn"
	web "kubeform.dev/provider-azurerm-api/client/informers/externalversions/web"
	windows "kubeform.dev/provider-azurerm-api/client/informers/externalversions/windows"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	cache "k8s.io/client-go/tools/cache"
)

// SharedInformerOption defines the functional option type for SharedInformerFactory.
type SharedInformerOption func(*sharedInformerFactory) *sharedInformerFactory

type sharedInformerFactory struct {
	client           versioned.Interface
	namespace        string
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	lock             sync.Mutex
	defaultResync    time.Duration
	customResync     map[reflect.Type]time.Duration

	informers map[reflect.Type]cache.SharedIndexInformer
	// startedInformers is used for tracking which informers have been started.
	// This allows Start() to be called multiple times safely.
	startedInformers map[reflect.Type]bool
}

// WithCustomResyncConfig sets a custom resync period for the specified informer types.
func WithCustomResyncConfig(resyncConfig map[v1.Object]time.Duration) SharedInformerOption {
	return func(factory *sharedInformerFactory) *sharedInformerFactory {
		for k, v := range resyncConfig {
			factory.customResync[reflect.TypeOf(k)] = v
		}
		return factory
	}
}

// WithTweakListOptions sets a custom filter on all listers of the configured SharedInformerFactory.
func WithTweakListOptions(tweakListOptions internalinterfaces.TweakListOptionsFunc) SharedInformerOption {
	return func(factory *sharedInformerFactory) *sharedInformerFactory {
		factory.tweakListOptions = tweakListOptions
		return factory
	}
}

// WithNamespace limits the SharedInformerFactory to the specified namespace.
func WithNamespace(namespace string) SharedInformerOption {
	return func(factory *sharedInformerFactory) *sharedInformerFactory {
		factory.namespace = namespace
		return factory
	}
}

// NewSharedInformerFactory constructs a new instance of sharedInformerFactory for all namespaces.
func NewSharedInformerFactory(client versioned.Interface, defaultResync time.Duration) SharedInformerFactory {
	return NewSharedInformerFactoryWithOptions(client, defaultResync)
}

// NewFilteredSharedInformerFactory constructs a new instance of sharedInformerFactory.
// Listers obtained via this SharedInformerFactory will be subject to the same filters
// as specified here.
// Deprecated: Please use NewSharedInformerFactoryWithOptions instead
func NewFilteredSharedInformerFactory(client versioned.Interface, defaultResync time.Duration, namespace string, tweakListOptions internalinterfaces.TweakListOptionsFunc) SharedInformerFactory {
	return NewSharedInformerFactoryWithOptions(client, defaultResync, WithNamespace(namespace), WithTweakListOptions(tweakListOptions))
}

// NewSharedInformerFactoryWithOptions constructs a new instance of a SharedInformerFactory with additional options.
func NewSharedInformerFactoryWithOptions(client versioned.Interface, defaultResync time.Duration, options ...SharedInformerOption) SharedInformerFactory {
	factory := &sharedInformerFactory{
		client:           client,
		namespace:        v1.NamespaceAll,
		defaultResync:    defaultResync,
		informers:        make(map[reflect.Type]cache.SharedIndexInformer),
		startedInformers: make(map[reflect.Type]bool),
		customResync:     make(map[reflect.Type]time.Duration),
	}

	// Apply all options
	for _, opt := range options {
		factory = opt(factory)
	}

	return factory
}

// Start initializes all requested informers.
func (f *sharedInformerFactory) Start(stopCh <-chan struct{}) {
	f.lock.Lock()
	defer f.lock.Unlock()

	for informerType, informer := range f.informers {
		if !f.startedInformers[informerType] {
			go informer.Run(stopCh)
			f.startedInformers[informerType] = true
		}
	}
}

// WaitForCacheSync waits for all started informers' cache were synced.
func (f *sharedInformerFactory) WaitForCacheSync(stopCh <-chan struct{}) map[reflect.Type]bool {
	informers := func() map[reflect.Type]cache.SharedIndexInformer {
		f.lock.Lock()
		defer f.lock.Unlock()

		informers := map[reflect.Type]cache.SharedIndexInformer{}
		for informerType, informer := range f.informers {
			if f.startedInformers[informerType] {
				informers[informerType] = informer
			}
		}
		return informers
	}()

	res := map[reflect.Type]bool{}
	for informType, informer := range informers {
		res[informType] = cache.WaitForCacheSync(stopCh, informer.HasSynced)
	}
	return res
}

// InternalInformerFor returns the SharedIndexInformer for obj using an internal
// client.
func (f *sharedInformerFactory) InformerFor(obj runtime.Object, newFunc internalinterfaces.NewInformerFunc) cache.SharedIndexInformer {
	f.lock.Lock()
	defer f.lock.Unlock()

	informerType := reflect.TypeOf(obj)
	informer, exists := f.informers[informerType]
	if exists {
		return informer
	}

	resyncPeriod, exists := f.customResync[informerType]
	if !exists {
		resyncPeriod = f.defaultResync
	}

	informer = newFunc(f.client, resyncPeriod)
	f.informers[informerType] = informer

	return informer
}

// SharedInformerFactory provides shared informers for resources in all known
// API group versions.
type SharedInformerFactory interface {
	internalinterfaces.SharedInformerFactory
	ForResource(resource schema.GroupVersionResource) (GenericInformer, error)
	WaitForCacheSync(stopCh <-chan struct{}) map[reflect.Type]bool

	Advanced() advanced.Interface
	Analysis() analysis.Interface
	Apimanagement() apimanagement.Interface
	App() app.Interface
	Application() application.Interface
	Attestation() attestation.Interface
	Automation() automation.Interface
	Availability() availability.Interface
	Backup() backup.Interface
	Bastion() bastion.Interface
	Batch() batch.Interface
	Blueprint() blueprint.Interface
	Bot() bot.Interface
	Cdn() cdn.Interface
	Cognitive() cognitive.Interface
	Communication() communication.Interface
	Consumption() consumption.Interface
	Container() container.Interface
	Cosmosdb() cosmosdb.Interface
	Cost() cost.Interface
	Custom() custom.Interface
	Dashboard() dashboard.Interface
	Data() data.Interface
	Database() database.Interface
	Databox() databox.Interface
	Databricks() databricks.Interface
	Dedicatedhardware() dedicatedhardware.Interface
	Dedicatedhost() dedicatedhost.Interface
	Devspace() devspace.Interface
	Devtest() devtest.Interface
	Digital() digital.Interface
	Disk() disk.Interface
	Dns() dns.Interface
	Eventgrid() eventgrid.Interface
	Eventhub() eventhub.Interface
	Expressroute() expressroute.Interface
	Firewall() firewall.Interface
	Frontdoor() frontdoor.Interface
	Function() function.Interface
	Hdinsight() hdinsight.Interface
	Healthbot() healthbot.Interface
	Healthcare() healthcare.Interface
	Hpc() hpc.Interface
	Image() image.Interface
	Integration() integration.Interface
	Iotcentral() iotcentral.Interface
	Iothub() iothub.Interface
	Iotsecurity() iotsecurity.Interface
	Iottime() iottime.Interface
	Ip() ip.Interface
	Keyvault() keyvault.Interface
	Kubernetescluster() kubernetescluster.Interface
	Kusto() kusto.Interface
	Lb() lb.Interface
	Lighthouse() lighthouse.Interface
	Linux() linux.Interface
	Local() local.Interface
	Loganalytics() loganalytics.Interface
	Logicapp() logicapp.Interface
	Machine() machine.Interface
	Maintenance() maintenance.Interface
	Managed() managed.Interface
	Management() management.Interface
	Maps() maps.Interface
	Mariadb() mariadb.Interface
	Marketplace() marketplace.Interface
	Media() media.Interface
	Monitor() monitor.Interface
	Mssql() mssql.Interface
	Mysql() mysql.Interface
	Nat() nat.Interface
	Netapp() netapp.Interface
	Network() network.Interface
	Notificationhub() notificationhub.Interface
	Orchestrated() orchestrated.Interface
	Packet() packet.Interface
	Point() point.Interface
	Policy() policy.Interface
	Portal() portal.Interface
	Postgresql() postgresql.Interface
	Powerbi() powerbi.Interface
	Private() private.Interface
	Proximity() proximity.Interface
	Publicip() publicip.Interface
	Purview() purview.Interface
	Recovery() recovery.Interface
	Redis() redis.Interface
	Relay() relay.Interface
	Resource() resource.Interface
	Role() role.Interface
	Route() route.Interface
	Search() search.Interface
	Security() security.Interface
	Sentinel() sentinel.Interface
	Service() service.Interface
	Servicebus() servicebus.Interface
	Sharedimage() sharedimage.Interface
	Signalr() signalr.Interface
	Siterecovery() siterecovery.Interface
	Snapshot() snapshot.Interface
	Spatial() spatial.Interface
	Spring() spring.Interface
	Sql() sql.Interface
	Ssh() ssh.Interface
	Stack() stack.Interface
	Static() static.Interface
	Storage() storage.Interface
	Stream() stream.Interface
	Subnet() subnet.Interface
	Subscription() subscription.Interface
	Synapse() synapse.Interface
	Template() template.Interface
	Tenant() tenant.Interface
	Trafficmanager() trafficmanager.Interface
	User() user.Interface
	Virtual() virtual.Interface
	Vmware() vmware.Interface
	Vpn() vpn.Interface
	Web() web.Interface
	Windows() windows.Interface
}

func (f *sharedInformerFactory) Advanced() advanced.Interface {
	return advanced.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Analysis() analysis.Interface {
	return analysis.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Apimanagement() apimanagement.Interface {
	return apimanagement.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) App() app.Interface {
	return app.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Application() application.Interface {
	return application.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Attestation() attestation.Interface {
	return attestation.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Automation() automation.Interface {
	return automation.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Availability() availability.Interface {
	return availability.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Backup() backup.Interface {
	return backup.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Bastion() bastion.Interface {
	return bastion.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Batch() batch.Interface {
	return batch.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Blueprint() blueprint.Interface {
	return blueprint.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Bot() bot.Interface {
	return bot.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Cdn() cdn.Interface {
	return cdn.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Cognitive() cognitive.Interface {
	return cognitive.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Communication() communication.Interface {
	return communication.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Consumption() consumption.Interface {
	return consumption.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Container() container.Interface {
	return container.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Cosmosdb() cosmosdb.Interface {
	return cosmosdb.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Cost() cost.Interface {
	return cost.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Custom() custom.Interface {
	return custom.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Dashboard() dashboard.Interface {
	return dashboard.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Data() data.Interface {
	return data.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Database() database.Interface {
	return database.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Databox() databox.Interface {
	return databox.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Databricks() databricks.Interface {
	return databricks.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Dedicatedhardware() dedicatedhardware.Interface {
	return dedicatedhardware.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Dedicatedhost() dedicatedhost.Interface {
	return dedicatedhost.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Devspace() devspace.Interface {
	return devspace.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Devtest() devtest.Interface {
	return devtest.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Digital() digital.Interface {
	return digital.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Disk() disk.Interface {
	return disk.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Dns() dns.Interface {
	return dns.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Eventgrid() eventgrid.Interface {
	return eventgrid.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Eventhub() eventhub.Interface {
	return eventhub.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Expressroute() expressroute.Interface {
	return expressroute.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Firewall() firewall.Interface {
	return firewall.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Frontdoor() frontdoor.Interface {
	return frontdoor.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Function() function.Interface {
	return function.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Hdinsight() hdinsight.Interface {
	return hdinsight.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Healthbot() healthbot.Interface {
	return healthbot.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Healthcare() healthcare.Interface {
	return healthcare.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Hpc() hpc.Interface {
	return hpc.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Image() image.Interface {
	return image.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Integration() integration.Interface {
	return integration.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Iotcentral() iotcentral.Interface {
	return iotcentral.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Iothub() iothub.Interface {
	return iothub.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Iotsecurity() iotsecurity.Interface {
	return iotsecurity.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Iottime() iottime.Interface {
	return iottime.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Ip() ip.Interface {
	return ip.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Keyvault() keyvault.Interface {
	return keyvault.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Kubernetescluster() kubernetescluster.Interface {
	return kubernetescluster.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Kusto() kusto.Interface {
	return kusto.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Lb() lb.Interface {
	return lb.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Lighthouse() lighthouse.Interface {
	return lighthouse.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Linux() linux.Interface {
	return linux.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Local() local.Interface {
	return local.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Loganalytics() loganalytics.Interface {
	return loganalytics.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Logicapp() logicapp.Interface {
	return logicapp.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Machine() machine.Interface {
	return machine.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Maintenance() maintenance.Interface {
	return maintenance.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Managed() managed.Interface {
	return managed.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Management() management.Interface {
	return management.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Maps() maps.Interface {
	return maps.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Mariadb() mariadb.Interface {
	return mariadb.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Marketplace() marketplace.Interface {
	return marketplace.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Media() media.Interface {
	return media.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Monitor() monitor.Interface {
	return monitor.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Mssql() mssql.Interface {
	return mssql.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Mysql() mysql.Interface {
	return mysql.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Nat() nat.Interface {
	return nat.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Netapp() netapp.Interface {
	return netapp.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Network() network.Interface {
	return network.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Notificationhub() notificationhub.Interface {
	return notificationhub.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Orchestrated() orchestrated.Interface {
	return orchestrated.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Packet() packet.Interface {
	return packet.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Point() point.Interface {
	return point.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Policy() policy.Interface {
	return policy.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Portal() portal.Interface {
	return portal.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Postgresql() postgresql.Interface {
	return postgresql.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Powerbi() powerbi.Interface {
	return powerbi.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Private() private.Interface {
	return private.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Proximity() proximity.Interface {
	return proximity.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Publicip() publicip.Interface {
	return publicip.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Purview() purview.Interface {
	return purview.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Recovery() recovery.Interface {
	return recovery.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Redis() redis.Interface {
	return redis.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Relay() relay.Interface {
	return relay.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Resource() resource.Interface {
	return resource.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Role() role.Interface {
	return role.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Route() route.Interface {
	return route.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Search() search.Interface {
	return search.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Security() security.Interface {
	return security.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Sentinel() sentinel.Interface {
	return sentinel.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Service() service.Interface {
	return service.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Servicebus() servicebus.Interface {
	return servicebus.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Sharedimage() sharedimage.Interface {
	return sharedimage.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Signalr() signalr.Interface {
	return signalr.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Siterecovery() siterecovery.Interface {
	return siterecovery.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Snapshot() snapshot.Interface {
	return snapshot.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Spatial() spatial.Interface {
	return spatial.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Spring() spring.Interface {
	return spring.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Sql() sql.Interface {
	return sql.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Ssh() ssh.Interface {
	return ssh.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Stack() stack.Interface {
	return stack.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Static() static.Interface {
	return static.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Storage() storage.Interface {
	return storage.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Stream() stream.Interface {
	return stream.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Subnet() subnet.Interface {
	return subnet.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Subscription() subscription.Interface {
	return subscription.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Synapse() synapse.Interface {
	return synapse.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Template() template.Interface {
	return template.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Tenant() tenant.Interface {
	return tenant.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Trafficmanager() trafficmanager.Interface {
	return trafficmanager.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) User() user.Interface {
	return user.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Virtual() virtual.Interface {
	return virtual.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Vmware() vmware.Interface {
	return vmware.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Vpn() vpn.Interface {
	return vpn.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Web() web.Interface {
	return web.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Windows() windows.Interface {
	return windows.New(f, f.namespace, f.tweakListOptions)
}
